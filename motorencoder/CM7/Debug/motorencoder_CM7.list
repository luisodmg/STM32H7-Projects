
motorencoder_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006110  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080063a8  080063a8  000073a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063e0  080063e0  00008010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080063e0  080063e0  000073e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063e8  080063e8  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063e8  080063e8  000073e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080063ec  080063ec  000073ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  080063f0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  24000010  08006400  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400015c  08006400  0000815c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001304a  00000000  00000000  0000803e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c9  00000000  00000000  0001b088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  0001d258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bd8  00000000  00000000  0001e188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039b40  00000000  00000000  0001ed60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012fc7  00000000  00000000  000588a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00183baa  00000000  00000000  0006b867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ef411  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004088  00000000  00000000  001ef454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001f34dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006390 	.word	0x08006390

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08006390 	.word	0x08006390

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000608:	4b49      	ldr	r3, [pc, #292]	@ (8000730 <SystemInit+0x12c>)
 800060a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800060e:	4a48      	ldr	r2, [pc, #288]	@ (8000730 <SystemInit+0x12c>)
 8000610:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000614:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000618:	4b45      	ldr	r3, [pc, #276]	@ (8000730 <SystemInit+0x12c>)
 800061a:	691b      	ldr	r3, [r3, #16]
 800061c:	4a44      	ldr	r2, [pc, #272]	@ (8000730 <SystemInit+0x12c>)
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000624:	4b43      	ldr	r3, [pc, #268]	@ (8000734 <SystemInit+0x130>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f003 030f 	and.w	r3, r3, #15
 800062c:	2b06      	cmp	r3, #6
 800062e:	d807      	bhi.n	8000640 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000630:	4b40      	ldr	r3, [pc, #256]	@ (8000734 <SystemInit+0x130>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f023 030f 	bic.w	r3, r3, #15
 8000638:	4a3e      	ldr	r2, [pc, #248]	@ (8000734 <SystemInit+0x130>)
 800063a:	f043 0307 	orr.w	r3, r3, #7
 800063e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000640:	4b3d      	ldr	r3, [pc, #244]	@ (8000738 <SystemInit+0x134>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a3c      	ldr	r2, [pc, #240]	@ (8000738 <SystemInit+0x134>)
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800064c:	4b3a      	ldr	r3, [pc, #232]	@ (8000738 <SystemInit+0x134>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000652:	4b39      	ldr	r3, [pc, #228]	@ (8000738 <SystemInit+0x134>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	4938      	ldr	r1, [pc, #224]	@ (8000738 <SystemInit+0x134>)
 8000658:	4b38      	ldr	r3, [pc, #224]	@ (800073c <SystemInit+0x138>)
 800065a:	4013      	ands	r3, r2
 800065c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800065e:	4b35      	ldr	r3, [pc, #212]	@ (8000734 <SystemInit+0x130>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f003 0308 	and.w	r3, r3, #8
 8000666:	2b00      	cmp	r3, #0
 8000668:	d007      	beq.n	800067a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800066a:	4b32      	ldr	r3, [pc, #200]	@ (8000734 <SystemInit+0x130>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f023 030f 	bic.w	r3, r3, #15
 8000672:	4a30      	ldr	r2, [pc, #192]	@ (8000734 <SystemInit+0x130>)
 8000674:	f043 0307 	orr.w	r3, r3, #7
 8000678:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800067a:	4b2f      	ldr	r3, [pc, #188]	@ (8000738 <SystemInit+0x134>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000680:	4b2d      	ldr	r3, [pc, #180]	@ (8000738 <SystemInit+0x134>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000686:	4b2c      	ldr	r3, [pc, #176]	@ (8000738 <SystemInit+0x134>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800068c:	4b2a      	ldr	r3, [pc, #168]	@ (8000738 <SystemInit+0x134>)
 800068e:	4a2c      	ldr	r2, [pc, #176]	@ (8000740 <SystemInit+0x13c>)
 8000690:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000692:	4b29      	ldr	r3, [pc, #164]	@ (8000738 <SystemInit+0x134>)
 8000694:	4a2b      	ldr	r2, [pc, #172]	@ (8000744 <SystemInit+0x140>)
 8000696:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000698:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <SystemInit+0x134>)
 800069a:	4a2b      	ldr	r2, [pc, #172]	@ (8000748 <SystemInit+0x144>)
 800069c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800069e:	4b26      	ldr	r3, [pc, #152]	@ (8000738 <SystemInit+0x134>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80006a4:	4b24      	ldr	r3, [pc, #144]	@ (8000738 <SystemInit+0x134>)
 80006a6:	4a28      	ldr	r2, [pc, #160]	@ (8000748 <SystemInit+0x144>)
 80006a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006aa:	4b23      	ldr	r3, [pc, #140]	@ (8000738 <SystemInit+0x134>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80006b0:	4b21      	ldr	r3, [pc, #132]	@ (8000738 <SystemInit+0x134>)
 80006b2:	4a25      	ldr	r2, [pc, #148]	@ (8000748 <SystemInit+0x144>)
 80006b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006b6:	4b20      	ldr	r3, [pc, #128]	@ (8000738 <SystemInit+0x134>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <SystemInit+0x134>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a1d      	ldr	r2, [pc, #116]	@ (8000738 <SystemInit+0x134>)
 80006c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80006c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <SystemInit+0x134>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006ce:	4b1f      	ldr	r3, [pc, #124]	@ (800074c <SystemInit+0x148>)
 80006d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006d2:	4a1e      	ldr	r2, [pc, #120]	@ (800074c <SystemInit+0x148>)
 80006d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d8:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006da:	4b1d      	ldr	r3, [pc, #116]	@ (8000750 <SystemInit+0x14c>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <SystemInit+0x150>)
 80006e0:	4013      	ands	r3, r2
 80006e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006e6:	d202      	bcs.n	80006ee <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000758 <SystemInit+0x154>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80006ee:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <SystemInit+0x134>)
 80006f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d113      	bne.n	8000724 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80006fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <SystemInit+0x134>)
 80006fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000702:	4a0d      	ldr	r2, [pc, #52]	@ (8000738 <SystemInit+0x134>)
 8000704:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000708:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800070c:	4b13      	ldr	r3, [pc, #76]	@ (800075c <SystemInit+0x158>)
 800070e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000712:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000714:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <SystemInit+0x134>)
 8000716:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800071a:	4a07      	ldr	r2, [pc, #28]	@ (8000738 <SystemInit+0x134>)
 800071c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000720:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000ed00 	.word	0xe000ed00
 8000734:	52002000 	.word	0x52002000
 8000738:	58024400 	.word	0x58024400
 800073c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000740:	02020200 	.word	0x02020200
 8000744:	01ff0000 	.word	0x01ff0000
 8000748:	01010280 	.word	0x01010280
 800074c:	580000c0 	.word	0x580000c0
 8000750:	5c001000 	.word	0x5c001000
 8000754:	ffff0000 	.word	0xffff0000
 8000758:	51008108 	.word	0x51008108
 800075c:	52004000 	.word	0x52004000

08000760 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <ExitRun0Mode+0x2c>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	4a08      	ldr	r2, [pc, #32]	@ (800078c <ExitRun0Mode+0x2c>)
 800076a:	f023 0302 	bic.w	r3, r3, #2
 800076e:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000770:	bf00      	nop
 8000772:	4b06      	ldr	r3, [pc, #24]	@ (800078c <ExitRun0Mode+0x2c>)
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0f9      	beq.n	8000772 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800077e:	bf00      	nop
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	58024800 	.word	0x58024800

08000790 <setEscSpeed>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Ajusta el ancho de pulso (en microsegundos) para el ESC
void setEscSpeed(uint16_t pulseWidth_us)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	80fb      	strh	r3, [r7, #6]
    if (pulseWidth_us < 1000) pulseWidth_us = 1000;   // límite inferior
 800079a:	88fb      	ldrh	r3, [r7, #6]
 800079c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80007a0:	d202      	bcs.n	80007a8 <setEscSpeed+0x18>
 80007a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007a6:	80fb      	strh	r3, [r7, #6]
    if (pulseWidth_us > 2000) pulseWidth_us = 2000;   // límite superior
 80007a8:	88fb      	ldrh	r3, [r7, #6]
 80007aa:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80007ae:	d902      	bls.n	80007b6 <setEscSpeed+0x26>
 80007b0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007b4:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, pulseWidth_us);
 80007b6:	4b05      	ldr	r3, [pc, #20]	@ (80007cc <setEscSpeed+0x3c>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	88fa      	ldrh	r2, [r7, #6]
 80007bc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	24000078 	.word	0x24000078

080007d0 <stopCarEsc>:

// Pone el ESC en neutral (1.5 ms)
void stopCarEsc(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, 1500);
 80007d4:	4b04      	ldr	r3, [pc, #16]	@ (80007e8 <stopCarEsc+0x18>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80007dc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	24000078 	.word	0x24000078

080007ec <escCalibrate>:

// Calibración del ESC
void escCalibrate(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
    // Paso 1: Full Throttle
    setEscSpeed(2000);
 80007f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007f4:	f7ff ffcc 	bl	8000790 <setEscSpeed>
    HAL_Delay(5000);
 80007f8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80007fc:	f000 fc74 	bl	80010e8 <HAL_Delay>

    // Paso 2: Full Reverse
    setEscSpeed(1000);
 8000800:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000804:	f7ff ffc4 	bl	8000790 <setEscSpeed>
    HAL_Delay(5000);
 8000808:	f241 3088 	movw	r0, #5000	@ 0x1388
 800080c:	f000 fc6c 	bl	80010e8 <HAL_Delay>

    // Paso 3: Neutral
    stopCarEsc();
 8000810:	f7ff ffde 	bl	80007d0 <stopCarEsc>
    HAL_Delay(2000);
 8000814:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000818:	f000 fc66 	bl	80010e8 <HAL_Delay>
}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}

08000820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
  int32_t timeout;
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000826:	f000 fa1d 	bl	8000c64 <MPU_Config>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800082a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800082e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000830:	bf00      	nop
 8000832:	4b3b      	ldr	r3, [pc, #236]	@ (8000920 <main+0x100>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800083a:	2b00      	cmp	r3, #0
 800083c:	d004      	beq.n	8000848 <main+0x28>
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	1e5a      	subs	r2, r3, #1
 8000842:	607a      	str	r2, [r7, #4]
 8000844:	2b00      	cmp	r3, #0
 8000846:	dcf4      	bgt.n	8000832 <main+0x12>
  if ( timeout < 0 )
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	da01      	bge.n	8000852 <main+0x32>
  {
  Error_Handler();
 800084e:	f000 fa35 	bl	8000cbc <Error_Handler>
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000852:	f000 fbb7 	bl	8000fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000856:	f000 f869 	bl	800092c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800085a:	4b31      	ldr	r3, [pc, #196]	@ (8000920 <main+0x100>)
 800085c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000860:	4a2f      	ldr	r2, [pc, #188]	@ (8000920 <main+0x100>)
 8000862:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000866:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800086a:	4b2d      	ldr	r3, [pc, #180]	@ (8000920 <main+0x100>)
 800086c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000870:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000874:	603b      	str	r3, [r7, #0]
 8000876:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000878:	2000      	movs	r0, #0
 800087a:	f000 ff71 	bl	8001760 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800087e:	2100      	movs	r1, #0
 8000880:	2000      	movs	r0, #0
 8000882:	f000 ff87 	bl	8001794 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000886:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800088a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800088c:	bf00      	nop
 800088e:	4b24      	ldr	r3, [pc, #144]	@ (8000920 <main+0x100>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000896:	2b00      	cmp	r3, #0
 8000898:	d104      	bne.n	80008a4 <main+0x84>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	1e5a      	subs	r2, r3, #1
 800089e:	607a      	str	r2, [r7, #4]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	dcf4      	bgt.n	800088e <main+0x6e>
if ( timeout < 0 )
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	da01      	bge.n	80008ae <main+0x8e>
{
Error_Handler();
 80008aa:	f000 fa07 	bl	8000cbc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ae:	f000 f9a1 	bl	8000bf4 <MX_GPIO_Init>
  MX_TIM13_Init();
 80008b2:	f000 f8b7 	bl	8000a24 <MX_TIM13_Init>
  MX_USART3_UART_Init();
 80008b6:	f000 f951 	bl	8000b5c <MX_USART3_UART_Init>
  MX_TIM14_Init();
 80008ba:	f000 f901 	bl	8000ac0 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  // Arrancar el PWM en TIM13 canal 1
  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80008be:	2100      	movs	r1, #0
 80008c0:	4818      	ldr	r0, [pc, #96]	@ (8000924 <main+0x104>)
 80008c2:	f003 fe9f 	bl	8004604 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80008c6:	2100      	movs	r1, #0
 80008c8:	4817      	ldr	r0, [pc, #92]	@ (8000928 <main+0x108>)
 80008ca:	f003 fe9b 	bl	8004604 <HAL_TIM_PWM_Start>
  setEscSpeed(2000); // Full Throttle
 80008ce:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80008d2:	f7ff ff5d 	bl	8000790 <setEscSpeed>
  HAL_Delay(5000);   // espera 5 segundos
 80008d6:	f241 3088 	movw	r0, #5000	@ 0x1388
 80008da:	f000 fc05 	bl	80010e8 <HAL_Delay>
  escCalibrate();
 80008de:	f7ff ff85 	bl	80007ec <escCalibrate>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      // Avanza a máxima velocidad
      setEscSpeed(1700);
 80008e2:	f240 60a4 	movw	r0, #1700	@ 0x6a4
 80008e6:	f7ff ff53 	bl	8000790 <setEscSpeed>
      HAL_Delay(2000);
 80008ea:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80008ee:	f000 fbfb 	bl	80010e8 <HAL_Delay>

      // Neutro
      stopCarEsc();
 80008f2:	f7ff ff6d 	bl	80007d0 <stopCarEsc>
      HAL_Delay(2000);
 80008f6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80008fa:	f000 fbf5 	bl	80010e8 <HAL_Delay>

      // Reversa
      setEscSpeed(1250);
 80008fe:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8000902:	f7ff ff45 	bl	8000790 <setEscSpeed>
      HAL_Delay(2000);
 8000906:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800090a:	f000 fbed 	bl	80010e8 <HAL_Delay>

      // Neutro
      stopCarEsc();
 800090e:	f7ff ff5f 	bl	80007d0 <stopCarEsc>
      HAL_Delay(2000);
 8000912:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000916:	f000 fbe7 	bl	80010e8 <HAL_Delay>
      setEscSpeed(1700);
 800091a:	bf00      	nop
 800091c:	e7e1      	b.n	80008e2 <main+0xc2>
 800091e:	bf00      	nop
 8000920:	58024400 	.word	0x58024400
 8000924:	2400002c 	.word	0x2400002c
 8000928:	24000078 	.word	0x24000078

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b09c      	sub	sp, #112	@ 0x70
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000936:	224c      	movs	r2, #76	@ 0x4c
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f005 fcfc 	bl	8006338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2220      	movs	r2, #32
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f005 fcf6 	bl	8006338 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800094c:	2004      	movs	r0, #4
 800094e:	f000 ff35 	bl	80017bc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4b31      	ldr	r3, [pc, #196]	@ (8000a1c <SystemClock_Config+0xf0>)
 8000958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800095a:	4a30      	ldr	r2, [pc, #192]	@ (8000a1c <SystemClock_Config+0xf0>)
 800095c:	f023 0301 	bic.w	r3, r3, #1
 8000960:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000962:	4b2e      	ldr	r3, [pc, #184]	@ (8000a1c <SystemClock_Config+0xf0>)
 8000964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a20 <SystemClock_Config+0xf4>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	4a2b      	ldr	r2, [pc, #172]	@ (8000a20 <SystemClock_Config+0xf4>)
 8000972:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000976:	6193      	str	r3, [r2, #24]
 8000978:	4b29      	ldr	r3, [pc, #164]	@ (8000a20 <SystemClock_Config+0xf4>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000984:	bf00      	nop
 8000986:	4b26      	ldr	r3, [pc, #152]	@ (8000a20 <SystemClock_Config+0xf4>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800098e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000992:	d1f8      	bne.n	8000986 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000994:	2302      	movs	r3, #2
 8000996:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000998:	2301      	movs	r3, #1
 800099a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800099c:	2340      	movs	r3, #64	@ 0x40
 800099e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a0:	2302      	movs	r3, #2
 80009a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009a4:	2300      	movs	r3, #0
 80009a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009a8:	2304      	movs	r3, #4
 80009aa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 80009ac:	2332      	movs	r3, #50	@ 0x32
 80009ae:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009b0:	2302      	movs	r3, #2
 80009b2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009bc:	230c      	movs	r3, #12
 80009be:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 ff4f 	bl	8001870 <HAL_RCC_OscConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80009d8:	f000 f970 	bl	8000cbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009dc:	233f      	movs	r3, #63	@ 0x3f
 80009de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e0:	2303      	movs	r3, #3
 80009e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009e8:	2308      	movs	r3, #8
 80009ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009ec:	2340      	movs	r3, #64	@ 0x40
 80009ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009f0:	2340      	movs	r3, #64	@ 0x40
 80009f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009fa:	2340      	movs	r3, #64	@ 0x40
 80009fc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2102      	movs	r1, #2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 fb8e 	bl	8002124 <HAL_RCC_ClockConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000a0e:	f000 f955 	bl	8000cbc <Error_Handler>
  }
}
 8000a12:	bf00      	nop
 8000a14:	3770      	adds	r7, #112	@ 0x70
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	58000400 	.word	0x58000400
 8000a20:	58024800 	.word	0x58024800

08000a24 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
 8000a38:	615a      	str	r2, [r3, #20]
 8000a3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab8 <MX_TIM13_Init+0x94>)
 8000a3e:	4a1f      	ldr	r2, [pc, #124]	@ (8000abc <MX_TIM13_Init+0x98>)
 8000a40:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 199;
 8000a42:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab8 <MX_TIM13_Init+0x94>)
 8000a44:	22c7      	movs	r2, #199	@ 0xc7
 8000a46:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a48:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab8 <MX_TIM13_Init+0x94>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 19999;
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab8 <MX_TIM13_Init+0x94>)
 8000a50:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000a54:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a56:	4b18      	ldr	r3, [pc, #96]	@ (8000ab8 <MX_TIM13_Init+0x94>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a5c:	4b16      	ldr	r3, [pc, #88]	@ (8000ab8 <MX_TIM13_Init+0x94>)
 8000a5e:	2280      	movs	r2, #128	@ 0x80
 8000a60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000a62:	4815      	ldr	r0, [pc, #84]	@ (8000ab8 <MX_TIM13_Init+0x94>)
 8000a64:	f003 fd16 	bl	8004494 <HAL_TIM_Base_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8000a6e:	f000 f925 	bl	8000cbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8000a72:	4811      	ldr	r0, [pc, #68]	@ (8000ab8 <MX_TIM13_Init+0x94>)
 8000a74:	f003 fd65 	bl	8004542 <HAL_TIM_PWM_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8000a7e:	f000 f91d 	bl	8000cbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a82:	2360      	movs	r3, #96	@ 0x60
 8000a84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8000a86:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000a8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2200      	movs	r2, #0
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4807      	ldr	r0, [pc, #28]	@ (8000ab8 <MX_TIM13_Init+0x94>)
 8000a9c:	f003 fec0 	bl	8004820 <HAL_TIM_PWM_ConfigChannel>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 8000aa6:	f000 f909 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8000aaa:	4803      	ldr	r0, [pc, #12]	@ (8000ab8 <MX_TIM13_Init+0x94>)
 8000aac:	f000 f960 	bl	8000d70 <HAL_TIM_MspPostInit>

}
 8000ab0:	bf00      	nop
 8000ab2:	3720      	adds	r7, #32
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	2400002c 	.word	0x2400002c
 8000abc:	40001c00 	.word	0x40001c00

08000ac0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
 8000ad4:	615a      	str	r2, [r3, #20]
 8000ad6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000ad8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b54 <MX_TIM14_Init+0x94>)
 8000ada:	4a1f      	ldr	r2, [pc, #124]	@ (8000b58 <MX_TIM14_Init+0x98>)
 8000adc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 199;
 8000ade:	4b1d      	ldr	r3, [pc, #116]	@ (8000b54 <MX_TIM14_Init+0x94>)
 8000ae0:	22c7      	movs	r2, #199	@ 0xc7
 8000ae2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b54 <MX_TIM14_Init+0x94>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 19999;
 8000aea:	4b1a      	ldr	r3, [pc, #104]	@ (8000b54 <MX_TIM14_Init+0x94>)
 8000aec:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000af0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af2:	4b18      	ldr	r3, [pc, #96]	@ (8000b54 <MX_TIM14_Init+0x94>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000af8:	4b16      	ldr	r3, [pc, #88]	@ (8000b54 <MX_TIM14_Init+0x94>)
 8000afa:	2280      	movs	r2, #128	@ 0x80
 8000afc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000afe:	4815      	ldr	r0, [pc, #84]	@ (8000b54 <MX_TIM14_Init+0x94>)
 8000b00:	f003 fcc8 	bl	8004494 <HAL_TIM_Base_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8000b0a:	f000 f8d7 	bl	8000cbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000b0e:	4811      	ldr	r0, [pc, #68]	@ (8000b54 <MX_TIM14_Init+0x94>)
 8000b10:	f003 fd17 	bl	8004542 <HAL_TIM_PWM_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8000b1a:	f000 f8cf 	bl	8000cbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b1e:	2360      	movs	r3, #96	@ 0x60
 8000b20:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8000b22:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000b26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	2200      	movs	r2, #0
 8000b34:	4619      	mov	r1, r3
 8000b36:	4807      	ldr	r0, [pc, #28]	@ (8000b54 <MX_TIM14_Init+0x94>)
 8000b38:	f003 fe72 	bl	8004820 <HAL_TIM_PWM_ConfigChannel>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 8000b42:	f000 f8bb 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000b46:	4803      	ldr	r0, [pc, #12]	@ (8000b54 <MX_TIM14_Init+0x94>)
 8000b48:	f000 f912 	bl	8000d70 <HAL_TIM_MspPostInit>

}
 8000b4c:	bf00      	nop
 8000b4e:	3720      	adds	r7, #32
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	24000078 	.word	0x24000078
 8000b58:	40002000 	.word	0x40002000

08000b5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b60:	4b22      	ldr	r3, [pc, #136]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000b62:	4a23      	ldr	r2, [pc, #140]	@ (8000bf0 <MX_USART3_UART_Init+0x94>)
 8000b64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b66:	4b21      	ldr	r3, [pc, #132]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000b68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b74:	4b1d      	ldr	r3, [pc, #116]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000b82:	220c      	movs	r2, #12
 8000b84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b86:	4b19      	ldr	r3, [pc, #100]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b8c:	4b17      	ldr	r3, [pc, #92]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b92:	4b16      	ldr	r3, [pc, #88]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b98:	4b14      	ldr	r3, [pc, #80]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b9e:	4b13      	ldr	r3, [pc, #76]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ba4:	4811      	ldr	r0, [pc, #68]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000ba6:	f004 faea 	bl	800517e <HAL_UART_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bb0:	f000 f884 	bl	8000cbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	480d      	ldr	r0, [pc, #52]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000bb8:	f005 faf3 	bl	80061a2 <HAL_UARTEx_SetTxFifoThreshold>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000bc2:	f000 f87b 	bl	8000cbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4808      	ldr	r0, [pc, #32]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000bca:	f005 fb28 	bl	800621e <HAL_UARTEx_SetRxFifoThreshold>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bd4:	f000 f872 	bl	8000cbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bd8:	4804      	ldr	r0, [pc, #16]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000bda:	f005 faa9 	bl	8006130 <HAL_UARTEx_DisableFifoMode>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000be4:	f000 f86a 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	240000c4 	.word	0x240000c4
 8000bf0:	40004800 	.word	0x40004800

08000bf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bfa:	4b19      	ldr	r3, [pc, #100]	@ (8000c60 <MX_GPIO_Init+0x6c>)
 8000bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c00:	4a17      	ldr	r2, [pc, #92]	@ (8000c60 <MX_GPIO_Init+0x6c>)
 8000c02:	f043 0320 	orr.w	r3, r3, #32
 8000c06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c0a:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <MX_GPIO_Init+0x6c>)
 8000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c10:	f003 0320 	and.w	r3, r3, #32
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c18:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <MX_GPIO_Init+0x6c>)
 8000c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c1e:	4a10      	ldr	r2, [pc, #64]	@ (8000c60 <MX_GPIO_Init+0x6c>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c28:	4b0d      	ldr	r3, [pc, #52]	@ (8000c60 <MX_GPIO_Init+0x6c>)
 8000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	4b0a      	ldr	r3, [pc, #40]	@ (8000c60 <MX_GPIO_Init+0x6c>)
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c3c:	4a08      	ldr	r2, [pc, #32]	@ (8000c60 <MX_GPIO_Init+0x6c>)
 8000c3e:	f043 0302 	orr.w	r3, r3, #2
 8000c42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c46:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <MX_GPIO_Init+0x6c>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c4c:	f003 0302 	and.w	r3, r3, #2
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c54:	bf00      	nop
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	58024400 	.word	0x58024400

08000c64 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c76:	f000 fb4b 	bl	8001310 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000c86:	231f      	movs	r3, #31
 8000c88:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000c8a:	2387      	movs	r3, #135	@ 0x87
 8000c8c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000c92:	2300      	movs	r3, #0
 8000c94:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c96:	2301      	movs	r3, #1
 8000c98:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 fb69 	bl	8001380 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000cae:	2004      	movs	r0, #4
 8000cb0:	f000 fb46 	bl	8001340 <HAL_MPU_Enable>

}
 8000cb4:	bf00      	nop
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc0:	b672      	cpsid	i
}
 8000cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <Error_Handler+0x8>

08000cc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf8 <HAL_MspInit+0x30>)
 8000cd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cd4:	4a08      	ldr	r2, [pc, #32]	@ (8000cf8 <HAL_MspInit+0x30>)
 8000cd6:	f043 0302 	orr.w	r3, r3, #2
 8000cda:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000cde:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <HAL_MspInit+0x30>)
 8000ce0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ce4:	f003 0302 	and.w	r3, r3, #2
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	58024400 	.word	0x58024400

08000cfc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a16      	ldr	r2, [pc, #88]	@ (8000d64 <HAL_TIM_Base_MspInit+0x68>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d10f      	bne.n	8000d2e <HAL_TIM_Base_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM13_MspInit 0 */

    /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8000d0e:	4b16      	ldr	r3, [pc, #88]	@ (8000d68 <HAL_TIM_Base_MspInit+0x6c>)
 8000d10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d14:	4a14      	ldr	r2, [pc, #80]	@ (8000d68 <HAL_TIM_Base_MspInit+0x6c>)
 8000d16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d1a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d1e:	4b12      	ldr	r3, [pc, #72]	@ (8000d68 <HAL_TIM_Base_MspInit+0x6c>)
 8000d20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000d2c:	e013      	b.n	8000d56 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a0e      	ldr	r2, [pc, #56]	@ (8000d6c <HAL_TIM_Base_MspInit+0x70>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d10e      	bne.n	8000d56 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000d38:	4b0b      	ldr	r3, [pc, #44]	@ (8000d68 <HAL_TIM_Base_MspInit+0x6c>)
 8000d3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d68 <HAL_TIM_Base_MspInit+0x6c>)
 8000d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d44:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d48:	4b07      	ldr	r3, [pc, #28]	@ (8000d68 <HAL_TIM_Base_MspInit+0x6c>)
 8000d4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]
}
 8000d56:	bf00      	nop
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40001c00 	.word	0x40001c00
 8000d68:	58024400 	.word	0x58024400
 8000d6c:	40002000 	.word	0x40002000

08000d70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	@ 0x28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a25      	ldr	r2, [pc, #148]	@ (8000e24 <HAL_TIM_MspPostInit+0xb4>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d11f      	bne.n	8000dd2 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM13_MspPostInit 0 */

    /* USER CODE END TIM13_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	4b25      	ldr	r3, [pc, #148]	@ (8000e28 <HAL_TIM_MspPostInit+0xb8>)
 8000d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d98:	4a23      	ldr	r2, [pc, #140]	@ (8000e28 <HAL_TIM_MspPostInit+0xb8>)
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000da2:	4b21      	ldr	r3, [pc, #132]	@ (8000e28 <HAL_TIM_MspPostInit+0xb8>)
 8000da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	693b      	ldr	r3, [r7, #16]
    /**TIM13 GPIO Configuration
    PA6     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000db0:	2340      	movs	r3, #64	@ 0x40
 8000db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8000dc0:	2309      	movs	r3, #9
 8000dc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4818      	ldr	r0, [pc, #96]	@ (8000e2c <HAL_TIM_MspPostInit+0xbc>)
 8000dcc:	f000 fb18 	bl	8001400 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM14_MspPostInit 1 */

    /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8000dd0:	e024      	b.n	8000e1c <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM14)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a16      	ldr	r2, [pc, #88]	@ (8000e30 <HAL_TIM_MspPostInit+0xc0>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d11f      	bne.n	8000e1c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ddc:	4b12      	ldr	r3, [pc, #72]	@ (8000e28 <HAL_TIM_MspPostInit+0xb8>)
 8000dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de2:	4a11      	ldr	r2, [pc, #68]	@ (8000e28 <HAL_TIM_MspPostInit+0xb8>)
 8000de4:	f043 0320 	orr.w	r3, r3, #32
 8000de8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dec:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <HAL_TIM_MspPostInit+0xb8>)
 8000dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df2:	f003 0320 	and.w	r3, r3, #32
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8000e0c:	2309      	movs	r3, #9
 8000e0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4619      	mov	r1, r3
 8000e16:	4807      	ldr	r0, [pc, #28]	@ (8000e34 <HAL_TIM_MspPostInit+0xc4>)
 8000e18:	f000 faf2 	bl	8001400 <HAL_GPIO_Init>
}
 8000e1c:	bf00      	nop
 8000e1e:	3728      	adds	r7, #40	@ 0x28
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40001c00 	.word	0x40001c00
 8000e28:	58024400 	.word	0x58024400
 8000e2c:	58020000 	.word	0x58020000
 8000e30:	40002000 	.word	0x40002000
 8000e34:	58021400 	.word	0x58021400

08000e38 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b0ba      	sub	sp, #232	@ 0xe8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e50:	f107 0310 	add.w	r3, r7, #16
 8000e54:	22c0      	movs	r2, #192	@ 0xc0
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f005 fa6d 	bl	8006338 <memset>
  if(huart->Instance==USART3)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a27      	ldr	r2, [pc, #156]	@ (8000f00 <HAL_UART_MspInit+0xc8>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d146      	bne.n	8000ef6 <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e68:	f04f 0202 	mov.w	r2, #2
 8000e6c:	f04f 0300 	mov.w	r3, #0
 8000e70:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e74:	2300      	movs	r3, #0
 8000e76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e7a:	f107 0310 	add.w	r3, r7, #16
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f001 fcdc 	bl	800283c <HAL_RCCEx_PeriphCLKConfig>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e8a:	f7ff ff17 	bl	8000cbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	@ (8000f04 <HAL_UART_MspInit+0xcc>)
 8000e90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e94:	4a1b      	ldr	r2, [pc, #108]	@ (8000f04 <HAL_UART_MspInit+0xcc>)
 8000e96:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e9a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e9e:	4b19      	ldr	r3, [pc, #100]	@ (8000f04 <HAL_UART_MspInit+0xcc>)
 8000ea0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ea4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eac:	4b15      	ldr	r3, [pc, #84]	@ (8000f04 <HAL_UART_MspInit+0xcc>)
 8000eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb2:	4a14      	ldr	r2, [pc, #80]	@ (8000f04 <HAL_UART_MspInit+0xcc>)
 8000eb4:	f043 0302 	orr.w	r3, r3, #2
 8000eb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ebc:	4b11      	ldr	r3, [pc, #68]	@ (8000f04 <HAL_UART_MspInit+0xcc>)
 8000ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000eca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ece:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ee4:	2307      	movs	r3, #7
 8000ee6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eea:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4805      	ldr	r0, [pc, #20]	@ (8000f08 <HAL_UART_MspInit+0xd0>)
 8000ef2:	f000 fa85 	bl	8001400 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000ef6:	bf00      	nop
 8000ef8:	37e8      	adds	r7, #232	@ 0xe8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40004800 	.word	0x40004800
 8000f04:	58024400 	.word	0x58024400
 8000f08:	58020400 	.word	0x58020400

08000f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <NMI_Handler+0x4>

08000f14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <HardFault_Handler+0x4>

08000f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <MemManage_Handler+0x4>

08000f24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <BusFault_Handler+0x4>

08000f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <UsageFault_Handler+0x4>

08000f34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f62:	f000 f8a1 	bl	80010a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f6c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000fa8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000f70:	f7ff fbf6 	bl	8000760 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f74:	f7ff fb46 	bl	8000604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f78:	480c      	ldr	r0, [pc, #48]	@ (8000fac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f7a:	490d      	ldr	r1, [pc, #52]	@ (8000fb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f80:	e002      	b.n	8000f88 <LoopCopyDataInit>

08000f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f86:	3304      	adds	r3, #4

08000f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f8c:	d3f9      	bcc.n	8000f82 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f90:	4c0a      	ldr	r4, [pc, #40]	@ (8000fbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f94:	e001      	b.n	8000f9a <LoopFillZerobss>

08000f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f98:	3204      	adds	r2, #4

08000f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f9c:	d3fb      	bcc.n	8000f96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f9e:	f005 f9d3 	bl	8006348 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fa2:	f7ff fc3d 	bl	8000820 <main>
  bx  lr
 8000fa6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fa8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000fac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fb0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000fb4:	080063f0 	.word	0x080063f0
  ldr r2, =_sbss
 8000fb8:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000fbc:	2400015c 	.word	0x2400015c

08000fc0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc0:	e7fe      	b.n	8000fc0 <ADC3_IRQHandler>
	...

08000fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fca:	2003      	movs	r0, #3
 8000fcc:	f000 f96e 	bl	80012ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fd0:	f001 fa5e 	bl	8002490 <HAL_RCC_GetSysClockFreq>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	4b15      	ldr	r3, [pc, #84]	@ (800102c <HAL_Init+0x68>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	0a1b      	lsrs	r3, r3, #8
 8000fdc:	f003 030f 	and.w	r3, r3, #15
 8000fe0:	4913      	ldr	r1, [pc, #76]	@ (8001030 <HAL_Init+0x6c>)
 8000fe2:	5ccb      	ldrb	r3, [r1, r3]
 8000fe4:	f003 031f 	and.w	r3, r3, #31
 8000fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fee:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <HAL_Init+0x68>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	@ (8001030 <HAL_Init+0x6c>)
 8000ff8:	5cd3      	ldrb	r3, [r2, r3]
 8000ffa:	f003 031f 	and.w	r3, r3, #31
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	fa22 f303 	lsr.w	r3, r2, r3
 8001004:	4a0b      	ldr	r2, [pc, #44]	@ (8001034 <HAL_Init+0x70>)
 8001006:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001008:	4a0b      	ldr	r2, [pc, #44]	@ (8001038 <HAL_Init+0x74>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800100e:	200f      	movs	r0, #15
 8001010:	f000 f814 	bl	800103c <HAL_InitTick>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e002      	b.n	8001024 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800101e:	f7ff fe53 	bl	8000cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	58024400 	.word	0x58024400
 8001030:	080063a8 	.word	0x080063a8
 8001034:	24000004 	.word	0x24000004
 8001038:	24000000 	.word	0x24000000

0800103c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001044:	4b15      	ldr	r3, [pc, #84]	@ (800109c <HAL_InitTick+0x60>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d101      	bne.n	8001050 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e021      	b.n	8001094 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001050:	4b13      	ldr	r3, [pc, #76]	@ (80010a0 <HAL_InitTick+0x64>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b11      	ldr	r3, [pc, #68]	@ (800109c <HAL_InitTick+0x60>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4619      	mov	r1, r3
 800105a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800105e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001062:	fbb2 f3f3 	udiv	r3, r2, r3
 8001066:	4618      	mov	r0, r3
 8001068:	f000 f945 	bl	80012f6 <HAL_SYSTICK_Config>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e00e      	b.n	8001094 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2b0f      	cmp	r3, #15
 800107a:	d80a      	bhi.n	8001092 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800107c:	2200      	movs	r2, #0
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	f04f 30ff 	mov.w	r0, #4294967295
 8001084:	f000 f91d 	bl	80012c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001088:	4a06      	ldr	r2, [pc, #24]	@ (80010a4 <HAL_InitTick+0x68>)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800108e:	2300      	movs	r3, #0
 8001090:	e000      	b.n	8001094 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
}
 8001094:	4618      	mov	r0, r3
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	2400000c 	.word	0x2400000c
 80010a0:	24000000 	.word	0x24000000
 80010a4:	24000008 	.word	0x24000008

080010a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <HAL_IncTick+0x20>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <HAL_IncTick+0x24>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4413      	add	r3, r2
 80010b8:	4a04      	ldr	r2, [pc, #16]	@ (80010cc <HAL_IncTick+0x24>)
 80010ba:	6013      	str	r3, [r2, #0]
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	2400000c 	.word	0x2400000c
 80010cc:	24000158 	.word	0x24000158

080010d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return uwTick;
 80010d4:	4b03      	ldr	r3, [pc, #12]	@ (80010e4 <HAL_GetTick+0x14>)
 80010d6:	681b      	ldr	r3, [r3, #0]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	24000158 	.word	0x24000158

080010e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f0:	f7ff ffee 	bl	80010d0 <HAL_GetTick>
 80010f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001100:	d005      	beq.n	800110e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001102:	4b0a      	ldr	r3, [pc, #40]	@ (800112c <HAL_Delay+0x44>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	461a      	mov	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4413      	add	r3, r2
 800110c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800110e:	bf00      	nop
 8001110:	f7ff ffde 	bl	80010d0 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	429a      	cmp	r2, r3
 800111e:	d8f7      	bhi.n	8001110 <HAL_Delay+0x28>
  {
  }
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	2400000c 	.word	0x2400000c

08001130 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001134:	4b03      	ldr	r3, [pc, #12]	@ (8001144 <HAL_GetREVID+0x14>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	0c1b      	lsrs	r3, r3, #16
}
 800113a:	4618      	mov	r0, r3
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	5c001000 	.word	0x5c001000

08001148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001158:	4b0b      	ldr	r3, [pc, #44]	@ (8001188 <__NVIC_SetPriorityGrouping+0x40>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001164:	4013      	ands	r3, r2
 8001166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001170:	4b06      	ldr	r3, [pc, #24]	@ (800118c <__NVIC_SetPriorityGrouping+0x44>)
 8001172:	4313      	orrs	r3, r2
 8001174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001176:	4a04      	ldr	r2, [pc, #16]	@ (8001188 <__NVIC_SetPriorityGrouping+0x40>)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	60d3      	str	r3, [r2, #12]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00
 800118c:	05fa0000 	.word	0x05fa0000

08001190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001194:	4b04      	ldr	r3, [pc, #16]	@ (80011a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	0a1b      	lsrs	r3, r3, #8
 800119a:	f003 0307 	and.w	r3, r3, #7
}
 800119e:	4618      	mov	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	db0a      	blt.n	80011d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	490c      	ldr	r1, [pc, #48]	@ (80011f8 <__NVIC_SetPriority+0x4c>)
 80011c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ca:	0112      	lsls	r2, r2, #4
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	440b      	add	r3, r1
 80011d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d4:	e00a      	b.n	80011ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4908      	ldr	r1, [pc, #32]	@ (80011fc <__NVIC_SetPriority+0x50>)
 80011dc:	88fb      	ldrh	r3, [r7, #6]
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	3b04      	subs	r3, #4
 80011e4:	0112      	lsls	r2, r2, #4
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	440b      	add	r3, r1
 80011ea:	761a      	strb	r2, [r3, #24]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000e100 	.word	0xe000e100
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	@ 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f1c3 0307 	rsb	r3, r3, #7
 800121a:	2b04      	cmp	r3, #4
 800121c:	bf28      	it	cs
 800121e:	2304      	movcs	r3, #4
 8001220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3304      	adds	r3, #4
 8001226:	2b06      	cmp	r3, #6
 8001228:	d902      	bls.n	8001230 <NVIC_EncodePriority+0x30>
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3b03      	subs	r3, #3
 800122e:	e000      	b.n	8001232 <NVIC_EncodePriority+0x32>
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	f04f 32ff 	mov.w	r2, #4294967295
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43da      	mvns	r2, r3
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	401a      	ands	r2, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001248:	f04f 31ff 	mov.w	r1, #4294967295
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	43d9      	mvns	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	4313      	orrs	r3, r2
         );
}
 800125a:	4618      	mov	r0, r3
 800125c:	3724      	adds	r7, #36	@ 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3b01      	subs	r3, #1
 8001274:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001278:	d301      	bcc.n	800127e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127a:	2301      	movs	r3, #1
 800127c:	e00f      	b.n	800129e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800127e:	4a0a      	ldr	r2, [pc, #40]	@ (80012a8 <SysTick_Config+0x40>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3b01      	subs	r3, #1
 8001284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001286:	210f      	movs	r1, #15
 8001288:	f04f 30ff 	mov.w	r0, #4294967295
 800128c:	f7ff ff8e 	bl	80011ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001290:	4b05      	ldr	r3, [pc, #20]	@ (80012a8 <SysTick_Config+0x40>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001296:	4b04      	ldr	r3, [pc, #16]	@ (80012a8 <SysTick_Config+0x40>)
 8001298:	2207      	movs	r2, #7
 800129a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	e000e010 	.word	0xe000e010

080012ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ff47 	bl	8001148 <__NVIC_SetPriorityGrouping>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b086      	sub	sp, #24
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012d0:	f7ff ff5e 	bl	8001190 <__NVIC_GetPriorityGrouping>
 80012d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	68b9      	ldr	r1, [r7, #8]
 80012da:	6978      	ldr	r0, [r7, #20]
 80012dc:	f7ff ff90 	bl	8001200 <NVIC_EncodePriority>
 80012e0:	4602      	mov	r2, r0
 80012e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012e6:	4611      	mov	r1, r2
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff5f 	bl	80011ac <__NVIC_SetPriority>
}
 80012ee:	bf00      	nop
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ffb2 	bl	8001268 <SysTick_Config>
 8001304:	4603      	mov	r3, r0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001314:	f3bf 8f5f 	dmb	sy
}
 8001318:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800131a:	4b07      	ldr	r3, [pc, #28]	@ (8001338 <HAL_MPU_Disable+0x28>)
 800131c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800131e:	4a06      	ldr	r2, [pc, #24]	@ (8001338 <HAL_MPU_Disable+0x28>)
 8001320:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001324:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001326:	4b05      	ldr	r3, [pc, #20]	@ (800133c <HAL_MPU_Disable+0x2c>)
 8001328:	2200      	movs	r2, #0
 800132a:	605a      	str	r2, [r3, #4]
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00
 800133c:	e000ed90 	.word	0xe000ed90

08001340 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001348:	4a0b      	ldr	r2, [pc, #44]	@ (8001378 <HAL_MPU_Enable+0x38>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001352:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <HAL_MPU_Enable+0x3c>)
 8001354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001356:	4a09      	ldr	r2, [pc, #36]	@ (800137c <HAL_MPU_Enable+0x3c>)
 8001358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800135c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800135e:	f3bf 8f4f 	dsb	sy
}
 8001362:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001364:	f3bf 8f6f 	isb	sy
}
 8001368:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000ed90 	.word	0xe000ed90
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	785a      	ldrb	r2, [r3, #1]
 800138c:	4b1b      	ldr	r3, [pc, #108]	@ (80013fc <HAL_MPU_ConfigRegion+0x7c>)
 800138e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001390:	4b1a      	ldr	r3, [pc, #104]	@ (80013fc <HAL_MPU_ConfigRegion+0x7c>)
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	4a19      	ldr	r2, [pc, #100]	@ (80013fc <HAL_MPU_ConfigRegion+0x7c>)
 8001396:	f023 0301 	bic.w	r3, r3, #1
 800139a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800139c:	4a17      	ldr	r2, [pc, #92]	@ (80013fc <HAL_MPU_ConfigRegion+0x7c>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	7b1b      	ldrb	r3, [r3, #12]
 80013a8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	7adb      	ldrb	r3, [r3, #11]
 80013ae:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	7a9b      	ldrb	r3, [r3, #10]
 80013b6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	7b5b      	ldrb	r3, [r3, #13]
 80013be:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	7b9b      	ldrb	r3, [r3, #14]
 80013c6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	7bdb      	ldrb	r3, [r3, #15]
 80013ce:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	7a5b      	ldrb	r3, [r3, #9]
 80013d6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	7a1b      	ldrb	r3, [r3, #8]
 80013de:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013e0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	7812      	ldrb	r2, [r2, #0]
 80013e6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013e8:	4a04      	ldr	r2, [pc, #16]	@ (80013fc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013ea:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013ec:	6113      	str	r3, [r2, #16]
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000ed90 	.word	0xe000ed90

08001400 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001400:	b480      	push	{r7}
 8001402:	b089      	sub	sp, #36	@ 0x24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800140e:	4b89      	ldr	r3, [pc, #548]	@ (8001634 <HAL_GPIO_Init+0x234>)
 8001410:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001412:	e194      	b.n	800173e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	2101      	movs	r1, #1
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	fa01 f303 	lsl.w	r3, r1, r3
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	2b00      	cmp	r3, #0
 8001428:	f000 8186 	beq.w	8001738 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f003 0303 	and.w	r3, r3, #3
 8001434:	2b01      	cmp	r3, #1
 8001436:	d005      	beq.n	8001444 <HAL_GPIO_Init+0x44>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d130      	bne.n	80014a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	2203      	movs	r2, #3
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	68da      	ldr	r2, [r3, #12]
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800147a:	2201      	movs	r2, #1
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	091b      	lsrs	r3, r3, #4
 8001490:	f003 0201 	and.w	r2, r3, #1
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	d017      	beq.n	80014e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	2203      	movs	r2, #3
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4013      	ands	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f003 0303 	and.w	r3, r3, #3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d123      	bne.n	8001536 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	08da      	lsrs	r2, r3, #3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3208      	adds	r2, #8
 80014f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	220f      	movs	r2, #15
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	691a      	ldr	r2, [r3, #16]
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	f003 0307 	and.w	r3, r3, #7
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	08da      	lsrs	r2, r3, #3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3208      	adds	r2, #8
 8001530:	69b9      	ldr	r1, [r7, #24]
 8001532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	2203      	movs	r2, #3
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4013      	ands	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 0203 	and.w	r2, r3, #3
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001572:	2b00      	cmp	r3, #0
 8001574:	f000 80e0 	beq.w	8001738 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001578:	4b2f      	ldr	r3, [pc, #188]	@ (8001638 <HAL_GPIO_Init+0x238>)
 800157a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800157e:	4a2e      	ldr	r2, [pc, #184]	@ (8001638 <HAL_GPIO_Init+0x238>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001588:	4b2b      	ldr	r3, [pc, #172]	@ (8001638 <HAL_GPIO_Init+0x238>)
 800158a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001596:	4a29      	ldr	r2, [pc, #164]	@ (800163c <HAL_GPIO_Init+0x23c>)
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	089b      	lsrs	r3, r3, #2
 800159c:	3302      	adds	r3, #2
 800159e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	220f      	movs	r2, #15
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a20      	ldr	r2, [pc, #128]	@ (8001640 <HAL_GPIO_Init+0x240>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d052      	beq.n	8001668 <HAL_GPIO_Init+0x268>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a1f      	ldr	r2, [pc, #124]	@ (8001644 <HAL_GPIO_Init+0x244>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d031      	beq.n	800162e <HAL_GPIO_Init+0x22e>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a1e      	ldr	r2, [pc, #120]	@ (8001648 <HAL_GPIO_Init+0x248>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d02b      	beq.n	800162a <HAL_GPIO_Init+0x22a>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a1d      	ldr	r2, [pc, #116]	@ (800164c <HAL_GPIO_Init+0x24c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d025      	beq.n	8001626 <HAL_GPIO_Init+0x226>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001650 <HAL_GPIO_Init+0x250>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d01f      	beq.n	8001622 <HAL_GPIO_Init+0x222>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001654 <HAL_GPIO_Init+0x254>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d019      	beq.n	800161e <HAL_GPIO_Init+0x21e>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a1a      	ldr	r2, [pc, #104]	@ (8001658 <HAL_GPIO_Init+0x258>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d013      	beq.n	800161a <HAL_GPIO_Init+0x21a>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a19      	ldr	r2, [pc, #100]	@ (800165c <HAL_GPIO_Init+0x25c>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d00d      	beq.n	8001616 <HAL_GPIO_Init+0x216>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a18      	ldr	r2, [pc, #96]	@ (8001660 <HAL_GPIO_Init+0x260>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d007      	beq.n	8001612 <HAL_GPIO_Init+0x212>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a17      	ldr	r2, [pc, #92]	@ (8001664 <HAL_GPIO_Init+0x264>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d101      	bne.n	800160e <HAL_GPIO_Init+0x20e>
 800160a:	2309      	movs	r3, #9
 800160c:	e02d      	b.n	800166a <HAL_GPIO_Init+0x26a>
 800160e:	230a      	movs	r3, #10
 8001610:	e02b      	b.n	800166a <HAL_GPIO_Init+0x26a>
 8001612:	2308      	movs	r3, #8
 8001614:	e029      	b.n	800166a <HAL_GPIO_Init+0x26a>
 8001616:	2307      	movs	r3, #7
 8001618:	e027      	b.n	800166a <HAL_GPIO_Init+0x26a>
 800161a:	2306      	movs	r3, #6
 800161c:	e025      	b.n	800166a <HAL_GPIO_Init+0x26a>
 800161e:	2305      	movs	r3, #5
 8001620:	e023      	b.n	800166a <HAL_GPIO_Init+0x26a>
 8001622:	2304      	movs	r3, #4
 8001624:	e021      	b.n	800166a <HAL_GPIO_Init+0x26a>
 8001626:	2303      	movs	r3, #3
 8001628:	e01f      	b.n	800166a <HAL_GPIO_Init+0x26a>
 800162a:	2302      	movs	r3, #2
 800162c:	e01d      	b.n	800166a <HAL_GPIO_Init+0x26a>
 800162e:	2301      	movs	r3, #1
 8001630:	e01b      	b.n	800166a <HAL_GPIO_Init+0x26a>
 8001632:	bf00      	nop
 8001634:	58000080 	.word	0x58000080
 8001638:	58024400 	.word	0x58024400
 800163c:	58000400 	.word	0x58000400
 8001640:	58020000 	.word	0x58020000
 8001644:	58020400 	.word	0x58020400
 8001648:	58020800 	.word	0x58020800
 800164c:	58020c00 	.word	0x58020c00
 8001650:	58021000 	.word	0x58021000
 8001654:	58021400 	.word	0x58021400
 8001658:	58021800 	.word	0x58021800
 800165c:	58021c00 	.word	0x58021c00
 8001660:	58022000 	.word	0x58022000
 8001664:	58022400 	.word	0x58022400
 8001668:	2300      	movs	r3, #0
 800166a:	69fa      	ldr	r2, [r7, #28]
 800166c:	f002 0203 	and.w	r2, r2, #3
 8001670:	0092      	lsls	r2, r2, #2
 8001672:	4093      	lsls	r3, r2
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800167a:	4938      	ldr	r1, [pc, #224]	@ (800175c <HAL_GPIO_Init+0x35c>)
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	089b      	lsrs	r3, r3, #2
 8001680:	3302      	adds	r3, #2
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001688:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	43db      	mvns	r3, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4013      	ands	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80016ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80016b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80016dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	3301      	adds	r3, #1
 800173c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	fa22 f303 	lsr.w	r3, r2, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	f47f ae63 	bne.w	8001414 <HAL_GPIO_Init+0x14>
  }
}
 800174e:	bf00      	nop
 8001750:	bf00      	nop
 8001752:	3724      	adds	r7, #36	@ 0x24
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	58000400 	.word	0x58000400

08001760 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001768:	4a08      	ldr	r2, [pc, #32]	@ (800178c <HAL_HSEM_FastTake+0x2c>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	3320      	adds	r3, #32
 800176e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001772:	4a07      	ldr	r2, [pc, #28]	@ (8001790 <HAL_HSEM_FastTake+0x30>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d101      	bne.n	800177c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	e000      	b.n	800177e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
}
 800177e:	4618      	mov	r0, r3
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	58026400 	.word	0x58026400
 8001790:	80000300 	.word	0x80000300

08001794 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800179e:	4906      	ldr	r1, [pc, #24]	@ (80017b8 <HAL_HSEM_Release+0x24>)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	58026400 	.word	0x58026400

080017bc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80017c4:	4b29      	ldr	r3, [pc, #164]	@ (800186c <HAL_PWREx_ConfigSupply+0xb0>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	2b06      	cmp	r3, #6
 80017ce:	d00a      	beq.n	80017e6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80017d0:	4b26      	ldr	r3, [pc, #152]	@ (800186c <HAL_PWREx_ConfigSupply+0xb0>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d001      	beq.n	80017e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e040      	b.n	8001864 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	e03e      	b.n	8001864 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80017e6:	4b21      	ldr	r3, [pc, #132]	@ (800186c <HAL_PWREx_ConfigSupply+0xb0>)
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80017ee:	491f      	ldr	r1, [pc, #124]	@ (800186c <HAL_PWREx_ConfigSupply+0xb0>)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80017f6:	f7ff fc6b 	bl	80010d0 <HAL_GetTick>
 80017fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80017fc:	e009      	b.n	8001812 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80017fe:	f7ff fc67 	bl	80010d0 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800180c:	d901      	bls.n	8001812 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e028      	b.n	8001864 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001812:	4b16      	ldr	r3, [pc, #88]	@ (800186c <HAL_PWREx_ConfigSupply+0xb0>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800181a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800181e:	d1ee      	bne.n	80017fe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b1e      	cmp	r3, #30
 8001824:	d008      	beq.n	8001838 <HAL_PWREx_ConfigSupply+0x7c>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b2e      	cmp	r3, #46	@ 0x2e
 800182a:	d005      	beq.n	8001838 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b1d      	cmp	r3, #29
 8001830:	d002      	beq.n	8001838 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b2d      	cmp	r3, #45	@ 0x2d
 8001836:	d114      	bne.n	8001862 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001838:	f7ff fc4a 	bl	80010d0 <HAL_GetTick>
 800183c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800183e:	e009      	b.n	8001854 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001840:	f7ff fc46 	bl	80010d0 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800184e:	d901      	bls.n	8001854 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e007      	b.n	8001864 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001854:	4b05      	ldr	r3, [pc, #20]	@ (800186c <HAL_PWREx_ConfigSupply+0xb0>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800185c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001860:	d1ee      	bne.n	8001840 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	58024800 	.word	0x58024800

08001870 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08c      	sub	sp, #48	@ 0x30
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d102      	bne.n	8001884 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	f000 bc48 	b.w	8002114 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 8088 	beq.w	80019a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001892:	4b99      	ldr	r3, [pc, #612]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800189a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800189c:	4b96      	ldr	r3, [pc, #600]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 800189e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80018a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018a4:	2b10      	cmp	r3, #16
 80018a6:	d007      	beq.n	80018b8 <HAL_RCC_OscConfig+0x48>
 80018a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018aa:	2b18      	cmp	r3, #24
 80018ac:	d111      	bne.n	80018d2 <HAL_RCC_OscConfig+0x62>
 80018ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d10c      	bne.n	80018d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b8:	4b8f      	ldr	r3, [pc, #572]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d06d      	beq.n	80019a0 <HAL_RCC_OscConfig+0x130>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d169      	bne.n	80019a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	f000 bc21 	b.w	8002114 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018da:	d106      	bne.n	80018ea <HAL_RCC_OscConfig+0x7a>
 80018dc:	4b86      	ldr	r3, [pc, #536]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a85      	ldr	r2, [pc, #532]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 80018e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	e02e      	b.n	8001948 <HAL_RCC_OscConfig+0xd8>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d10c      	bne.n	800190c <HAL_RCC_OscConfig+0x9c>
 80018f2:	4b81      	ldr	r3, [pc, #516]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a80      	ldr	r2, [pc, #512]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 80018f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	4b7e      	ldr	r3, [pc, #504]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a7d      	ldr	r2, [pc, #500]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001904:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	e01d      	b.n	8001948 <HAL_RCC_OscConfig+0xd8>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001914:	d10c      	bne.n	8001930 <HAL_RCC_OscConfig+0xc0>
 8001916:	4b78      	ldr	r3, [pc, #480]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a77      	ldr	r2, [pc, #476]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 800191c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	4b75      	ldr	r3, [pc, #468]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a74      	ldr	r2, [pc, #464]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	e00b      	b.n	8001948 <HAL_RCC_OscConfig+0xd8>
 8001930:	4b71      	ldr	r3, [pc, #452]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a70      	ldr	r2, [pc, #448]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001936:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	4b6e      	ldr	r3, [pc, #440]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a6d      	ldr	r2, [pc, #436]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001942:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d013      	beq.n	8001978 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001950:	f7ff fbbe 	bl	80010d0 <HAL_GetTick>
 8001954:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001958:	f7ff fbba 	bl	80010d0 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b64      	cmp	r3, #100	@ 0x64
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e3d4      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800196a:	4b63      	ldr	r3, [pc, #396]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0xe8>
 8001976:	e014      	b.n	80019a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001978:	f7ff fbaa 	bl	80010d0 <HAL_GetTick>
 800197c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001980:	f7ff fba6 	bl	80010d0 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b64      	cmp	r3, #100	@ 0x64
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e3c0      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001992:	4b59      	ldr	r3, [pc, #356]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0x110>
 800199e:	e000      	b.n	80019a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 80ca 	beq.w	8001b44 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019b0:	4b51      	ldr	r3, [pc, #324]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80019b8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019ba:	4b4f      	ldr	r3, [pc, #316]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 80019bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019be:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80019c0:	6a3b      	ldr	r3, [r7, #32]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d007      	beq.n	80019d6 <HAL_RCC_OscConfig+0x166>
 80019c6:	6a3b      	ldr	r3, [r7, #32]
 80019c8:	2b18      	cmp	r3, #24
 80019ca:	d156      	bne.n	8001a7a <HAL_RCC_OscConfig+0x20a>
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d151      	bne.n	8001a7a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019d6:	4b48      	ldr	r3, [pc, #288]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d005      	beq.n	80019ee <HAL_RCC_OscConfig+0x17e>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e392      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80019ee:	4b42      	ldr	r3, [pc, #264]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f023 0219 	bic.w	r2, r3, #25
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	493f      	ldr	r1, [pc, #252]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a00:	f7ff fb66 	bl	80010d0 <HAL_GetTick>
 8001a04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a08:	f7ff fb62 	bl	80010d0 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e37c      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a1a:	4b37      	ldr	r3, [pc, #220]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f0      	beq.n	8001a08 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a26:	f7ff fb83 	bl	8001130 <HAL_GetREVID>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d817      	bhi.n	8001a64 <HAL_RCC_OscConfig+0x1f4>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	2b40      	cmp	r3, #64	@ 0x40
 8001a3a:	d108      	bne.n	8001a4e <HAL_RCC_OscConfig+0x1de>
 8001a3c:	4b2e      	ldr	r3, [pc, #184]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001a44:	4a2c      	ldr	r2, [pc, #176]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001a46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a4a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a4c:	e07a      	b.n	8001b44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4e:	4b2a      	ldr	r3, [pc, #168]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	031b      	lsls	r3, r3, #12
 8001a5c:	4926      	ldr	r1, [pc, #152]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a62:	e06f      	b.n	8001b44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a64:	4b24      	ldr	r3, [pc, #144]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	061b      	lsls	r3, r3, #24
 8001a72:	4921      	ldr	r1, [pc, #132]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a78:	e064      	b.n	8001b44 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d047      	beq.n	8001b12 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a82:	4b1d      	ldr	r3, [pc, #116]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f023 0219 	bic.w	r2, r3, #25
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	491a      	ldr	r1, [pc, #104]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a94:	f7ff fb1c 	bl	80010d0 <HAL_GetTick>
 8001a98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a9c:	f7ff fb18 	bl	80010d0 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e332      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001aae:	4b12      	ldr	r3, [pc, #72]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aba:	f7ff fb39 	bl	8001130 <HAL_GetREVID>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d819      	bhi.n	8001afc <HAL_RCC_OscConfig+0x28c>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	2b40      	cmp	r3, #64	@ 0x40
 8001ace:	d108      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x272>
 8001ad0:	4b09      	ldr	r3, [pc, #36]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001ad8:	4a07      	ldr	r2, [pc, #28]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001ada:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ade:	6053      	str	r3, [r2, #4]
 8001ae0:	e030      	b.n	8001b44 <HAL_RCC_OscConfig+0x2d4>
 8001ae2:	4b05      	ldr	r3, [pc, #20]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	031b      	lsls	r3, r3, #12
 8001af0:	4901      	ldr	r1, [pc, #4]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	604b      	str	r3, [r1, #4]
 8001af6:	e025      	b.n	8001b44 <HAL_RCC_OscConfig+0x2d4>
 8001af8:	58024400 	.word	0x58024400
 8001afc:	4b9a      	ldr	r3, [pc, #616]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	061b      	lsls	r3, r3, #24
 8001b0a:	4997      	ldr	r1, [pc, #604]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	604b      	str	r3, [r1, #4]
 8001b10:	e018      	b.n	8001b44 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b12:	4b95      	ldr	r3, [pc, #596]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a94      	ldr	r2, [pc, #592]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001b18:	f023 0301 	bic.w	r3, r3, #1
 8001b1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1e:	f7ff fad7 	bl	80010d0 <HAL_GetTick>
 8001b22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b26:	f7ff fad3 	bl	80010d0 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e2ed      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b38:	4b8b      	ldr	r3, [pc, #556]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1f0      	bne.n	8001b26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0310 	and.w	r3, r3, #16
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 80a9 	beq.w	8001ca4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b52:	4b85      	ldr	r3, [pc, #532]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b5a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b5c:	4b82      	ldr	r3, [pc, #520]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b60:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	d007      	beq.n	8001b78 <HAL_RCC_OscConfig+0x308>
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	2b18      	cmp	r3, #24
 8001b6c:	d13a      	bne.n	8001be4 <HAL_RCC_OscConfig+0x374>
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d135      	bne.n	8001be4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b78:	4b7b      	ldr	r3, [pc, #492]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d005      	beq.n	8001b90 <HAL_RCC_OscConfig+0x320>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	2b80      	cmp	r3, #128	@ 0x80
 8001b8a:	d001      	beq.n	8001b90 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e2c1      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b90:	f7ff face 	bl	8001130 <HAL_GetREVID>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d817      	bhi.n	8001bce <HAL_RCC_OscConfig+0x35e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	2b20      	cmp	r3, #32
 8001ba4:	d108      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x348>
 8001ba6:	4b70      	ldr	r3, [pc, #448]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001bae:	4a6e      	ldr	r2, [pc, #440]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001bb0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001bb4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001bb6:	e075      	b.n	8001ca4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bb8:	4b6b      	ldr	r3, [pc, #428]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	069b      	lsls	r3, r3, #26
 8001bc6:	4968      	ldr	r1, [pc, #416]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001bcc:	e06a      	b.n	8001ca4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bce:	4b66      	ldr	r3, [pc, #408]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	061b      	lsls	r3, r3, #24
 8001bdc:	4962      	ldr	r1, [pc, #392]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001be2:	e05f      	b.n	8001ca4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d042      	beq.n	8001c72 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001bec:	4b5e      	ldr	r3, [pc, #376]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a5d      	ldr	r2, [pc, #372]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf8:	f7ff fa6a 	bl	80010d0 <HAL_GetTick>
 8001bfc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001c00:	f7ff fa66 	bl	80010d0 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e280      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c12:	4b55      	ldr	r3, [pc, #340]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f0      	beq.n	8001c00 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c1e:	f7ff fa87 	bl	8001130 <HAL_GetREVID>
 8001c22:	4603      	mov	r3, r0
 8001c24:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d817      	bhi.n	8001c5c <HAL_RCC_OscConfig+0x3ec>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	2b20      	cmp	r3, #32
 8001c32:	d108      	bne.n	8001c46 <HAL_RCC_OscConfig+0x3d6>
 8001c34:	4b4c      	ldr	r3, [pc, #304]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001c3c:	4a4a      	ldr	r2, [pc, #296]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001c3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001c42:	6053      	str	r3, [r2, #4]
 8001c44:	e02e      	b.n	8001ca4 <HAL_RCC_OscConfig+0x434>
 8001c46:	4b48      	ldr	r3, [pc, #288]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	069b      	lsls	r3, r3, #26
 8001c54:	4944      	ldr	r1, [pc, #272]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	604b      	str	r3, [r1, #4]
 8001c5a:	e023      	b.n	8001ca4 <HAL_RCC_OscConfig+0x434>
 8001c5c:	4b42      	ldr	r3, [pc, #264]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	061b      	lsls	r3, r3, #24
 8001c6a:	493f      	ldr	r1, [pc, #252]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	60cb      	str	r3, [r1, #12]
 8001c70:	e018      	b.n	8001ca4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001c72:	4b3d      	ldr	r3, [pc, #244]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a3c      	ldr	r2, [pc, #240]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001c78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7e:	f7ff fa27 	bl	80010d0 <HAL_GetTick>
 8001c82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001c86:	f7ff fa23 	bl	80010d0 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e23d      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c98:	4b33      	ldr	r3, [pc, #204]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1f0      	bne.n	8001c86 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0308 	and.w	r3, r3, #8
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d036      	beq.n	8001d1e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d019      	beq.n	8001cec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001cba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cbc:	4a2a      	ldr	r2, [pc, #168]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc4:	f7ff fa04 	bl	80010d0 <HAL_GetTick>
 8001cc8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ccc:	f7ff fa00 	bl	80010d0 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e21a      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cde:	4b22      	ldr	r3, [pc, #136]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001ce0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f0      	beq.n	8001ccc <HAL_RCC_OscConfig+0x45c>
 8001cea:	e018      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cec:	4b1e      	ldr	r3, [pc, #120]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001cee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cf0:	4a1d      	ldr	r2, [pc, #116]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001cf2:	f023 0301 	bic.w	r3, r3, #1
 8001cf6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf8:	f7ff f9ea 	bl	80010d0 <HAL_GetTick>
 8001cfc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d00:	f7ff f9e6 	bl	80010d0 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e200      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d12:	4b15      	ldr	r3, [pc, #84]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f0      	bne.n	8001d00 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0320 	and.w	r3, r3, #32
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d039      	beq.n	8001d9e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d01c      	beq.n	8001d6c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d32:	4b0d      	ldr	r3, [pc, #52]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a0c      	ldr	r2, [pc, #48]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001d38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d3c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d3e:	f7ff f9c7 	bl	80010d0 <HAL_GetTick>
 8001d42:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d46:	f7ff f9c3 	bl	80010d0 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e1dd      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d58:	4b03      	ldr	r3, [pc, #12]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_OscConfig+0x4d6>
 8001d64:	e01b      	b.n	8001d9e <HAL_RCC_OscConfig+0x52e>
 8001d66:	bf00      	nop
 8001d68:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d6c:	4b9b      	ldr	r3, [pc, #620]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a9a      	ldr	r2, [pc, #616]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001d72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001d76:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d78:	f7ff f9aa 	bl	80010d0 <HAL_GetTick>
 8001d7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d80:	f7ff f9a6 	bl	80010d0 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e1c0      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d92:	4b92      	ldr	r3, [pc, #584]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 8081 	beq.w	8001eae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001dac:	4b8c      	ldr	r3, [pc, #560]	@ (8001fe0 <HAL_RCC_OscConfig+0x770>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a8b      	ldr	r2, [pc, #556]	@ (8001fe0 <HAL_RCC_OscConfig+0x770>)
 8001db2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001db6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001db8:	f7ff f98a 	bl	80010d0 <HAL_GetTick>
 8001dbc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc0:	f7ff f986 	bl	80010d0 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b64      	cmp	r3, #100	@ 0x64
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e1a0      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dd2:	4b83      	ldr	r3, [pc, #524]	@ (8001fe0 <HAL_RCC_OscConfig+0x770>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d106      	bne.n	8001df4 <HAL_RCC_OscConfig+0x584>
 8001de6:	4b7d      	ldr	r3, [pc, #500]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dea:	4a7c      	ldr	r2, [pc, #496]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001df2:	e02d      	b.n	8001e50 <HAL_RCC_OscConfig+0x5e0>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d10c      	bne.n	8001e16 <HAL_RCC_OscConfig+0x5a6>
 8001dfc:	4b77      	ldr	r3, [pc, #476]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e00:	4a76      	ldr	r2, [pc, #472]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001e02:	f023 0301 	bic.w	r3, r3, #1
 8001e06:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e08:	4b74      	ldr	r3, [pc, #464]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e0c:	4a73      	ldr	r2, [pc, #460]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001e0e:	f023 0304 	bic.w	r3, r3, #4
 8001e12:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e14:	e01c      	b.n	8001e50 <HAL_RCC_OscConfig+0x5e0>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b05      	cmp	r3, #5
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x5c8>
 8001e1e:	4b6f      	ldr	r3, [pc, #444]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e22:	4a6e      	ldr	r2, [pc, #440]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001e24:	f043 0304 	orr.w	r3, r3, #4
 8001e28:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e2a:	4b6c      	ldr	r3, [pc, #432]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e2e:	4a6b      	ldr	r2, [pc, #428]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e36:	e00b      	b.n	8001e50 <HAL_RCC_OscConfig+0x5e0>
 8001e38:	4b68      	ldr	r3, [pc, #416]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e3c:	4a67      	ldr	r2, [pc, #412]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001e3e:	f023 0301 	bic.w	r3, r3, #1
 8001e42:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e44:	4b65      	ldr	r3, [pc, #404]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e48:	4a64      	ldr	r2, [pc, #400]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001e4a:	f023 0304 	bic.w	r3, r3, #4
 8001e4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d015      	beq.n	8001e84 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e58:	f7ff f93a 	bl	80010d0 <HAL_GetTick>
 8001e5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e5e:	e00a      	b.n	8001e76 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e60:	f7ff f936 	bl	80010d0 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e14e      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e76:	4b59      	ldr	r3, [pc, #356]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0ee      	beq.n	8001e60 <HAL_RCC_OscConfig+0x5f0>
 8001e82:	e014      	b.n	8001eae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e84:	f7ff f924 	bl	80010d0 <HAL_GetTick>
 8001e88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e8a:	e00a      	b.n	8001ea2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8c:	f7ff f920 	bl	80010d0 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e138      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ea2:	4b4e      	ldr	r3, [pc, #312]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1ee      	bne.n	8001e8c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 812d 	beq.w	8002112 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001eb8:	4b48      	ldr	r3, [pc, #288]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ec0:	2b18      	cmp	r3, #24
 8001ec2:	f000 80bd 	beq.w	8002040 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	f040 809e 	bne.w	800200c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed0:	4b42      	ldr	r3, [pc, #264]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a41      	ldr	r2, [pc, #260]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001ed6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001eda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001edc:	f7ff f8f8 	bl	80010d0 <HAL_GetTick>
 8001ee0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee4:	f7ff f8f4 	bl	80010d0 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e10e      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ef6:	4b39      	ldr	r3, [pc, #228]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f02:	4b36      	ldr	r3, [pc, #216]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001f04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f06:	4b37      	ldr	r3, [pc, #220]	@ (8001fe4 <HAL_RCC_OscConfig+0x774>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001f12:	0112      	lsls	r2, r2, #4
 8001f14:	430a      	orrs	r2, r1
 8001f16:	4931      	ldr	r1, [pc, #196]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	628b      	str	r3, [r1, #40]	@ 0x28
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f20:	3b01      	subs	r3, #1
 8001f22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	025b      	lsls	r3, r3, #9
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	431a      	orrs	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f36:	3b01      	subs	r3, #1
 8001f38:	041b      	lsls	r3, r3, #16
 8001f3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f44:	3b01      	subs	r3, #1
 8001f46:	061b      	lsls	r3, r3, #24
 8001f48:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001f4c:	4923      	ldr	r1, [pc, #140]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001f52:	4b22      	ldr	r3, [pc, #136]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f56:	4a21      	ldr	r2, [pc, #132]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001f58:	f023 0301 	bic.w	r3, r3, #1
 8001f5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001f60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f62:	4b21      	ldr	r3, [pc, #132]	@ (8001fe8 <HAL_RCC_OscConfig+0x778>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f6a:	00d2      	lsls	r2, r2, #3
 8001f6c:	491b      	ldr	r1, [pc, #108]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001f72:	4b1a      	ldr	r3, [pc, #104]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f76:	f023 020c 	bic.w	r2, r3, #12
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7e:	4917      	ldr	r1, [pc, #92]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001f84:	4b15      	ldr	r3, [pc, #84]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f88:	f023 0202 	bic.w	r2, r3, #2
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f90:	4912      	ldr	r1, [pc, #72]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001f96:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f9a:	4a10      	ldr	r2, [pc, #64]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fa0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa6:	4a0d      	ldr	r2, [pc, #52]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001fa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001fae:	4b0b      	ldr	r3, [pc, #44]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001fb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001fba:	4b08      	ldr	r3, [pc, #32]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fbe:	4a07      	ldr	r2, [pc, #28]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fc6:	4b05      	ldr	r3, [pc, #20]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a04      	ldr	r2, [pc, #16]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001fcc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd2:	f7ff f87d 	bl	80010d0 <HAL_GetTick>
 8001fd6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fd8:	e011      	b.n	8001ffe <HAL_RCC_OscConfig+0x78e>
 8001fda:	bf00      	nop
 8001fdc:	58024400 	.word	0x58024400
 8001fe0:	58024800 	.word	0x58024800
 8001fe4:	fffffc0c 	.word	0xfffffc0c
 8001fe8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fec:	f7ff f870 	bl	80010d0 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e08a      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ffe:	4b47      	ldr	r3, [pc, #284]	@ (800211c <HAL_RCC_OscConfig+0x8ac>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0f0      	beq.n	8001fec <HAL_RCC_OscConfig+0x77c>
 800200a:	e082      	b.n	8002112 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200c:	4b43      	ldr	r3, [pc, #268]	@ (800211c <HAL_RCC_OscConfig+0x8ac>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a42      	ldr	r2, [pc, #264]	@ (800211c <HAL_RCC_OscConfig+0x8ac>)
 8002012:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f7ff f85a 	bl	80010d0 <HAL_GetTick>
 800201c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002020:	f7ff f856 	bl	80010d0 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e070      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002032:	4b3a      	ldr	r3, [pc, #232]	@ (800211c <HAL_RCC_OscConfig+0x8ac>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x7b0>
 800203e:	e068      	b.n	8002112 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002040:	4b36      	ldr	r3, [pc, #216]	@ (800211c <HAL_RCC_OscConfig+0x8ac>)
 8002042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002044:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002046:	4b35      	ldr	r3, [pc, #212]	@ (800211c <HAL_RCC_OscConfig+0x8ac>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002050:	2b01      	cmp	r3, #1
 8002052:	d031      	beq.n	80020b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	f003 0203 	and.w	r2, r3, #3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800205e:	429a      	cmp	r2, r3
 8002060:	d12a      	bne.n	80020b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	091b      	lsrs	r3, r3, #4
 8002066:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800206e:	429a      	cmp	r2, r3
 8002070:	d122      	bne.n	80020b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800207e:	429a      	cmp	r2, r3
 8002080:	d11a      	bne.n	80020b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	0a5b      	lsrs	r3, r3, #9
 8002086:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800208e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002090:	429a      	cmp	r2, r3
 8002092:	d111      	bne.n	80020b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	0c1b      	lsrs	r3, r3, #16
 8002098:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d108      	bne.n	80020b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	0e1b      	lsrs	r3, r3, #24
 80020aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d001      	beq.n	80020bc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e02b      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80020bc:	4b17      	ldr	r3, [pc, #92]	@ (800211c <HAL_RCC_OscConfig+0x8ac>)
 80020be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020c0:	08db      	lsrs	r3, r3, #3
 80020c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80020c6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d01f      	beq.n	8002112 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80020d2:	4b12      	ldr	r3, [pc, #72]	@ (800211c <HAL_RCC_OscConfig+0x8ac>)
 80020d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d6:	4a11      	ldr	r2, [pc, #68]	@ (800211c <HAL_RCC_OscConfig+0x8ac>)
 80020d8:	f023 0301 	bic.w	r3, r3, #1
 80020dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020de:	f7fe fff7 	bl	80010d0 <HAL_GetTick>
 80020e2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80020e4:	bf00      	nop
 80020e6:	f7fe fff3 	bl	80010d0 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d0f9      	beq.n	80020e6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80020f2:	4b0a      	ldr	r3, [pc, #40]	@ (800211c <HAL_RCC_OscConfig+0x8ac>)
 80020f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002120 <HAL_RCC_OscConfig+0x8b0>)
 80020f8:	4013      	ands	r3, r2
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80020fe:	00d2      	lsls	r2, r2, #3
 8002100:	4906      	ldr	r1, [pc, #24]	@ (800211c <HAL_RCC_OscConfig+0x8ac>)
 8002102:	4313      	orrs	r3, r2
 8002104:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002106:	4b05      	ldr	r3, [pc, #20]	@ (800211c <HAL_RCC_OscConfig+0x8ac>)
 8002108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800210a:	4a04      	ldr	r2, [pc, #16]	@ (800211c <HAL_RCC_OscConfig+0x8ac>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3730      	adds	r7, #48	@ 0x30
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	58024400 	.word	0x58024400
 8002120:	ffff0007 	.word	0xffff0007

08002124 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e19c      	b.n	8002472 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002138:	4b8a      	ldr	r3, [pc, #552]	@ (8002364 <HAL_RCC_ClockConfig+0x240>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 030f 	and.w	r3, r3, #15
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d910      	bls.n	8002168 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002146:	4b87      	ldr	r3, [pc, #540]	@ (8002364 <HAL_RCC_ClockConfig+0x240>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 020f 	bic.w	r2, r3, #15
 800214e:	4985      	ldr	r1, [pc, #532]	@ (8002364 <HAL_RCC_ClockConfig+0x240>)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002156:	4b83      	ldr	r3, [pc, #524]	@ (8002364 <HAL_RCC_ClockConfig+0x240>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d001      	beq.n	8002168 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e184      	b.n	8002472 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d010      	beq.n	8002196 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	4b7b      	ldr	r3, [pc, #492]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002180:	429a      	cmp	r2, r3
 8002182:	d908      	bls.n	8002196 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002184:	4b78      	ldr	r3, [pc, #480]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	4975      	ldr	r1, [pc, #468]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 8002192:	4313      	orrs	r3, r2
 8002194:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d010      	beq.n	80021c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695a      	ldr	r2, [r3, #20]
 80021a6:	4b70      	ldr	r3, [pc, #448]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d908      	bls.n	80021c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80021b2:	4b6d      	ldr	r3, [pc, #436]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	496a      	ldr	r1, [pc, #424]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d010      	beq.n	80021f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699a      	ldr	r2, [r3, #24]
 80021d4:	4b64      	ldr	r3, [pc, #400]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80021dc:	429a      	cmp	r2, r3
 80021de:	d908      	bls.n	80021f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80021e0:	4b61      	ldr	r3, [pc, #388]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	495e      	ldr	r1, [pc, #376]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0320 	and.w	r3, r3, #32
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d010      	beq.n	8002220 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69da      	ldr	r2, [r3, #28]
 8002202:	4b59      	ldr	r3, [pc, #356]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800220a:	429a      	cmp	r2, r3
 800220c:	d908      	bls.n	8002220 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800220e:	4b56      	ldr	r3, [pc, #344]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	4953      	ldr	r1, [pc, #332]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 800221c:	4313      	orrs	r3, r2
 800221e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d010      	beq.n	800224e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	4b4d      	ldr	r3, [pc, #308]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	f003 030f 	and.w	r3, r3, #15
 8002238:	429a      	cmp	r2, r3
 800223a:	d908      	bls.n	800224e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800223c:	4b4a      	ldr	r3, [pc, #296]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	f023 020f 	bic.w	r2, r3, #15
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	4947      	ldr	r1, [pc, #284]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 800224a:	4313      	orrs	r3, r2
 800224c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d055      	beq.n	8002306 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800225a:	4b43      	ldr	r3, [pc, #268]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	4940      	ldr	r1, [pc, #256]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 8002268:	4313      	orrs	r3, r2
 800226a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b02      	cmp	r3, #2
 8002272:	d107      	bne.n	8002284 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002274:	4b3c      	ldr	r3, [pc, #240]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d121      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0f6      	b.n	8002472 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b03      	cmp	r3, #3
 800228a:	d107      	bne.n	800229c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800228c:	4b36      	ldr	r3, [pc, #216]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d115      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e0ea      	b.n	8002472 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d107      	bne.n	80022b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80022a4:	4b30      	ldr	r3, [pc, #192]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d109      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0de      	b.n	8002472 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022b4:	4b2c      	ldr	r3, [pc, #176]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0d6      	b.n	8002472 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022c4:	4b28      	ldr	r3, [pc, #160]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	f023 0207 	bic.w	r2, r3, #7
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	4925      	ldr	r1, [pc, #148]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022d6:	f7fe fefb 	bl	80010d0 <HAL_GetTick>
 80022da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022dc:	e00a      	b.n	80022f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022de:	f7fe fef7 	bl	80010d0 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e0be      	b.n	8002472 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	429a      	cmp	r2, r3
 8002304:	d1eb      	bne.n	80022de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d010      	beq.n	8002334 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	4b14      	ldr	r3, [pc, #80]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	429a      	cmp	r2, r3
 8002320:	d208      	bcs.n	8002334 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002322:	4b11      	ldr	r3, [pc, #68]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	f023 020f 	bic.w	r2, r3, #15
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	490e      	ldr	r1, [pc, #56]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 8002330:	4313      	orrs	r3, r2
 8002332:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002334:	4b0b      	ldr	r3, [pc, #44]	@ (8002364 <HAL_RCC_ClockConfig+0x240>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 030f 	and.w	r3, r3, #15
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d214      	bcs.n	800236c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002342:	4b08      	ldr	r3, [pc, #32]	@ (8002364 <HAL_RCC_ClockConfig+0x240>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 020f 	bic.w	r2, r3, #15
 800234a:	4906      	ldr	r1, [pc, #24]	@ (8002364 <HAL_RCC_ClockConfig+0x240>)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	4313      	orrs	r3, r2
 8002350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002352:	4b04      	ldr	r3, [pc, #16]	@ (8002364 <HAL_RCC_ClockConfig+0x240>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d005      	beq.n	800236c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e086      	b.n	8002472 <HAL_RCC_ClockConfig+0x34e>
 8002364:	52002000 	.word	0x52002000
 8002368:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b00      	cmp	r3, #0
 8002376:	d010      	beq.n	800239a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691a      	ldr	r2, [r3, #16]
 800237c:	4b3f      	ldr	r3, [pc, #252]	@ (800247c <HAL_RCC_ClockConfig+0x358>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002384:	429a      	cmp	r2, r3
 8002386:	d208      	bcs.n	800239a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002388:	4b3c      	ldr	r3, [pc, #240]	@ (800247c <HAL_RCC_ClockConfig+0x358>)
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	4939      	ldr	r1, [pc, #228]	@ (800247c <HAL_RCC_ClockConfig+0x358>)
 8002396:	4313      	orrs	r3, r2
 8002398:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d010      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695a      	ldr	r2, [r3, #20]
 80023aa:	4b34      	ldr	r3, [pc, #208]	@ (800247c <HAL_RCC_ClockConfig+0x358>)
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d208      	bcs.n	80023c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80023b6:	4b31      	ldr	r3, [pc, #196]	@ (800247c <HAL_RCC_ClockConfig+0x358>)
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	492e      	ldr	r1, [pc, #184]	@ (800247c <HAL_RCC_ClockConfig+0x358>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0310 	and.w	r3, r3, #16
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d010      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	699a      	ldr	r2, [r3, #24]
 80023d8:	4b28      	ldr	r3, [pc, #160]	@ (800247c <HAL_RCC_ClockConfig+0x358>)
 80023da:	69db      	ldr	r3, [r3, #28]
 80023dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d208      	bcs.n	80023f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80023e4:	4b25      	ldr	r3, [pc, #148]	@ (800247c <HAL_RCC_ClockConfig+0x358>)
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	4922      	ldr	r1, [pc, #136]	@ (800247c <HAL_RCC_ClockConfig+0x358>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0320 	and.w	r3, r3, #32
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d010      	beq.n	8002424 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69da      	ldr	r2, [r3, #28]
 8002406:	4b1d      	ldr	r3, [pc, #116]	@ (800247c <HAL_RCC_ClockConfig+0x358>)
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800240e:	429a      	cmp	r2, r3
 8002410:	d208      	bcs.n	8002424 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002412:	4b1a      	ldr	r3, [pc, #104]	@ (800247c <HAL_RCC_ClockConfig+0x358>)
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	4917      	ldr	r1, [pc, #92]	@ (800247c <HAL_RCC_ClockConfig+0x358>)
 8002420:	4313      	orrs	r3, r2
 8002422:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002424:	f000 f834 	bl	8002490 <HAL_RCC_GetSysClockFreq>
 8002428:	4602      	mov	r2, r0
 800242a:	4b14      	ldr	r3, [pc, #80]	@ (800247c <HAL_RCC_ClockConfig+0x358>)
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	0a1b      	lsrs	r3, r3, #8
 8002430:	f003 030f 	and.w	r3, r3, #15
 8002434:	4912      	ldr	r1, [pc, #72]	@ (8002480 <HAL_RCC_ClockConfig+0x35c>)
 8002436:	5ccb      	ldrb	r3, [r1, r3]
 8002438:	f003 031f 	and.w	r3, r3, #31
 800243c:	fa22 f303 	lsr.w	r3, r2, r3
 8002440:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002442:	4b0e      	ldr	r3, [pc, #56]	@ (800247c <HAL_RCC_ClockConfig+0x358>)
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	4a0d      	ldr	r2, [pc, #52]	@ (8002480 <HAL_RCC_ClockConfig+0x35c>)
 800244c:	5cd3      	ldrb	r3, [r2, r3]
 800244e:	f003 031f 	and.w	r3, r3, #31
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	fa22 f303 	lsr.w	r3, r2, r3
 8002458:	4a0a      	ldr	r2, [pc, #40]	@ (8002484 <HAL_RCC_ClockConfig+0x360>)
 800245a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800245c:	4a0a      	ldr	r2, [pc, #40]	@ (8002488 <HAL_RCC_ClockConfig+0x364>)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002462:	4b0a      	ldr	r3, [pc, #40]	@ (800248c <HAL_RCC_ClockConfig+0x368>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f7fe fde8 	bl	800103c <HAL_InitTick>
 800246c:	4603      	mov	r3, r0
 800246e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002470:	7bfb      	ldrb	r3, [r7, #15]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	58024400 	.word	0x58024400
 8002480:	080063a8 	.word	0x080063a8
 8002484:	24000004 	.word	0x24000004
 8002488:	24000000 	.word	0x24000000
 800248c:	24000008 	.word	0x24000008

08002490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002490:	b480      	push	{r7}
 8002492:	b089      	sub	sp, #36	@ 0x24
 8002494:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002496:	4bb3      	ldr	r3, [pc, #716]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800249e:	2b18      	cmp	r3, #24
 80024a0:	f200 8155 	bhi.w	800274e <HAL_RCC_GetSysClockFreq+0x2be>
 80024a4:	a201      	add	r2, pc, #4	@ (adr r2, 80024ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80024a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024aa:	bf00      	nop
 80024ac:	08002511 	.word	0x08002511
 80024b0:	0800274f 	.word	0x0800274f
 80024b4:	0800274f 	.word	0x0800274f
 80024b8:	0800274f 	.word	0x0800274f
 80024bc:	0800274f 	.word	0x0800274f
 80024c0:	0800274f 	.word	0x0800274f
 80024c4:	0800274f 	.word	0x0800274f
 80024c8:	0800274f 	.word	0x0800274f
 80024cc:	08002537 	.word	0x08002537
 80024d0:	0800274f 	.word	0x0800274f
 80024d4:	0800274f 	.word	0x0800274f
 80024d8:	0800274f 	.word	0x0800274f
 80024dc:	0800274f 	.word	0x0800274f
 80024e0:	0800274f 	.word	0x0800274f
 80024e4:	0800274f 	.word	0x0800274f
 80024e8:	0800274f 	.word	0x0800274f
 80024ec:	0800253d 	.word	0x0800253d
 80024f0:	0800274f 	.word	0x0800274f
 80024f4:	0800274f 	.word	0x0800274f
 80024f8:	0800274f 	.word	0x0800274f
 80024fc:	0800274f 	.word	0x0800274f
 8002500:	0800274f 	.word	0x0800274f
 8002504:	0800274f 	.word	0x0800274f
 8002508:	0800274f 	.word	0x0800274f
 800250c:	08002543 	.word	0x08002543
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002510:	4b94      	ldr	r3, [pc, #592]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0320 	and.w	r3, r3, #32
 8002518:	2b00      	cmp	r3, #0
 800251a:	d009      	beq.n	8002530 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800251c:	4b91      	ldr	r3, [pc, #580]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	08db      	lsrs	r3, r3, #3
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	4a90      	ldr	r2, [pc, #576]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002528:	fa22 f303 	lsr.w	r3, r2, r3
 800252c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800252e:	e111      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002530:	4b8d      	ldr	r3, [pc, #564]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002532:	61bb      	str	r3, [r7, #24]
      break;
 8002534:	e10e      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002536:	4b8d      	ldr	r3, [pc, #564]	@ (800276c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002538:	61bb      	str	r3, [r7, #24]
      break;
 800253a:	e10b      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800253c:	4b8c      	ldr	r3, [pc, #560]	@ (8002770 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800253e:	61bb      	str	r3, [r7, #24]
      break;
 8002540:	e108      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002542:	4b88      	ldr	r3, [pc, #544]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800254c:	4b85      	ldr	r3, [pc, #532]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800254e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002556:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002558:	4b82      	ldr	r3, [pc, #520]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800255a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002562:	4b80      	ldr	r3, [pc, #512]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002566:	08db      	lsrs	r3, r3, #3
 8002568:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	fb02 f303 	mul.w	r3, r2, r3
 8002572:	ee07 3a90 	vmov	s15, r3
 8002576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800257a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 80e1 	beq.w	8002748 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2b02      	cmp	r3, #2
 800258a:	f000 8083 	beq.w	8002694 <HAL_RCC_GetSysClockFreq+0x204>
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2b02      	cmp	r3, #2
 8002592:	f200 80a1 	bhi.w	80026d8 <HAL_RCC_GetSysClockFreq+0x248>
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_RCC_GetSysClockFreq+0x114>
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d056      	beq.n	8002650 <HAL_RCC_GetSysClockFreq+0x1c0>
 80025a2:	e099      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025a4:	4b6f      	ldr	r3, [pc, #444]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0320 	and.w	r3, r3, #32
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d02d      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80025b0:	4b6c      	ldr	r3, [pc, #432]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	08db      	lsrs	r3, r3, #3
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	4a6b      	ldr	r2, [pc, #428]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025bc:	fa22 f303 	lsr.w	r3, r2, r3
 80025c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	ee07 3a90 	vmov	s15, r3
 80025c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	ee07 3a90 	vmov	s15, r3
 80025d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025da:	4b62      	ldr	r3, [pc, #392]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025e2:	ee07 3a90 	vmov	s15, r3
 80025e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80025ee:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002774 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002606:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800260a:	e087      	b.n	800271c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	ee07 3a90 	vmov	s15, r3
 8002612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002616:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002778 <HAL_RCC_GetSysClockFreq+0x2e8>
 800261a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800261e:	4b51      	ldr	r3, [pc, #324]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002626:	ee07 3a90 	vmov	s15, r3
 800262a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800262e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002632:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002774 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800263a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800263e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800264a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800264e:	e065      	b.n	800271c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	ee07 3a90 	vmov	s15, r3
 8002656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800265a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800277c <HAL_RCC_GetSysClockFreq+0x2ec>
 800265e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002662:	4b40      	ldr	r3, [pc, #256]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800266a:	ee07 3a90 	vmov	s15, r3
 800266e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002672:	ed97 6a02 	vldr	s12, [r7, #8]
 8002676:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002774 <HAL_RCC_GetSysClockFreq+0x2e4>
 800267a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800267e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002682:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800268a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800268e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002692:	e043      	b.n	800271c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	ee07 3a90 	vmov	s15, r3
 800269a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800269e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002780 <HAL_RCC_GetSysClockFreq+0x2f0>
 80026a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026ae:	ee07 3a90 	vmov	s15, r3
 80026b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80026ba:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002774 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80026d6:	e021      	b.n	800271c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	ee07 3a90 	vmov	s15, r3
 80026de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026e2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800277c <HAL_RCC_GetSysClockFreq+0x2ec>
 80026e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026f2:	ee07 3a90 	vmov	s15, r3
 80026f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80026fe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002774 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800270a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800270e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002716:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800271a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800271c:	4b11      	ldr	r3, [pc, #68]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800271e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002720:	0a5b      	lsrs	r3, r3, #9
 8002722:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002726:	3301      	adds	r3, #1
 8002728:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	ee07 3a90 	vmov	s15, r3
 8002730:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002734:	edd7 6a07 	vldr	s13, [r7, #28]
 8002738:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800273c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002740:	ee17 3a90 	vmov	r3, s15
 8002744:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002746:	e005      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	61bb      	str	r3, [r7, #24]
      break;
 800274c:	e002      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800274e:	4b07      	ldr	r3, [pc, #28]	@ (800276c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002750:	61bb      	str	r3, [r7, #24]
      break;
 8002752:	bf00      	nop
  }

  return sysclockfreq;
 8002754:	69bb      	ldr	r3, [r7, #24]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3724      	adds	r7, #36	@ 0x24
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	58024400 	.word	0x58024400
 8002768:	03d09000 	.word	0x03d09000
 800276c:	003d0900 	.word	0x003d0900
 8002770:	007a1200 	.word	0x007a1200
 8002774:	46000000 	.word	0x46000000
 8002778:	4c742400 	.word	0x4c742400
 800277c:	4a742400 	.word	0x4a742400
 8002780:	4af42400 	.word	0x4af42400

08002784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800278a:	f7ff fe81 	bl	8002490 <HAL_RCC_GetSysClockFreq>
 800278e:	4602      	mov	r2, r0
 8002790:	4b10      	ldr	r3, [pc, #64]	@ (80027d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	0a1b      	lsrs	r3, r3, #8
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	490f      	ldr	r1, [pc, #60]	@ (80027d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800279c:	5ccb      	ldrb	r3, [r1, r3]
 800279e:	f003 031f 	and.w	r3, r3, #31
 80027a2:	fa22 f303 	lsr.w	r3, r2, r3
 80027a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027a8:	4b0a      	ldr	r3, [pc, #40]	@ (80027d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	f003 030f 	and.w	r3, r3, #15
 80027b0:	4a09      	ldr	r2, [pc, #36]	@ (80027d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80027b2:	5cd3      	ldrb	r3, [r2, r3]
 80027b4:	f003 031f 	and.w	r3, r3, #31
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	fa22 f303 	lsr.w	r3, r2, r3
 80027be:	4a07      	ldr	r2, [pc, #28]	@ (80027dc <HAL_RCC_GetHCLKFreq+0x58>)
 80027c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027c2:	4a07      	ldr	r2, [pc, #28]	@ (80027e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80027c8:	4b04      	ldr	r3, [pc, #16]	@ (80027dc <HAL_RCC_GetHCLKFreq+0x58>)
 80027ca:	681b      	ldr	r3, [r3, #0]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	58024400 	.word	0x58024400
 80027d8:	080063a8 	.word	0x080063a8
 80027dc:	24000004 	.word	0x24000004
 80027e0:	24000000 	.word	0x24000000

080027e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80027e8:	f7ff ffcc 	bl	8002784 <HAL_RCC_GetHCLKFreq>
 80027ec:	4602      	mov	r2, r0
 80027ee:	4b06      	ldr	r3, [pc, #24]	@ (8002808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	091b      	lsrs	r3, r3, #4
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	4904      	ldr	r1, [pc, #16]	@ (800280c <HAL_RCC_GetPCLK1Freq+0x28>)
 80027fa:	5ccb      	ldrb	r3, [r1, r3]
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002804:	4618      	mov	r0, r3
 8002806:	bd80      	pop	{r7, pc}
 8002808:	58024400 	.word	0x58024400
 800280c:	080063a8 	.word	0x080063a8

08002810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002814:	f7ff ffb6 	bl	8002784 <HAL_RCC_GetHCLKFreq>
 8002818:	4602      	mov	r2, r0
 800281a:	4b06      	ldr	r3, [pc, #24]	@ (8002834 <HAL_RCC_GetPCLK2Freq+0x24>)
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	0a1b      	lsrs	r3, r3, #8
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	4904      	ldr	r1, [pc, #16]	@ (8002838 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002826:	5ccb      	ldrb	r3, [r1, r3]
 8002828:	f003 031f 	and.w	r3, r3, #31
 800282c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002830:	4618      	mov	r0, r3
 8002832:	bd80      	pop	{r7, pc}
 8002834:	58024400 	.word	0x58024400
 8002838:	080063a8 	.word	0x080063a8

0800283c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800283c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002840:	b0ca      	sub	sp, #296	@ 0x128
 8002842:	af00      	add	r7, sp, #0
 8002844:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002848:	2300      	movs	r3, #0
 800284a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800284e:	2300      	movs	r3, #0
 8002850:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002860:	2500      	movs	r5, #0
 8002862:	ea54 0305 	orrs.w	r3, r4, r5
 8002866:	d049      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800286c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800286e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002872:	d02f      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002874:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002878:	d828      	bhi.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800287a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800287e:	d01a      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002880:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002884:	d822      	bhi.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800288a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800288e:	d007      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002890:	e01c      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002892:	4bb8      	ldr	r3, [pc, #736]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002896:	4ab7      	ldr	r2, [pc, #732]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002898:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800289c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800289e:	e01a      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80028a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028a4:	3308      	adds	r3, #8
 80028a6:	2102      	movs	r1, #2
 80028a8:	4618      	mov	r0, r3
 80028aa:	f001 fc8f 	bl	80041cc <RCCEx_PLL2_Config>
 80028ae:	4603      	mov	r3, r0
 80028b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80028b4:	e00f      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80028b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028ba:	3328      	adds	r3, #40	@ 0x28
 80028bc:	2102      	movs	r1, #2
 80028be:	4618      	mov	r0, r3
 80028c0:	f001 fd36 	bl	8004330 <RCCEx_PLL3_Config>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80028ca:	e004      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80028d2:	e000      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80028d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10a      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80028de:	4ba5      	ldr	r3, [pc, #660]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028e2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80028e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028ec:	4aa1      	ldr	r2, [pc, #644]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028ee:	430b      	orrs	r3, r1
 80028f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80028f2:	e003      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80028fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002904:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002908:	f04f 0900 	mov.w	r9, #0
 800290c:	ea58 0309 	orrs.w	r3, r8, r9
 8002910:	d047      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002918:	2b04      	cmp	r3, #4
 800291a:	d82a      	bhi.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800291c:	a201      	add	r2, pc, #4	@ (adr r2, 8002924 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800291e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002922:	bf00      	nop
 8002924:	08002939 	.word	0x08002939
 8002928:	08002947 	.word	0x08002947
 800292c:	0800295d 	.word	0x0800295d
 8002930:	0800297b 	.word	0x0800297b
 8002934:	0800297b 	.word	0x0800297b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002938:	4b8e      	ldr	r3, [pc, #568]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800293a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293c:	4a8d      	ldr	r2, [pc, #564]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800293e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002942:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002944:	e01a      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800294a:	3308      	adds	r3, #8
 800294c:	2100      	movs	r1, #0
 800294e:	4618      	mov	r0, r3
 8002950:	f001 fc3c 	bl	80041cc <RCCEx_PLL2_Config>
 8002954:	4603      	mov	r3, r0
 8002956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800295a:	e00f      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800295c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002960:	3328      	adds	r3, #40	@ 0x28
 8002962:	2100      	movs	r1, #0
 8002964:	4618      	mov	r0, r3
 8002966:	f001 fce3 	bl	8004330 <RCCEx_PLL3_Config>
 800296a:	4603      	mov	r3, r0
 800296c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002970:	e004      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002978:	e000      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800297a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800297c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10a      	bne.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002984:	4b7b      	ldr	r3, [pc, #492]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002986:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002988:	f023 0107 	bic.w	r1, r3, #7
 800298c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002992:	4a78      	ldr	r2, [pc, #480]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002994:	430b      	orrs	r3, r1
 8002996:	6513      	str	r3, [r2, #80]	@ 0x50
 8002998:	e003      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800299a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800299e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80029a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029aa:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80029ae:	f04f 0b00 	mov.w	fp, #0
 80029b2:	ea5a 030b 	orrs.w	r3, sl, fp
 80029b6:	d04c      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80029b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029c2:	d030      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80029c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029c8:	d829      	bhi.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80029ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80029cc:	d02d      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80029ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80029d0:	d825      	bhi.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80029d2:	2b80      	cmp	r3, #128	@ 0x80
 80029d4:	d018      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80029d6:	2b80      	cmp	r3, #128	@ 0x80
 80029d8:	d821      	bhi.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80029de:	2b40      	cmp	r3, #64	@ 0x40
 80029e0:	d007      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80029e2:	e01c      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029e4:	4b63      	ldr	r3, [pc, #396]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e8:	4a62      	ldr	r2, [pc, #392]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80029f0:	e01c      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029f6:	3308      	adds	r3, #8
 80029f8:	2100      	movs	r1, #0
 80029fa:	4618      	mov	r0, r3
 80029fc:	f001 fbe6 	bl	80041cc <RCCEx_PLL2_Config>
 8002a00:	4603      	mov	r3, r0
 8002a02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002a06:	e011      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a0c:	3328      	adds	r3, #40	@ 0x28
 8002a0e:	2100      	movs	r1, #0
 8002a10:	4618      	mov	r0, r3
 8002a12:	f001 fc8d 	bl	8004330 <RCCEx_PLL3_Config>
 8002a16:	4603      	mov	r3, r0
 8002a18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002a1c:	e006      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a24:	e002      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002a26:	bf00      	nop
 8002a28:	e000      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002a2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10a      	bne.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002a34:	4b4f      	ldr	r3, [pc, #316]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a38:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a42:	4a4c      	ldr	r2, [pc, #304]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a44:	430b      	orrs	r3, r1
 8002a46:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a48:	e003      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002a5e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002a62:	2300      	movs	r3, #0
 8002a64:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002a68:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	d053      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002a7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a7e:	d035      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002a80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a84:	d82e      	bhi.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002a86:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002a8a:	d031      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002a8c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002a90:	d828      	bhi.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002a92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a96:	d01a      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002a98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a9c:	d822      	bhi.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002aa2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002aa6:	d007      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002aa8:	e01c      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aaa:	4b32      	ldr	r3, [pc, #200]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aae:	4a31      	ldr	r2, [pc, #196]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ab0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ab4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ab6:	e01c      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002abc:	3308      	adds	r3, #8
 8002abe:	2100      	movs	r1, #0
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f001 fb83 	bl	80041cc <RCCEx_PLL2_Config>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002acc:	e011      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ad2:	3328      	adds	r3, #40	@ 0x28
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f001 fc2a 	bl	8004330 <RCCEx_PLL3_Config>
 8002adc:	4603      	mov	r3, r0
 8002ade:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ae2:	e006      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002aea:	e002      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002aec:	bf00      	nop
 8002aee:	e000      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002af0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002af2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10b      	bne.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002afa:	4b1e      	ldr	r3, [pc, #120]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002afe:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002b0a:	4a1a      	ldr	r2, [pc, #104]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b0c:	430b      	orrs	r3, r1
 8002b0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b10:	e003      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b22:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002b26:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002b30:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002b34:	460b      	mov	r3, r1
 8002b36:	4313      	orrs	r3, r2
 8002b38:	d056      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002b42:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b46:	d038      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002b48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b4c:	d831      	bhi.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b4e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002b52:	d034      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002b54:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002b58:	d82b      	bhi.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b5e:	d01d      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002b60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b64:	d825      	bhi.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d006      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002b6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b6e:	d00a      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002b70:	e01f      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b72:	bf00      	nop
 8002b74:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b78:	4ba2      	ldr	r3, [pc, #648]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b7c:	4aa1      	ldr	r2, [pc, #644]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b84:	e01c      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b8a:	3308      	adds	r3, #8
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f001 fb1c 	bl	80041cc <RCCEx_PLL2_Config>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002b9a:	e011      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ba0:	3328      	adds	r3, #40	@ 0x28
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f001 fbc3 	bl	8004330 <RCCEx_PLL3_Config>
 8002baa:	4603      	mov	r3, r0
 8002bac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002bb0:	e006      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002bb8:	e002      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002bba:	bf00      	nop
 8002bbc:	e000      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002bbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10b      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002bc8:	4b8e      	ldr	r3, [pc, #568]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bcc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bd4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002bd8:	4a8a      	ldr	r2, [pc, #552]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bda:	430b      	orrs	r3, r1
 8002bdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bde:	e003      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002be4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002bf4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002bfe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002c02:	460b      	mov	r3, r1
 8002c04:	4313      	orrs	r3, r2
 8002c06:	d03a      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c0e:	2b30      	cmp	r3, #48	@ 0x30
 8002c10:	d01f      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002c12:	2b30      	cmp	r3, #48	@ 0x30
 8002c14:	d819      	bhi.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002c16:	2b20      	cmp	r3, #32
 8002c18:	d00c      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002c1a:	2b20      	cmp	r3, #32
 8002c1c:	d815      	bhi.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d019      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002c22:	2b10      	cmp	r3, #16
 8002c24:	d111      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c26:	4b77      	ldr	r3, [pc, #476]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2a:	4a76      	ldr	r2, [pc, #472]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002c32:	e011      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c38:	3308      	adds	r3, #8
 8002c3a:	2102      	movs	r1, #2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f001 fac5 	bl	80041cc <RCCEx_PLL2_Config>
 8002c42:	4603      	mov	r3, r0
 8002c44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002c48:	e006      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c50:	e002      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002c52:	bf00      	nop
 8002c54:	e000      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002c56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10a      	bne.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c60:	4b68      	ldr	r3, [pc, #416]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c64:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c6e:	4a65      	ldr	r2, [pc, #404]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c70:	430b      	orrs	r3, r1
 8002c72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c74:	e003      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c86:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002c8a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002c8e:	2300      	movs	r3, #0
 8002c90:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002c94:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	d051      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ca2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ca4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ca8:	d035      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002caa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cae:	d82e      	bhi.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002cb0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002cb4:	d031      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002cb6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002cba:	d828      	bhi.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002cbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cc0:	d01a      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002cc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cc6:	d822      	bhi.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002ccc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cd0:	d007      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002cd2:	e01c      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cd4:	4b4b      	ldr	r3, [pc, #300]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd8:	4a4a      	ldr	r2, [pc, #296]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002ce0:	e01c      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ce6:	3308      	adds	r3, #8
 8002ce8:	2100      	movs	r1, #0
 8002cea:	4618      	mov	r0, r3
 8002cec:	f001 fa6e 	bl	80041cc <RCCEx_PLL2_Config>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002cf6:	e011      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cfc:	3328      	adds	r3, #40	@ 0x28
 8002cfe:	2100      	movs	r1, #0
 8002d00:	4618      	mov	r0, r3
 8002d02:	f001 fb15 	bl	8004330 <RCCEx_PLL3_Config>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002d0c:	e006      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d14:	e002      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002d16:	bf00      	nop
 8002d18:	e000      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002d1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10a      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002d24:	4b37      	ldr	r3, [pc, #220]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d28:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d32:	4a34      	ldr	r2, [pc, #208]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d34:	430b      	orrs	r3, r1
 8002d36:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d38:	e003      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002d4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002d52:	2300      	movs	r3, #0
 8002d54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002d58:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	d056      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d6c:	d033      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002d6e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d72:	d82c      	bhi.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d78:	d02f      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002d7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d7e:	d826      	bhi.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d80:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d84:	d02b      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002d86:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d8a:	d820      	bhi.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d90:	d012      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002d92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d96:	d81a      	bhi.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d022      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002d9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002da0:	d115      	bne.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002da6:	3308      	adds	r3, #8
 8002da8:	2101      	movs	r1, #1
 8002daa:	4618      	mov	r0, r3
 8002dac:	f001 fa0e 	bl	80041cc <RCCEx_PLL2_Config>
 8002db0:	4603      	mov	r3, r0
 8002db2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002db6:	e015      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dbc:	3328      	adds	r3, #40	@ 0x28
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f001 fab5 	bl	8004330 <RCCEx_PLL3_Config>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002dcc:	e00a      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002dd4:	e006      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002dd6:	bf00      	nop
 8002dd8:	e004      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002dda:	bf00      	nop
 8002ddc:	e002      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002dde:	bf00      	nop
 8002de0:	e000      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002de2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002de4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10d      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002dec:	4b05      	ldr	r3, [pc, #20]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002df0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002df8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002dfa:	4a02      	ldr	r2, [pc, #8]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dfc:	430b      	orrs	r3, r1
 8002dfe:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e00:	e006      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002e02:	bf00      	nop
 8002e04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e18:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002e1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002e20:	2300      	movs	r3, #0
 8002e22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002e26:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	d055      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002e38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e3c:	d033      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002e3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e42:	d82c      	bhi.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e48:	d02f      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e4e:	d826      	bhi.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e50:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002e54:	d02b      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002e56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002e5a:	d820      	bhi.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e60:	d012      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002e62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e66:	d81a      	bhi.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d022      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002e6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e70:	d115      	bne.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e76:	3308      	adds	r3, #8
 8002e78:	2101      	movs	r1, #1
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f001 f9a6 	bl	80041cc <RCCEx_PLL2_Config>
 8002e80:	4603      	mov	r3, r0
 8002e82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002e86:	e015      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e8c:	3328      	adds	r3, #40	@ 0x28
 8002e8e:	2101      	movs	r1, #1
 8002e90:	4618      	mov	r0, r3
 8002e92:	f001 fa4d 	bl	8004330 <RCCEx_PLL3_Config>
 8002e96:	4603      	mov	r3, r0
 8002e98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002e9c:	e00a      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ea4:	e006      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002ea6:	bf00      	nop
 8002ea8:	e004      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002eaa:	bf00      	nop
 8002eac:	e002      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002eae:	bf00      	nop
 8002eb0:	e000      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002eb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10b      	bne.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002ebc:	4ba3      	ldr	r3, [pc, #652]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ec8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002ecc:	4a9f      	ldr	r2, [pc, #636]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ece:	430b      	orrs	r3, r1
 8002ed0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ed2:	e003      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ed4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ed8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002ee8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002eec:	2300      	movs	r3, #0
 8002eee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002ef2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	d037      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f06:	d00e      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002f08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f0c:	d816      	bhi.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d018      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002f12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f16:	d111      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f18:	4b8c      	ldr	r3, [pc, #560]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1c:	4a8b      	ldr	r2, [pc, #556]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002f24:	e00f      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f2a:	3308      	adds	r3, #8
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f001 f94c 	bl	80041cc <RCCEx_PLL2_Config>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002f3a:	e004      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f42:	e000      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002f44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10a      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f4e:	4b7f      	ldr	r3, [pc, #508]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f52:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f5c:	4a7b      	ldr	r2, [pc, #492]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f5e:	430b      	orrs	r3, r1
 8002f60:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f62:	e003      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f74:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002f78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002f82:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	d039      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	d81c      	bhi.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002f96:	a201      	add	r2, pc, #4	@ (adr r2, 8002f9c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9c:	08002fd9 	.word	0x08002fd9
 8002fa0:	08002fad 	.word	0x08002fad
 8002fa4:	08002fbb 	.word	0x08002fbb
 8002fa8:	08002fd9 	.word	0x08002fd9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fac:	4b67      	ldr	r3, [pc, #412]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb0:	4a66      	ldr	r2, [pc, #408]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002fb8:	e00f      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fbe:	3308      	adds	r3, #8
 8002fc0:	2102      	movs	r1, #2
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f001 f902 	bl	80041cc <RCCEx_PLL2_Config>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002fce:	e004      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fd6:	e000      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002fd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10a      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002fe2:	4b5a      	ldr	r3, [pc, #360]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fe6:	f023 0103 	bic.w	r1, r3, #3
 8002fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ff0:	4a56      	ldr	r2, [pc, #344]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ff2:	430b      	orrs	r3, r1
 8002ff4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ff6:	e003      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ffc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003008:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800300c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003010:	2300      	movs	r3, #0
 8003012:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003016:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800301a:	460b      	mov	r3, r1
 800301c:	4313      	orrs	r3, r2
 800301e:	f000 809f 	beq.w	8003160 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003022:	4b4b      	ldr	r3, [pc, #300]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a4a      	ldr	r2, [pc, #296]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003028:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800302c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800302e:	f7fe f84f 	bl	80010d0 <HAL_GetTick>
 8003032:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003036:	e00b      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003038:	f7fe f84a 	bl	80010d0 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b64      	cmp	r3, #100	@ 0x64
 8003046:	d903      	bls.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800304e:	e005      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003050:	4b3f      	ldr	r3, [pc, #252]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0ed      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800305c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003060:	2b00      	cmp	r3, #0
 8003062:	d179      	bne.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003064:	4b39      	ldr	r3, [pc, #228]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003066:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800306c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003070:	4053      	eors	r3, r2
 8003072:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003076:	2b00      	cmp	r3, #0
 8003078:	d015      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800307a:	4b34      	ldr	r3, [pc, #208]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003082:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003086:	4b31      	ldr	r3, [pc, #196]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800308a:	4a30      	ldr	r2, [pc, #192]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800308c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003090:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003092:	4b2e      	ldr	r3, [pc, #184]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003096:	4a2d      	ldr	r2, [pc, #180]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003098:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800309c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800309e:	4a2b      	ldr	r2, [pc, #172]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030a4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80030a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80030ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030b2:	d118      	bne.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b4:	f7fe f80c 	bl	80010d0 <HAL_GetTick>
 80030b8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030bc:	e00d      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030be:	f7fe f807 	bl	80010d0 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80030c8:	1ad2      	subs	r2, r2, r3
 80030ca:	f241 3388 	movw	r3, #5000	@ 0x1388
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d903      	bls.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80030d8:	e005      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030da:	4b1c      	ldr	r3, [pc, #112]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0eb      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80030e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d129      	bne.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80030f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030fe:	d10e      	bne.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003100:	4b12      	ldr	r3, [pc, #72]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800310c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003110:	091a      	lsrs	r2, r3, #4
 8003112:	4b10      	ldr	r3, [pc, #64]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003114:	4013      	ands	r3, r2
 8003116:	4a0d      	ldr	r2, [pc, #52]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003118:	430b      	orrs	r3, r1
 800311a:	6113      	str	r3, [r2, #16]
 800311c:	e005      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800311e:	4b0b      	ldr	r3, [pc, #44]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	4a0a      	ldr	r2, [pc, #40]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003124:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003128:	6113      	str	r3, [r2, #16]
 800312a:	4b08      	ldr	r3, [pc, #32]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800312c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800312e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003132:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003136:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800313a:	4a04      	ldr	r2, [pc, #16]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800313c:	430b      	orrs	r3, r1
 800313e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003140:	e00e      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003142:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003146:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800314a:	e009      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800314c:	58024400 	.word	0x58024400
 8003150:	58024800 	.word	0x58024800
 8003154:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003158:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800315c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003168:	f002 0301 	and.w	r3, r2, #1
 800316c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003170:	2300      	movs	r3, #0
 8003172:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003176:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800317a:	460b      	mov	r3, r1
 800317c:	4313      	orrs	r3, r2
 800317e:	f000 8089 	beq.w	8003294 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003186:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003188:	2b28      	cmp	r3, #40	@ 0x28
 800318a:	d86b      	bhi.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800318c:	a201      	add	r2, pc, #4	@ (adr r2, 8003194 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800318e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003192:	bf00      	nop
 8003194:	0800326d 	.word	0x0800326d
 8003198:	08003265 	.word	0x08003265
 800319c:	08003265 	.word	0x08003265
 80031a0:	08003265 	.word	0x08003265
 80031a4:	08003265 	.word	0x08003265
 80031a8:	08003265 	.word	0x08003265
 80031ac:	08003265 	.word	0x08003265
 80031b0:	08003265 	.word	0x08003265
 80031b4:	08003239 	.word	0x08003239
 80031b8:	08003265 	.word	0x08003265
 80031bc:	08003265 	.word	0x08003265
 80031c0:	08003265 	.word	0x08003265
 80031c4:	08003265 	.word	0x08003265
 80031c8:	08003265 	.word	0x08003265
 80031cc:	08003265 	.word	0x08003265
 80031d0:	08003265 	.word	0x08003265
 80031d4:	0800324f 	.word	0x0800324f
 80031d8:	08003265 	.word	0x08003265
 80031dc:	08003265 	.word	0x08003265
 80031e0:	08003265 	.word	0x08003265
 80031e4:	08003265 	.word	0x08003265
 80031e8:	08003265 	.word	0x08003265
 80031ec:	08003265 	.word	0x08003265
 80031f0:	08003265 	.word	0x08003265
 80031f4:	0800326d 	.word	0x0800326d
 80031f8:	08003265 	.word	0x08003265
 80031fc:	08003265 	.word	0x08003265
 8003200:	08003265 	.word	0x08003265
 8003204:	08003265 	.word	0x08003265
 8003208:	08003265 	.word	0x08003265
 800320c:	08003265 	.word	0x08003265
 8003210:	08003265 	.word	0x08003265
 8003214:	0800326d 	.word	0x0800326d
 8003218:	08003265 	.word	0x08003265
 800321c:	08003265 	.word	0x08003265
 8003220:	08003265 	.word	0x08003265
 8003224:	08003265 	.word	0x08003265
 8003228:	08003265 	.word	0x08003265
 800322c:	08003265 	.word	0x08003265
 8003230:	08003265 	.word	0x08003265
 8003234:	0800326d 	.word	0x0800326d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800323c:	3308      	adds	r3, #8
 800323e:	2101      	movs	r1, #1
 8003240:	4618      	mov	r0, r3
 8003242:	f000 ffc3 	bl	80041cc <RCCEx_PLL2_Config>
 8003246:	4603      	mov	r3, r0
 8003248:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800324c:	e00f      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800324e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003252:	3328      	adds	r3, #40	@ 0x28
 8003254:	2101      	movs	r1, #1
 8003256:	4618      	mov	r0, r3
 8003258:	f001 f86a 	bl	8004330 <RCCEx_PLL3_Config>
 800325c:	4603      	mov	r3, r0
 800325e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003262:	e004      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800326a:	e000      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800326c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800326e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10a      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003276:	4bbf      	ldr	r3, [pc, #764]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800327a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800327e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003282:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003284:	4abb      	ldr	r2, [pc, #748]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003286:	430b      	orrs	r3, r1
 8003288:	6553      	str	r3, [r2, #84]	@ 0x54
 800328a:	e003      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800328c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003290:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329c:	f002 0302 	and.w	r3, r2, #2
 80032a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80032a4:	2300      	movs	r3, #0
 80032a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80032aa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80032ae:	460b      	mov	r3, r1
 80032b0:	4313      	orrs	r3, r2
 80032b2:	d041      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80032b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032ba:	2b05      	cmp	r3, #5
 80032bc:	d824      	bhi.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80032be:	a201      	add	r2, pc, #4	@ (adr r2, 80032c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80032c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c4:	08003311 	.word	0x08003311
 80032c8:	080032dd 	.word	0x080032dd
 80032cc:	080032f3 	.word	0x080032f3
 80032d0:	08003311 	.word	0x08003311
 80032d4:	08003311 	.word	0x08003311
 80032d8:	08003311 	.word	0x08003311
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e0:	3308      	adds	r3, #8
 80032e2:	2101      	movs	r1, #1
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 ff71 	bl	80041cc <RCCEx_PLL2_Config>
 80032ea:	4603      	mov	r3, r0
 80032ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80032f0:	e00f      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032f6:	3328      	adds	r3, #40	@ 0x28
 80032f8:	2101      	movs	r1, #1
 80032fa:	4618      	mov	r0, r3
 80032fc:	f001 f818 	bl	8004330 <RCCEx_PLL3_Config>
 8003300:	4603      	mov	r3, r0
 8003302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003306:	e004      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800330e:	e000      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003310:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003312:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10a      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800331a:	4b96      	ldr	r3, [pc, #600]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800331c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800331e:	f023 0107 	bic.w	r1, r3, #7
 8003322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003326:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003328:	4a92      	ldr	r2, [pc, #584]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800332a:	430b      	orrs	r3, r1
 800332c:	6553      	str	r3, [r2, #84]	@ 0x54
 800332e:	e003      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003330:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003334:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800333c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003340:	f002 0304 	and.w	r3, r2, #4
 8003344:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003348:	2300      	movs	r3, #0
 800334a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800334e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003352:	460b      	mov	r3, r1
 8003354:	4313      	orrs	r3, r2
 8003356:	d044      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800335c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003360:	2b05      	cmp	r3, #5
 8003362:	d825      	bhi.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003364:	a201      	add	r2, pc, #4	@ (adr r2, 800336c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336a:	bf00      	nop
 800336c:	080033b9 	.word	0x080033b9
 8003370:	08003385 	.word	0x08003385
 8003374:	0800339b 	.word	0x0800339b
 8003378:	080033b9 	.word	0x080033b9
 800337c:	080033b9 	.word	0x080033b9
 8003380:	080033b9 	.word	0x080033b9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003388:	3308      	adds	r3, #8
 800338a:	2101      	movs	r1, #1
 800338c:	4618      	mov	r0, r3
 800338e:	f000 ff1d 	bl	80041cc <RCCEx_PLL2_Config>
 8003392:	4603      	mov	r3, r0
 8003394:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003398:	e00f      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800339a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800339e:	3328      	adds	r3, #40	@ 0x28
 80033a0:	2101      	movs	r1, #1
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 ffc4 	bl	8004330 <RCCEx_PLL3_Config>
 80033a8:	4603      	mov	r3, r0
 80033aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80033ae:	e004      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033b6:	e000      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80033b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10b      	bne.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033c2:	4b6c      	ldr	r3, [pc, #432]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c6:	f023 0107 	bic.w	r1, r3, #7
 80033ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033d2:	4a68      	ldr	r2, [pc, #416]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033d4:	430b      	orrs	r3, r1
 80033d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80033d8:	e003      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ea:	f002 0320 	and.w	r3, r2, #32
 80033ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80033f2:	2300      	movs	r3, #0
 80033f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80033f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80033fc:	460b      	mov	r3, r1
 80033fe:	4313      	orrs	r3, r2
 8003400:	d055      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800340a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800340e:	d033      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003410:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003414:	d82c      	bhi.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003416:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800341a:	d02f      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800341c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003420:	d826      	bhi.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003422:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003426:	d02b      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003428:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800342c:	d820      	bhi.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800342e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003432:	d012      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003434:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003438:	d81a      	bhi.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800343a:	2b00      	cmp	r3, #0
 800343c:	d022      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800343e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003442:	d115      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003448:	3308      	adds	r3, #8
 800344a:	2100      	movs	r1, #0
 800344c:	4618      	mov	r0, r3
 800344e:	f000 febd 	bl	80041cc <RCCEx_PLL2_Config>
 8003452:	4603      	mov	r3, r0
 8003454:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003458:	e015      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800345a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800345e:	3328      	adds	r3, #40	@ 0x28
 8003460:	2102      	movs	r1, #2
 8003462:	4618      	mov	r0, r3
 8003464:	f000 ff64 	bl	8004330 <RCCEx_PLL3_Config>
 8003468:	4603      	mov	r3, r0
 800346a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800346e:	e00a      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003476:	e006      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003478:	bf00      	nop
 800347a:	e004      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800347c:	bf00      	nop
 800347e:	e002      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003480:	bf00      	nop
 8003482:	e000      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003484:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003486:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10b      	bne.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800348e:	4b39      	ldr	r3, [pc, #228]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003492:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800349e:	4a35      	ldr	r2, [pc, #212]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034a0:	430b      	orrs	r3, r1
 80034a2:	6553      	str	r3, [r2, #84]	@ 0x54
 80034a4:	e003      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80034ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80034ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80034be:	2300      	movs	r3, #0
 80034c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80034c4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4313      	orrs	r3, r2
 80034cc:	d058      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80034ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034d6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80034da:	d033      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80034dc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80034e0:	d82c      	bhi.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80034e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034e6:	d02f      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80034e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034ec:	d826      	bhi.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80034ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80034f2:	d02b      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80034f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80034f8:	d820      	bhi.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80034fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034fe:	d012      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003500:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003504:	d81a      	bhi.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003506:	2b00      	cmp	r3, #0
 8003508:	d022      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800350a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800350e:	d115      	bne.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003514:	3308      	adds	r3, #8
 8003516:	2100      	movs	r1, #0
 8003518:	4618      	mov	r0, r3
 800351a:	f000 fe57 	bl	80041cc <RCCEx_PLL2_Config>
 800351e:	4603      	mov	r3, r0
 8003520:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003524:	e015      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800352a:	3328      	adds	r3, #40	@ 0x28
 800352c:	2102      	movs	r1, #2
 800352e:	4618      	mov	r0, r3
 8003530:	f000 fefe 	bl	8004330 <RCCEx_PLL3_Config>
 8003534:	4603      	mov	r3, r0
 8003536:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800353a:	e00a      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003542:	e006      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003544:	bf00      	nop
 8003546:	e004      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003548:	bf00      	nop
 800354a:	e002      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800354c:	bf00      	nop
 800354e:	e000      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003550:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003552:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10e      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800355a:	4b06      	ldr	r3, [pc, #24]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800355c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800355e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003566:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800356a:	4a02      	ldr	r2, [pc, #8]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800356c:	430b      	orrs	r3, r1
 800356e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003570:	e006      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003572:	bf00      	nop
 8003574:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003578:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800357c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003588:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800358c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003590:	2300      	movs	r3, #0
 8003592:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003596:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800359a:	460b      	mov	r3, r1
 800359c:	4313      	orrs	r3, r2
 800359e:	d055      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80035a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80035a8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80035ac:	d033      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80035ae:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80035b2:	d82c      	bhi.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80035b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035b8:	d02f      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80035ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035be:	d826      	bhi.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80035c0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80035c4:	d02b      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80035c6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80035ca:	d820      	bhi.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80035cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035d0:	d012      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80035d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035d6:	d81a      	bhi.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d022      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80035dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035e0:	d115      	bne.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e6:	3308      	adds	r3, #8
 80035e8:	2100      	movs	r1, #0
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 fdee 	bl	80041cc <RCCEx_PLL2_Config>
 80035f0:	4603      	mov	r3, r0
 80035f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80035f6:	e015      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035fc:	3328      	adds	r3, #40	@ 0x28
 80035fe:	2102      	movs	r1, #2
 8003600:	4618      	mov	r0, r3
 8003602:	f000 fe95 	bl	8004330 <RCCEx_PLL3_Config>
 8003606:	4603      	mov	r3, r0
 8003608:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800360c:	e00a      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003614:	e006      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003616:	bf00      	nop
 8003618:	e004      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800361a:	bf00      	nop
 800361c:	e002      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800361e:	bf00      	nop
 8003620:	e000      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003622:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003624:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10b      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800362c:	4ba1      	ldr	r3, [pc, #644]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800362e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003630:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003638:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800363c:	4a9d      	ldr	r2, [pc, #628]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800363e:	430b      	orrs	r3, r1
 8003640:	6593      	str	r3, [r2, #88]	@ 0x58
 8003642:	e003      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003644:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003648:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800364c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003654:	f002 0308 	and.w	r3, r2, #8
 8003658:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800365c:	2300      	movs	r3, #0
 800365e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003662:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003666:	460b      	mov	r3, r1
 8003668:	4313      	orrs	r3, r2
 800366a:	d01e      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800366c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003670:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003674:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003678:	d10c      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800367a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367e:	3328      	adds	r3, #40	@ 0x28
 8003680:	2102      	movs	r1, #2
 8003682:	4618      	mov	r0, r3
 8003684:	f000 fe54 	bl	8004330 <RCCEx_PLL3_Config>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003694:	4b87      	ldr	r3, [pc, #540]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003698:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800369c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036a4:	4a83      	ldr	r2, [pc, #524]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036a6:	430b      	orrs	r3, r1
 80036a8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b2:	f002 0310 	and.w	r3, r2, #16
 80036b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80036ba:	2300      	movs	r3, #0
 80036bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80036c0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80036c4:	460b      	mov	r3, r1
 80036c6:	4313      	orrs	r3, r2
 80036c8:	d01e      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80036ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036d6:	d10c      	bne.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80036d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036dc:	3328      	adds	r3, #40	@ 0x28
 80036de:	2102      	movs	r1, #2
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 fe25 	bl	8004330 <RCCEx_PLL3_Config>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d002      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036f2:	4b70      	ldr	r3, [pc, #448]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80036fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003702:	4a6c      	ldr	r2, [pc, #432]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003704:	430b      	orrs	r3, r1
 8003706:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800370c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003710:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003714:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003718:	2300      	movs	r3, #0
 800371a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800371e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003722:	460b      	mov	r3, r1
 8003724:	4313      	orrs	r3, r2
 8003726:	d03e      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800372c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003730:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003734:	d022      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003736:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800373a:	d81b      	bhi.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800373c:	2b00      	cmp	r3, #0
 800373e:	d003      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003740:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003744:	d00b      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003746:	e015      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800374c:	3308      	adds	r3, #8
 800374e:	2100      	movs	r1, #0
 8003750:	4618      	mov	r0, r3
 8003752:	f000 fd3b 	bl	80041cc <RCCEx_PLL2_Config>
 8003756:	4603      	mov	r3, r0
 8003758:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800375c:	e00f      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800375e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003762:	3328      	adds	r3, #40	@ 0x28
 8003764:	2102      	movs	r1, #2
 8003766:	4618      	mov	r0, r3
 8003768:	f000 fde2 	bl	8004330 <RCCEx_PLL3_Config>
 800376c:	4603      	mov	r3, r0
 800376e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003772:	e004      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800377a:	e000      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800377c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800377e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10b      	bne.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003786:	4b4b      	ldr	r3, [pc, #300]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800378a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800378e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003792:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003796:	4a47      	ldr	r2, [pc, #284]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003798:	430b      	orrs	r3, r1
 800379a:	6593      	str	r3, [r2, #88]	@ 0x58
 800379c:	e003      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800379e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ae:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80037b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80037b4:	2300      	movs	r3, #0
 80037b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80037b8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80037bc:	460b      	mov	r3, r1
 80037be:	4313      	orrs	r3, r2
 80037c0:	d03b      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80037c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037ce:	d01f      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80037d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037d4:	d818      	bhi.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80037d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037da:	d003      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80037dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037e0:	d007      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80037e2:	e011      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037e4:	4b33      	ldr	r3, [pc, #204]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e8:	4a32      	ldr	r2, [pc, #200]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80037f0:	e00f      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f6:	3328      	adds	r3, #40	@ 0x28
 80037f8:	2101      	movs	r1, #1
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 fd98 	bl	8004330 <RCCEx_PLL3_Config>
 8003800:	4603      	mov	r3, r0
 8003802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003806:	e004      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800380e:	e000      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003812:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10b      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800381a:	4b26      	ldr	r3, [pc, #152]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800381c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800381e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800382a:	4a22      	ldr	r2, [pc, #136]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800382c:	430b      	orrs	r3, r1
 800382e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003830:	e003      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003836:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800383a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800383e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003842:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003846:	673b      	str	r3, [r7, #112]	@ 0x70
 8003848:	2300      	movs	r3, #0
 800384a:	677b      	str	r3, [r7, #116]	@ 0x74
 800384c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003850:	460b      	mov	r3, r1
 8003852:	4313      	orrs	r3, r2
 8003854:	d034      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003860:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003864:	d007      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003866:	e011      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003868:	4b12      	ldr	r3, [pc, #72]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800386a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386c:	4a11      	ldr	r2, [pc, #68]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800386e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003872:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003874:	e00e      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800387a:	3308      	adds	r3, #8
 800387c:	2102      	movs	r1, #2
 800387e:	4618      	mov	r0, r3
 8003880:	f000 fca4 	bl	80041cc <RCCEx_PLL2_Config>
 8003884:	4603      	mov	r3, r0
 8003886:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800388a:	e003      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003894:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10d      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800389c:	4b05      	ldr	r3, [pc, #20]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800389e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038a0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80038a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038aa:	4a02      	ldr	r2, [pc, #8]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038ac:	430b      	orrs	r3, r1
 80038ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038b0:	e006      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80038b2:	bf00      	nop
 80038b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80038cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038ce:	2300      	movs	r3, #0
 80038d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80038d2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80038d6:	460b      	mov	r3, r1
 80038d8:	4313      	orrs	r3, r2
 80038da:	d00c      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80038dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e0:	3328      	adds	r3, #40	@ 0x28
 80038e2:	2102      	movs	r1, #2
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 fd23 	bl	8004330 <RCCEx_PLL3_Config>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80038f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003902:	663b      	str	r3, [r7, #96]	@ 0x60
 8003904:	2300      	movs	r3, #0
 8003906:	667b      	str	r3, [r7, #100]	@ 0x64
 8003908:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800390c:	460b      	mov	r3, r1
 800390e:	4313      	orrs	r3, r2
 8003910:	d038      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003916:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800391a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800391e:	d018      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003920:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003924:	d811      	bhi.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003926:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800392a:	d014      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800392c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003930:	d80b      	bhi.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003932:	2b00      	cmp	r3, #0
 8003934:	d011      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003936:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800393a:	d106      	bne.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800393c:	4bc3      	ldr	r3, [pc, #780]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800393e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003940:	4ac2      	ldr	r2, [pc, #776]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003942:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003946:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003948:	e008      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003950:	e004      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003952:	bf00      	nop
 8003954:	e002      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003956:	bf00      	nop
 8003958:	e000      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800395a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800395c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10b      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003964:	4bb9      	ldr	r3, [pc, #740]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003968:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800396c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003970:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003974:	4ab5      	ldr	r2, [pc, #724]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003976:	430b      	orrs	r3, r1
 8003978:	6553      	str	r3, [r2, #84]	@ 0x54
 800397a:	e003      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800397c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003980:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003990:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003992:	2300      	movs	r3, #0
 8003994:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003996:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800399a:	460b      	mov	r3, r1
 800399c:	4313      	orrs	r3, r2
 800399e:	d009      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039a0:	4baa      	ldr	r3, [pc, #680]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039a4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80039a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039ae:	4aa7      	ldr	r2, [pc, #668]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039b0:	430b      	orrs	r3, r1
 80039b2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80039b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039bc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80039c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80039c2:	2300      	movs	r3, #0
 80039c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80039c6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80039ca:	460b      	mov	r3, r1
 80039cc:	4313      	orrs	r3, r2
 80039ce:	d00a      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80039d0:	4b9e      	ldr	r3, [pc, #632]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80039d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80039e0:	4a9a      	ldr	r2, [pc, #616]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039e2:	430b      	orrs	r3, r1
 80039e4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ee:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80039f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039f4:	2300      	movs	r3, #0
 80039f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039f8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80039fc:	460b      	mov	r3, r1
 80039fe:	4313      	orrs	r3, r2
 8003a00:	d009      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a02:	4b92      	ldr	r3, [pc, #584]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a06:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a10:	4a8e      	ldr	r2, [pc, #568]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a12:	430b      	orrs	r3, r1
 8003a14:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003a22:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a24:	2300      	movs	r3, #0
 8003a26:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a28:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	d00e      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a32:	4b86      	ldr	r3, [pc, #536]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	4a85      	ldr	r2, [pc, #532]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a38:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003a3c:	6113      	str	r3, [r2, #16]
 8003a3e:	4b83      	ldr	r3, [pc, #524]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a40:	6919      	ldr	r1, [r3, #16]
 8003a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a46:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003a4a:	4a80      	ldr	r2, [pc, #512]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a58:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a5e:	2300      	movs	r3, #0
 8003a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a62:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003a66:	460b      	mov	r3, r1
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	d009      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003a6c:	4b77      	ldr	r3, [pc, #476]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a70:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a7a:	4a74      	ldr	r2, [pc, #464]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a7c:	430b      	orrs	r3, r1
 8003a7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a88:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003a8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a8e:	2300      	movs	r3, #0
 8003a90:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a92:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003a96:	460b      	mov	r3, r1
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	d00a      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a9c:	4b6b      	ldr	r3, [pc, #428]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aa0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003aac:	4a67      	ldr	r2, [pc, #412]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003aae:	430b      	orrs	r3, r1
 8003ab0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aba:	2100      	movs	r1, #0
 8003abc:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ac4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003ac8:	460b      	mov	r3, r1
 8003aca:	4313      	orrs	r3, r2
 8003acc:	d011      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad2:	3308      	adds	r3, #8
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 fb78 	bl	80041cc <RCCEx_PLL2_Config>
 8003adc:	4603      	mov	r3, r0
 8003ade:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afa:	2100      	movs	r1, #0
 8003afc:	6239      	str	r1, [r7, #32]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b04:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	d011      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b12:	3308      	adds	r3, #8
 8003b14:	2101      	movs	r1, #1
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 fb58 	bl	80041cc <RCCEx_PLL2_Config>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003b22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	61b9      	str	r1, [r7, #24]
 8003b3e:	f003 0304 	and.w	r3, r3, #4
 8003b42:	61fb      	str	r3, [r7, #28]
 8003b44:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	d011      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b52:	3308      	adds	r3, #8
 8003b54:	2102      	movs	r1, #2
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 fb38 	bl	80041cc <RCCEx_PLL2_Config>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003b62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	6139      	str	r1, [r7, #16]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	d011      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b92:	3328      	adds	r3, #40	@ 0x28
 8003b94:	2100      	movs	r1, #0
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 fbca 	bl	8004330 <RCCEx_PLL3_Config>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003baa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bba:	2100      	movs	r1, #0
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	f003 0310 	and.w	r3, r3, #16
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	d011      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd2:	3328      	adds	r3, #40	@ 0x28
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 fbaa 	bl	8004330 <RCCEx_PLL3_Config>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003be2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	6039      	str	r1, [r7, #0]
 8003bfe:	f003 0320 	and.w	r3, r3, #32
 8003c02:	607b      	str	r3, [r7, #4]
 8003c04:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	d011      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c12:	3328      	adds	r3, #40	@ 0x28
 8003c14:	2102      	movs	r1, #2
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 fb8a 	bl	8004330 <RCCEx_PLL3_Config>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003c22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003c32:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	e000      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003c46:	46bd      	mov	sp, r7
 8003c48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c4c:	58024400 	.word	0x58024400

08003c50 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003c54:	f7fe fd96 	bl	8002784 <HAL_RCC_GetHCLKFreq>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	4b06      	ldr	r3, [pc, #24]	@ (8003c74 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	091b      	lsrs	r3, r3, #4
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	4904      	ldr	r1, [pc, #16]	@ (8003c78 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003c66:	5ccb      	ldrb	r3, [r1, r3]
 8003c68:	f003 031f 	and.w	r3, r3, #31
 8003c6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	58024400 	.word	0x58024400
 8003c78:	080063a8 	.word	0x080063a8

08003c7c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b089      	sub	sp, #36	@ 0x24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c84:	4ba1      	ldr	r3, [pc, #644]	@ (8003f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c88:	f003 0303 	and.w	r3, r3, #3
 8003c8c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003c8e:	4b9f      	ldr	r3, [pc, #636]	@ (8003f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c92:	0b1b      	lsrs	r3, r3, #12
 8003c94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c98:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003c9a:	4b9c      	ldr	r3, [pc, #624]	@ (8003f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9e:	091b      	lsrs	r3, r3, #4
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003ca6:	4b99      	ldr	r3, [pc, #612]	@ (8003f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003caa:	08db      	lsrs	r3, r3, #3
 8003cac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	fb02 f303 	mul.w	r3, r2, r3
 8003cb6:	ee07 3a90 	vmov	s15, r3
 8003cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cbe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 8111 	beq.w	8003eec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	f000 8083 	beq.w	8003dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	f200 80a1 	bhi.w	8003e1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d003      	beq.n	8003ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d056      	beq.n	8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003ce6:	e099      	b.n	8003e1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ce8:	4b88      	ldr	r3, [pc, #544]	@ (8003f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0320 	and.w	r3, r3, #32
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d02d      	beq.n	8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003cf4:	4b85      	ldr	r3, [pc, #532]	@ (8003f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	08db      	lsrs	r3, r3, #3
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	4a84      	ldr	r2, [pc, #528]	@ (8003f10 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003d00:	fa22 f303 	lsr.w	r3, r2, r3
 8003d04:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	ee07 3a90 	vmov	s15, r3
 8003d0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	ee07 3a90 	vmov	s15, r3
 8003d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d1e:	4b7b      	ldr	r3, [pc, #492]	@ (8003f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d26:	ee07 3a90 	vmov	s15, r3
 8003d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d32:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003f14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003d4e:	e087      	b.n	8003e60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	ee07 3a90 	vmov	s15, r3
 8003d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d5a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003f18 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d62:	4b6a      	ldr	r3, [pc, #424]	@ (8003f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d6a:	ee07 3a90 	vmov	s15, r3
 8003d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d72:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d76:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003f14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d92:	e065      	b.n	8003e60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	ee07 3a90 	vmov	s15, r3
 8003d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d9e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003da6:	4b59      	ldr	r3, [pc, #356]	@ (8003f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dae:	ee07 3a90 	vmov	s15, r3
 8003db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003db6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003f14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dd6:	e043      	b.n	8003e60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	ee07 3a90 	vmov	s15, r3
 8003dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003de2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003f20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dea:	4b48      	ldr	r3, [pc, #288]	@ (8003f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003df2:	ee07 3a90 	vmov	s15, r3
 8003df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dfe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003f14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e1a:	e021      	b.n	8003e60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	ee07 3a90 	vmov	s15, r3
 8003e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e26:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e2e:	4b37      	ldr	r3, [pc, #220]	@ (8003f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e36:	ee07 3a90 	vmov	s15, r3
 8003e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e42:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003f14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e5e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003e60:	4b2a      	ldr	r3, [pc, #168]	@ (8003f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e64:	0a5b      	lsrs	r3, r3, #9
 8003e66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e6a:	ee07 3a90 	vmov	s15, r3
 8003e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e86:	ee17 2a90 	vmov	r2, s15
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003e8e:	4b1f      	ldr	r3, [pc, #124]	@ (8003f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e92:	0c1b      	lsrs	r3, r3, #16
 8003e94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e98:	ee07 3a90 	vmov	s15, r3
 8003e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ea0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ea4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ea8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003eac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003eb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003eb4:	ee17 2a90 	vmov	r2, s15
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003ebc:	4b13      	ldr	r3, [pc, #76]	@ (8003f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec0:	0e1b      	lsrs	r3, r3, #24
 8003ec2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ec6:	ee07 3a90 	vmov	s15, r3
 8003eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ece:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ed2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ed6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003eda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ede:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ee2:	ee17 2a90 	vmov	r2, s15
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003eea:	e008      	b.n	8003efe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	609a      	str	r2, [r3, #8]
}
 8003efe:	bf00      	nop
 8003f00:	3724      	adds	r7, #36	@ 0x24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	58024400 	.word	0x58024400
 8003f10:	03d09000 	.word	0x03d09000
 8003f14:	46000000 	.word	0x46000000
 8003f18:	4c742400 	.word	0x4c742400
 8003f1c:	4a742400 	.word	0x4a742400
 8003f20:	4af42400 	.word	0x4af42400

08003f24 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b089      	sub	sp, #36	@ 0x24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f2c:	4ba1      	ldr	r3, [pc, #644]	@ (80041b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f30:	f003 0303 	and.w	r3, r3, #3
 8003f34:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003f36:	4b9f      	ldr	r3, [pc, #636]	@ (80041b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3a:	0d1b      	lsrs	r3, r3, #20
 8003f3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f40:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003f42:	4b9c      	ldr	r3, [pc, #624]	@ (80041b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f46:	0a1b      	lsrs	r3, r3, #8
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003f4e:	4b99      	ldr	r3, [pc, #612]	@ (80041b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f52:	08db      	lsrs	r3, r3, #3
 8003f54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	fb02 f303 	mul.w	r3, r2, r3
 8003f5e:	ee07 3a90 	vmov	s15, r3
 8003f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 8111 	beq.w	8004194 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	f000 8083 	beq.w	8004080 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	f200 80a1 	bhi.w	80040c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d056      	beq.n	800403c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003f8e:	e099      	b.n	80040c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f90:	4b88      	ldr	r3, [pc, #544]	@ (80041b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0320 	and.w	r3, r3, #32
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d02d      	beq.n	8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f9c:	4b85      	ldr	r3, [pc, #532]	@ (80041b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	08db      	lsrs	r3, r3, #3
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	4a84      	ldr	r2, [pc, #528]	@ (80041b8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fac:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	ee07 3a90 	vmov	s15, r3
 8003fb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	ee07 3a90 	vmov	s15, r3
 8003fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fc6:	4b7b      	ldr	r3, [pc, #492]	@ (80041b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fce:	ee07 3a90 	vmov	s15, r3
 8003fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fda:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80041bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fe6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ff2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003ff6:	e087      	b.n	8004108 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	ee07 3a90 	vmov	s15, r3
 8003ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004002:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80041c0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800400a:	4b6a      	ldr	r3, [pc, #424]	@ (80041b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800400c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004012:	ee07 3a90 	vmov	s15, r3
 8004016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800401a:	ed97 6a03 	vldr	s12, [r7, #12]
 800401e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80041bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800402a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800402e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004036:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800403a:	e065      	b.n	8004108 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	ee07 3a90 	vmov	s15, r3
 8004042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004046:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80041c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800404a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800404e:	4b59      	ldr	r3, [pc, #356]	@ (80041b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004056:	ee07 3a90 	vmov	s15, r3
 800405a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800405e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004062:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80041bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800406a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800406e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800407a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800407e:	e043      	b.n	8004108 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	ee07 3a90 	vmov	s15, r3
 8004086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800408a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80041c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800408e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004092:	4b48      	ldr	r3, [pc, #288]	@ (80041b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800409a:	ee07 3a90 	vmov	s15, r3
 800409e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80040a6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80041bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80040aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040c2:	e021      	b.n	8004108 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	ee07 3a90 	vmov	s15, r3
 80040ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80041c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80040d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040d6:	4b37      	ldr	r3, [pc, #220]	@ (80041b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040de:	ee07 3a90 	vmov	s15, r3
 80040e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80040ea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80041bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80040ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004102:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004106:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004108:	4b2a      	ldr	r3, [pc, #168]	@ (80041b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800410a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410c:	0a5b      	lsrs	r3, r3, #9
 800410e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004112:	ee07 3a90 	vmov	s15, r3
 8004116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800411a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800411e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004122:	edd7 6a07 	vldr	s13, [r7, #28]
 8004126:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800412a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800412e:	ee17 2a90 	vmov	r2, s15
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004136:	4b1f      	ldr	r3, [pc, #124]	@ (80041b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413a:	0c1b      	lsrs	r3, r3, #16
 800413c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004140:	ee07 3a90 	vmov	s15, r3
 8004144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004148:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800414c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004150:	edd7 6a07 	vldr	s13, [r7, #28]
 8004154:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004158:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800415c:	ee17 2a90 	vmov	r2, s15
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004164:	4b13      	ldr	r3, [pc, #76]	@ (80041b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004168:	0e1b      	lsrs	r3, r3, #24
 800416a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800416e:	ee07 3a90 	vmov	s15, r3
 8004172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004176:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800417a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800417e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004182:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004186:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800418a:	ee17 2a90 	vmov	r2, s15
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004192:	e008      	b.n	80041a6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	609a      	str	r2, [r3, #8]
}
 80041a6:	bf00      	nop
 80041a8:	3724      	adds	r7, #36	@ 0x24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	58024400 	.word	0x58024400
 80041b8:	03d09000 	.word	0x03d09000
 80041bc:	46000000 	.word	0x46000000
 80041c0:	4c742400 	.word	0x4c742400
 80041c4:	4a742400 	.word	0x4a742400
 80041c8:	4af42400 	.word	0x4af42400

080041cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80041da:	4b53      	ldr	r3, [pc, #332]	@ (8004328 <RCCEx_PLL2_Config+0x15c>)
 80041dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d101      	bne.n	80041ea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e099      	b.n	800431e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80041ea:	4b4f      	ldr	r3, [pc, #316]	@ (8004328 <RCCEx_PLL2_Config+0x15c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a4e      	ldr	r2, [pc, #312]	@ (8004328 <RCCEx_PLL2_Config+0x15c>)
 80041f0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80041f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f6:	f7fc ff6b 	bl	80010d0 <HAL_GetTick>
 80041fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041fc:	e008      	b.n	8004210 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80041fe:	f7fc ff67 	bl	80010d0 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e086      	b.n	800431e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004210:	4b45      	ldr	r3, [pc, #276]	@ (8004328 <RCCEx_PLL2_Config+0x15c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1f0      	bne.n	80041fe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800421c:	4b42      	ldr	r3, [pc, #264]	@ (8004328 <RCCEx_PLL2_Config+0x15c>)
 800421e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004220:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	031b      	lsls	r3, r3, #12
 800422a:	493f      	ldr	r1, [pc, #252]	@ (8004328 <RCCEx_PLL2_Config+0x15c>)
 800422c:	4313      	orrs	r3, r2
 800422e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	3b01      	subs	r3, #1
 8004236:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	3b01      	subs	r3, #1
 8004240:	025b      	lsls	r3, r3, #9
 8004242:	b29b      	uxth	r3, r3
 8004244:	431a      	orrs	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	3b01      	subs	r3, #1
 800424c:	041b      	lsls	r3, r3, #16
 800424e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	3b01      	subs	r3, #1
 800425a:	061b      	lsls	r3, r3, #24
 800425c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004260:	4931      	ldr	r1, [pc, #196]	@ (8004328 <RCCEx_PLL2_Config+0x15c>)
 8004262:	4313      	orrs	r3, r2
 8004264:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004266:	4b30      	ldr	r3, [pc, #192]	@ (8004328 <RCCEx_PLL2_Config+0x15c>)
 8004268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	492d      	ldr	r1, [pc, #180]	@ (8004328 <RCCEx_PLL2_Config+0x15c>)
 8004274:	4313      	orrs	r3, r2
 8004276:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004278:	4b2b      	ldr	r3, [pc, #172]	@ (8004328 <RCCEx_PLL2_Config+0x15c>)
 800427a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427c:	f023 0220 	bic.w	r2, r3, #32
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	4928      	ldr	r1, [pc, #160]	@ (8004328 <RCCEx_PLL2_Config+0x15c>)
 8004286:	4313      	orrs	r3, r2
 8004288:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800428a:	4b27      	ldr	r3, [pc, #156]	@ (8004328 <RCCEx_PLL2_Config+0x15c>)
 800428c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800428e:	4a26      	ldr	r2, [pc, #152]	@ (8004328 <RCCEx_PLL2_Config+0x15c>)
 8004290:	f023 0310 	bic.w	r3, r3, #16
 8004294:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004296:	4b24      	ldr	r3, [pc, #144]	@ (8004328 <RCCEx_PLL2_Config+0x15c>)
 8004298:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800429a:	4b24      	ldr	r3, [pc, #144]	@ (800432c <RCCEx_PLL2_Config+0x160>)
 800429c:	4013      	ands	r3, r2
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	69d2      	ldr	r2, [r2, #28]
 80042a2:	00d2      	lsls	r2, r2, #3
 80042a4:	4920      	ldr	r1, [pc, #128]	@ (8004328 <RCCEx_PLL2_Config+0x15c>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80042aa:	4b1f      	ldr	r3, [pc, #124]	@ (8004328 <RCCEx_PLL2_Config+0x15c>)
 80042ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ae:	4a1e      	ldr	r2, [pc, #120]	@ (8004328 <RCCEx_PLL2_Config+0x15c>)
 80042b0:	f043 0310 	orr.w	r3, r3, #16
 80042b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d106      	bne.n	80042ca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80042bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004328 <RCCEx_PLL2_Config+0x15c>)
 80042be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c0:	4a19      	ldr	r2, [pc, #100]	@ (8004328 <RCCEx_PLL2_Config+0x15c>)
 80042c2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80042c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80042c8:	e00f      	b.n	80042ea <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d106      	bne.n	80042de <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80042d0:	4b15      	ldr	r3, [pc, #84]	@ (8004328 <RCCEx_PLL2_Config+0x15c>)
 80042d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d4:	4a14      	ldr	r2, [pc, #80]	@ (8004328 <RCCEx_PLL2_Config+0x15c>)
 80042d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80042dc:	e005      	b.n	80042ea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80042de:	4b12      	ldr	r3, [pc, #72]	@ (8004328 <RCCEx_PLL2_Config+0x15c>)
 80042e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e2:	4a11      	ldr	r2, [pc, #68]	@ (8004328 <RCCEx_PLL2_Config+0x15c>)
 80042e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80042e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80042ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004328 <RCCEx_PLL2_Config+0x15c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a0e      	ldr	r2, [pc, #56]	@ (8004328 <RCCEx_PLL2_Config+0x15c>)
 80042f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80042f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042f6:	f7fc feeb 	bl	80010d0 <HAL_GetTick>
 80042fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042fc:	e008      	b.n	8004310 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80042fe:	f7fc fee7 	bl	80010d0 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d901      	bls.n	8004310 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e006      	b.n	800431e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004310:	4b05      	ldr	r3, [pc, #20]	@ (8004328 <RCCEx_PLL2_Config+0x15c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0f0      	beq.n	80042fe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800431c:	7bfb      	ldrb	r3, [r7, #15]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	58024400 	.word	0x58024400
 800432c:	ffff0007 	.word	0xffff0007

08004330 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800433a:	2300      	movs	r3, #0
 800433c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800433e:	4b53      	ldr	r3, [pc, #332]	@ (800448c <RCCEx_PLL3_Config+0x15c>)
 8004340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	2b03      	cmp	r3, #3
 8004348:	d101      	bne.n	800434e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e099      	b.n	8004482 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800434e:	4b4f      	ldr	r3, [pc, #316]	@ (800448c <RCCEx_PLL3_Config+0x15c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a4e      	ldr	r2, [pc, #312]	@ (800448c <RCCEx_PLL3_Config+0x15c>)
 8004354:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004358:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800435a:	f7fc feb9 	bl	80010d0 <HAL_GetTick>
 800435e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004360:	e008      	b.n	8004374 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004362:	f7fc feb5 	bl	80010d0 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e086      	b.n	8004482 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004374:	4b45      	ldr	r3, [pc, #276]	@ (800448c <RCCEx_PLL3_Config+0x15c>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1f0      	bne.n	8004362 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004380:	4b42      	ldr	r3, [pc, #264]	@ (800448c <RCCEx_PLL3_Config+0x15c>)
 8004382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004384:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	051b      	lsls	r3, r3, #20
 800438e:	493f      	ldr	r1, [pc, #252]	@ (800448c <RCCEx_PLL3_Config+0x15c>)
 8004390:	4313      	orrs	r3, r2
 8004392:	628b      	str	r3, [r1, #40]	@ 0x28
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	3b01      	subs	r3, #1
 800439a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	025b      	lsls	r3, r3, #9
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	431a      	orrs	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	3b01      	subs	r3, #1
 80043b0:	041b      	lsls	r3, r3, #16
 80043b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	3b01      	subs	r3, #1
 80043be:	061b      	lsls	r3, r3, #24
 80043c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80043c4:	4931      	ldr	r1, [pc, #196]	@ (800448c <RCCEx_PLL3_Config+0x15c>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80043ca:	4b30      	ldr	r3, [pc, #192]	@ (800448c <RCCEx_PLL3_Config+0x15c>)
 80043cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	492d      	ldr	r1, [pc, #180]	@ (800448c <RCCEx_PLL3_Config+0x15c>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80043dc:	4b2b      	ldr	r3, [pc, #172]	@ (800448c <RCCEx_PLL3_Config+0x15c>)
 80043de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	4928      	ldr	r1, [pc, #160]	@ (800448c <RCCEx_PLL3_Config+0x15c>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80043ee:	4b27      	ldr	r3, [pc, #156]	@ (800448c <RCCEx_PLL3_Config+0x15c>)
 80043f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f2:	4a26      	ldr	r2, [pc, #152]	@ (800448c <RCCEx_PLL3_Config+0x15c>)
 80043f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80043fa:	4b24      	ldr	r3, [pc, #144]	@ (800448c <RCCEx_PLL3_Config+0x15c>)
 80043fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043fe:	4b24      	ldr	r3, [pc, #144]	@ (8004490 <RCCEx_PLL3_Config+0x160>)
 8004400:	4013      	ands	r3, r2
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	69d2      	ldr	r2, [r2, #28]
 8004406:	00d2      	lsls	r2, r2, #3
 8004408:	4920      	ldr	r1, [pc, #128]	@ (800448c <RCCEx_PLL3_Config+0x15c>)
 800440a:	4313      	orrs	r3, r2
 800440c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800440e:	4b1f      	ldr	r3, [pc, #124]	@ (800448c <RCCEx_PLL3_Config+0x15c>)
 8004410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004412:	4a1e      	ldr	r2, [pc, #120]	@ (800448c <RCCEx_PLL3_Config+0x15c>)
 8004414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004418:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d106      	bne.n	800442e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004420:	4b1a      	ldr	r3, [pc, #104]	@ (800448c <RCCEx_PLL3_Config+0x15c>)
 8004422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004424:	4a19      	ldr	r2, [pc, #100]	@ (800448c <RCCEx_PLL3_Config+0x15c>)
 8004426:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800442a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800442c:	e00f      	b.n	800444e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d106      	bne.n	8004442 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004434:	4b15      	ldr	r3, [pc, #84]	@ (800448c <RCCEx_PLL3_Config+0x15c>)
 8004436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004438:	4a14      	ldr	r2, [pc, #80]	@ (800448c <RCCEx_PLL3_Config+0x15c>)
 800443a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800443e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004440:	e005      	b.n	800444e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004442:	4b12      	ldr	r3, [pc, #72]	@ (800448c <RCCEx_PLL3_Config+0x15c>)
 8004444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004446:	4a11      	ldr	r2, [pc, #68]	@ (800448c <RCCEx_PLL3_Config+0x15c>)
 8004448:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800444c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800444e:	4b0f      	ldr	r3, [pc, #60]	@ (800448c <RCCEx_PLL3_Config+0x15c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a0e      	ldr	r2, [pc, #56]	@ (800448c <RCCEx_PLL3_Config+0x15c>)
 8004454:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004458:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800445a:	f7fc fe39 	bl	80010d0 <HAL_GetTick>
 800445e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004460:	e008      	b.n	8004474 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004462:	f7fc fe35 	bl	80010d0 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e006      	b.n	8004482 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004474:	4b05      	ldr	r3, [pc, #20]	@ (800448c <RCCEx_PLL3_Config+0x15c>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0f0      	beq.n	8004462 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004480:	7bfb      	ldrb	r3, [r7, #15]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	58024400 	.word	0x58024400
 8004490:	ffff0007 	.word	0xffff0007

08004494 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e049      	b.n	800453a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d106      	bne.n	80044c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7fc fc1e 	bl	8000cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3304      	adds	r3, #4
 80044d0:	4619      	mov	r1, r3
 80044d2:	4610      	mov	r0, r2
 80044d4:	f000 fab8 	bl	8004a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b082      	sub	sp, #8
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e049      	b.n	80045e8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b00      	cmp	r3, #0
 800455e:	d106      	bne.n	800456e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f841 	bl	80045f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2202      	movs	r2, #2
 8004572:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3304      	adds	r3, #4
 800457e:	4619      	mov	r1, r3
 8004580:	4610      	mov	r0, r2
 8004582:	f000 fa61 	bl	8004a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3708      	adds	r7, #8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d109      	bne.n	8004628 <HAL_TIM_PWM_Start+0x24>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b01      	cmp	r3, #1
 800461e:	bf14      	ite	ne
 8004620:	2301      	movne	r3, #1
 8004622:	2300      	moveq	r3, #0
 8004624:	b2db      	uxtb	r3, r3
 8004626:	e03c      	b.n	80046a2 <HAL_TIM_PWM_Start+0x9e>
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	2b04      	cmp	r3, #4
 800462c:	d109      	bne.n	8004642 <HAL_TIM_PWM_Start+0x3e>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b01      	cmp	r3, #1
 8004638:	bf14      	ite	ne
 800463a:	2301      	movne	r3, #1
 800463c:	2300      	moveq	r3, #0
 800463e:	b2db      	uxtb	r3, r3
 8004640:	e02f      	b.n	80046a2 <HAL_TIM_PWM_Start+0x9e>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	2b08      	cmp	r3, #8
 8004646:	d109      	bne.n	800465c <HAL_TIM_PWM_Start+0x58>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b01      	cmp	r3, #1
 8004652:	bf14      	ite	ne
 8004654:	2301      	movne	r3, #1
 8004656:	2300      	moveq	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	e022      	b.n	80046a2 <HAL_TIM_PWM_Start+0x9e>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	2b0c      	cmp	r3, #12
 8004660:	d109      	bne.n	8004676 <HAL_TIM_PWM_Start+0x72>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b01      	cmp	r3, #1
 800466c:	bf14      	ite	ne
 800466e:	2301      	movne	r3, #1
 8004670:	2300      	moveq	r3, #0
 8004672:	b2db      	uxtb	r3, r3
 8004674:	e015      	b.n	80046a2 <HAL_TIM_PWM_Start+0x9e>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	2b10      	cmp	r3, #16
 800467a:	d109      	bne.n	8004690 <HAL_TIM_PWM_Start+0x8c>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b01      	cmp	r3, #1
 8004686:	bf14      	ite	ne
 8004688:	2301      	movne	r3, #1
 800468a:	2300      	moveq	r3, #0
 800468c:	b2db      	uxtb	r3, r3
 800468e:	e008      	b.n	80046a2 <HAL_TIM_PWM_Start+0x9e>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b01      	cmp	r3, #1
 800469a:	bf14      	ite	ne
 800469c:	2301      	movne	r3, #1
 800469e:	2300      	moveq	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e0a1      	b.n	80047ee <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d104      	bne.n	80046ba <HAL_TIM_PWM_Start+0xb6>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046b8:	e023      	b.n	8004702 <HAL_TIM_PWM_Start+0xfe>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b04      	cmp	r3, #4
 80046be:	d104      	bne.n	80046ca <HAL_TIM_PWM_Start+0xc6>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046c8:	e01b      	b.n	8004702 <HAL_TIM_PWM_Start+0xfe>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	d104      	bne.n	80046da <HAL_TIM_PWM_Start+0xd6>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046d8:	e013      	b.n	8004702 <HAL_TIM_PWM_Start+0xfe>
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b0c      	cmp	r3, #12
 80046de:	d104      	bne.n	80046ea <HAL_TIM_PWM_Start+0xe6>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046e8:	e00b      	b.n	8004702 <HAL_TIM_PWM_Start+0xfe>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b10      	cmp	r3, #16
 80046ee:	d104      	bne.n	80046fa <HAL_TIM_PWM_Start+0xf6>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046f8:	e003      	b.n	8004702 <HAL_TIM_PWM_Start+0xfe>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2202      	movs	r2, #2
 80046fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2201      	movs	r2, #1
 8004708:	6839      	ldr	r1, [r7, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f000 fd12 	bl	8005134 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a38      	ldr	r2, [pc, #224]	@ (80047f8 <HAL_TIM_PWM_Start+0x1f4>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d013      	beq.n	8004742 <HAL_TIM_PWM_Start+0x13e>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a37      	ldr	r2, [pc, #220]	@ (80047fc <HAL_TIM_PWM_Start+0x1f8>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d00e      	beq.n	8004742 <HAL_TIM_PWM_Start+0x13e>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a35      	ldr	r2, [pc, #212]	@ (8004800 <HAL_TIM_PWM_Start+0x1fc>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d009      	beq.n	8004742 <HAL_TIM_PWM_Start+0x13e>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a34      	ldr	r2, [pc, #208]	@ (8004804 <HAL_TIM_PWM_Start+0x200>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d004      	beq.n	8004742 <HAL_TIM_PWM_Start+0x13e>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a32      	ldr	r2, [pc, #200]	@ (8004808 <HAL_TIM_PWM_Start+0x204>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d101      	bne.n	8004746 <HAL_TIM_PWM_Start+0x142>
 8004742:	2301      	movs	r3, #1
 8004744:	e000      	b.n	8004748 <HAL_TIM_PWM_Start+0x144>
 8004746:	2300      	movs	r3, #0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d007      	beq.n	800475c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800475a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a25      	ldr	r2, [pc, #148]	@ (80047f8 <HAL_TIM_PWM_Start+0x1f4>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d022      	beq.n	80047ac <HAL_TIM_PWM_Start+0x1a8>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800476e:	d01d      	beq.n	80047ac <HAL_TIM_PWM_Start+0x1a8>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a25      	ldr	r2, [pc, #148]	@ (800480c <HAL_TIM_PWM_Start+0x208>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d018      	beq.n	80047ac <HAL_TIM_PWM_Start+0x1a8>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a24      	ldr	r2, [pc, #144]	@ (8004810 <HAL_TIM_PWM_Start+0x20c>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d013      	beq.n	80047ac <HAL_TIM_PWM_Start+0x1a8>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a22      	ldr	r2, [pc, #136]	@ (8004814 <HAL_TIM_PWM_Start+0x210>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d00e      	beq.n	80047ac <HAL_TIM_PWM_Start+0x1a8>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a1a      	ldr	r2, [pc, #104]	@ (80047fc <HAL_TIM_PWM_Start+0x1f8>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d009      	beq.n	80047ac <HAL_TIM_PWM_Start+0x1a8>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a1e      	ldr	r2, [pc, #120]	@ (8004818 <HAL_TIM_PWM_Start+0x214>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d004      	beq.n	80047ac <HAL_TIM_PWM_Start+0x1a8>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a16      	ldr	r2, [pc, #88]	@ (8004800 <HAL_TIM_PWM_Start+0x1fc>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d115      	bne.n	80047d8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689a      	ldr	r2, [r3, #8]
 80047b2:	4b1a      	ldr	r3, [pc, #104]	@ (800481c <HAL_TIM_PWM_Start+0x218>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2b06      	cmp	r3, #6
 80047bc:	d015      	beq.n	80047ea <HAL_TIM_PWM_Start+0x1e6>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047c4:	d011      	beq.n	80047ea <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f042 0201 	orr.w	r2, r2, #1
 80047d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d6:	e008      	b.n	80047ea <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f042 0201 	orr.w	r2, r2, #1
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	e000      	b.n	80047ec <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	40010000 	.word	0x40010000
 80047fc:	40010400 	.word	0x40010400
 8004800:	40014000 	.word	0x40014000
 8004804:	40014400 	.word	0x40014400
 8004808:	40014800 	.word	0x40014800
 800480c:	40000400 	.word	0x40000400
 8004810:	40000800 	.word	0x40000800
 8004814:	40000c00 	.word	0x40000c00
 8004818:	40001800 	.word	0x40001800
 800481c:	00010007 	.word	0x00010007

08004820 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800482c:	2300      	movs	r3, #0
 800482e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800483a:	2302      	movs	r3, #2
 800483c:	e0ff      	b.n	8004a3e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b14      	cmp	r3, #20
 800484a:	f200 80f0 	bhi.w	8004a2e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800484e:	a201      	add	r2, pc, #4	@ (adr r2, 8004854 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004854:	080048a9 	.word	0x080048a9
 8004858:	08004a2f 	.word	0x08004a2f
 800485c:	08004a2f 	.word	0x08004a2f
 8004860:	08004a2f 	.word	0x08004a2f
 8004864:	080048e9 	.word	0x080048e9
 8004868:	08004a2f 	.word	0x08004a2f
 800486c:	08004a2f 	.word	0x08004a2f
 8004870:	08004a2f 	.word	0x08004a2f
 8004874:	0800492b 	.word	0x0800492b
 8004878:	08004a2f 	.word	0x08004a2f
 800487c:	08004a2f 	.word	0x08004a2f
 8004880:	08004a2f 	.word	0x08004a2f
 8004884:	0800496b 	.word	0x0800496b
 8004888:	08004a2f 	.word	0x08004a2f
 800488c:	08004a2f 	.word	0x08004a2f
 8004890:	08004a2f 	.word	0x08004a2f
 8004894:	080049ad 	.word	0x080049ad
 8004898:	08004a2f 	.word	0x08004a2f
 800489c:	08004a2f 	.word	0x08004a2f
 80048a0:	08004a2f 	.word	0x08004a2f
 80048a4:	080049ed 	.word	0x080049ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68b9      	ldr	r1, [r7, #8]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 f96a 	bl	8004b88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	699a      	ldr	r2, [r3, #24]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0208 	orr.w	r2, r2, #8
 80048c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699a      	ldr	r2, [r3, #24]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 0204 	bic.w	r2, r2, #4
 80048d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6999      	ldr	r1, [r3, #24]
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	691a      	ldr	r2, [r3, #16]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	619a      	str	r2, [r3, #24]
      break;
 80048e6:	e0a5      	b.n	8004a34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68b9      	ldr	r1, [r7, #8]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 f9da 	bl	8004ca8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	699a      	ldr	r2, [r3, #24]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004902:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	699a      	ldr	r2, [r3, #24]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004912:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6999      	ldr	r1, [r3, #24]
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	021a      	lsls	r2, r3, #8
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	430a      	orrs	r2, r1
 8004926:	619a      	str	r2, [r3, #24]
      break;
 8004928:	e084      	b.n	8004a34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68b9      	ldr	r1, [r7, #8]
 8004930:	4618      	mov	r0, r3
 8004932:	f000 fa43 	bl	8004dbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	69da      	ldr	r2, [r3, #28]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f042 0208 	orr.w	r2, r2, #8
 8004944:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	69da      	ldr	r2, [r3, #28]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0204 	bic.w	r2, r2, #4
 8004954:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	69d9      	ldr	r1, [r3, #28]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	691a      	ldr	r2, [r3, #16]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	61da      	str	r2, [r3, #28]
      break;
 8004968:	e064      	b.n	8004a34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68b9      	ldr	r1, [r7, #8]
 8004970:	4618      	mov	r0, r3
 8004972:	f000 faab 	bl	8004ecc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	69da      	ldr	r2, [r3, #28]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004984:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	69da      	ldr	r2, [r3, #28]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004994:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	69d9      	ldr	r1, [r3, #28]
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	021a      	lsls	r2, r3, #8
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	61da      	str	r2, [r3, #28]
      break;
 80049aa:	e043      	b.n	8004a34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68b9      	ldr	r1, [r7, #8]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 faf4 	bl	8004fa0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0208 	orr.w	r2, r2, #8
 80049c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 0204 	bic.w	r2, r2, #4
 80049d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	691a      	ldr	r2, [r3, #16]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80049ea:	e023      	b.n	8004a34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68b9      	ldr	r1, [r7, #8]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fb38 	bl	8005068 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a06:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a16:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	021a      	lsls	r2, r3, #8
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004a2c:	e002      	b.n	8004a34 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	75fb      	strb	r3, [r7, #23]
      break;
 8004a32:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3718      	adds	r7, #24
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop

08004a48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a43      	ldr	r2, [pc, #268]	@ (8004b68 <TIM_Base_SetConfig+0x120>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d013      	beq.n	8004a88 <TIM_Base_SetConfig+0x40>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a66:	d00f      	beq.n	8004a88 <TIM_Base_SetConfig+0x40>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a40      	ldr	r2, [pc, #256]	@ (8004b6c <TIM_Base_SetConfig+0x124>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d00b      	beq.n	8004a88 <TIM_Base_SetConfig+0x40>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a3f      	ldr	r2, [pc, #252]	@ (8004b70 <TIM_Base_SetConfig+0x128>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d007      	beq.n	8004a88 <TIM_Base_SetConfig+0x40>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a3e      	ldr	r2, [pc, #248]	@ (8004b74 <TIM_Base_SetConfig+0x12c>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d003      	beq.n	8004a88 <TIM_Base_SetConfig+0x40>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a3d      	ldr	r2, [pc, #244]	@ (8004b78 <TIM_Base_SetConfig+0x130>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d108      	bne.n	8004a9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a32      	ldr	r2, [pc, #200]	@ (8004b68 <TIM_Base_SetConfig+0x120>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d01f      	beq.n	8004ae2 <TIM_Base_SetConfig+0x9a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aa8:	d01b      	beq.n	8004ae2 <TIM_Base_SetConfig+0x9a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a2f      	ldr	r2, [pc, #188]	@ (8004b6c <TIM_Base_SetConfig+0x124>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d017      	beq.n	8004ae2 <TIM_Base_SetConfig+0x9a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a2e      	ldr	r2, [pc, #184]	@ (8004b70 <TIM_Base_SetConfig+0x128>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d013      	beq.n	8004ae2 <TIM_Base_SetConfig+0x9a>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a2d      	ldr	r2, [pc, #180]	@ (8004b74 <TIM_Base_SetConfig+0x12c>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d00f      	beq.n	8004ae2 <TIM_Base_SetConfig+0x9a>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a2c      	ldr	r2, [pc, #176]	@ (8004b78 <TIM_Base_SetConfig+0x130>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d00b      	beq.n	8004ae2 <TIM_Base_SetConfig+0x9a>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a2b      	ldr	r2, [pc, #172]	@ (8004b7c <TIM_Base_SetConfig+0x134>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d007      	beq.n	8004ae2 <TIM_Base_SetConfig+0x9a>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a2a      	ldr	r2, [pc, #168]	@ (8004b80 <TIM_Base_SetConfig+0x138>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d003      	beq.n	8004ae2 <TIM_Base_SetConfig+0x9a>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a29      	ldr	r2, [pc, #164]	@ (8004b84 <TIM_Base_SetConfig+0x13c>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d108      	bne.n	8004af4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ae8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	689a      	ldr	r2, [r3, #8]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a14      	ldr	r2, [pc, #80]	@ (8004b68 <TIM_Base_SetConfig+0x120>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d00f      	beq.n	8004b3a <TIM_Base_SetConfig+0xf2>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a16      	ldr	r2, [pc, #88]	@ (8004b78 <TIM_Base_SetConfig+0x130>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d00b      	beq.n	8004b3a <TIM_Base_SetConfig+0xf2>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a15      	ldr	r2, [pc, #84]	@ (8004b7c <TIM_Base_SetConfig+0x134>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d007      	beq.n	8004b3a <TIM_Base_SetConfig+0xf2>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a14      	ldr	r2, [pc, #80]	@ (8004b80 <TIM_Base_SetConfig+0x138>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d003      	beq.n	8004b3a <TIM_Base_SetConfig+0xf2>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a13      	ldr	r2, [pc, #76]	@ (8004b84 <TIM_Base_SetConfig+0x13c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d103      	bne.n	8004b42 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	691a      	ldr	r2, [r3, #16]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f043 0204 	orr.w	r2, r3, #4
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	601a      	str	r2, [r3, #0]
}
 8004b5a:	bf00      	nop
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	40010000 	.word	0x40010000
 8004b6c:	40000400 	.word	0x40000400
 8004b70:	40000800 	.word	0x40000800
 8004b74:	40000c00 	.word	0x40000c00
 8004b78:	40010400 	.word	0x40010400
 8004b7c:	40014000 	.word	0x40014000
 8004b80:	40014400 	.word	0x40014400
 8004b84:	40014800 	.word	0x40014800

08004b88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	f023 0201 	bic.w	r2, r3, #1
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	4b37      	ldr	r3, [pc, #220]	@ (8004c90 <TIM_OC1_SetConfig+0x108>)
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 0303 	bic.w	r3, r3, #3
 8004bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f023 0302 	bic.w	r3, r3, #2
 8004bd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a2d      	ldr	r2, [pc, #180]	@ (8004c94 <TIM_OC1_SetConfig+0x10c>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d00f      	beq.n	8004c04 <TIM_OC1_SetConfig+0x7c>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a2c      	ldr	r2, [pc, #176]	@ (8004c98 <TIM_OC1_SetConfig+0x110>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00b      	beq.n	8004c04 <TIM_OC1_SetConfig+0x7c>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a2b      	ldr	r2, [pc, #172]	@ (8004c9c <TIM_OC1_SetConfig+0x114>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d007      	beq.n	8004c04 <TIM_OC1_SetConfig+0x7c>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a2a      	ldr	r2, [pc, #168]	@ (8004ca0 <TIM_OC1_SetConfig+0x118>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d003      	beq.n	8004c04 <TIM_OC1_SetConfig+0x7c>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a29      	ldr	r2, [pc, #164]	@ (8004ca4 <TIM_OC1_SetConfig+0x11c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d10c      	bne.n	8004c1e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f023 0308 	bic.w	r3, r3, #8
 8004c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f023 0304 	bic.w	r3, r3, #4
 8004c1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a1c      	ldr	r2, [pc, #112]	@ (8004c94 <TIM_OC1_SetConfig+0x10c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d00f      	beq.n	8004c46 <TIM_OC1_SetConfig+0xbe>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a1b      	ldr	r2, [pc, #108]	@ (8004c98 <TIM_OC1_SetConfig+0x110>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d00b      	beq.n	8004c46 <TIM_OC1_SetConfig+0xbe>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a1a      	ldr	r2, [pc, #104]	@ (8004c9c <TIM_OC1_SetConfig+0x114>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d007      	beq.n	8004c46 <TIM_OC1_SetConfig+0xbe>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a19      	ldr	r2, [pc, #100]	@ (8004ca0 <TIM_OC1_SetConfig+0x118>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d003      	beq.n	8004c46 <TIM_OC1_SetConfig+0xbe>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a18      	ldr	r2, [pc, #96]	@ (8004ca4 <TIM_OC1_SetConfig+0x11c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d111      	bne.n	8004c6a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	621a      	str	r2, [r3, #32]
}
 8004c84:	bf00      	nop
 8004c86:	371c      	adds	r7, #28
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	fffeff8f 	.word	0xfffeff8f
 8004c94:	40010000 	.word	0x40010000
 8004c98:	40010400 	.word	0x40010400
 8004c9c:	40014000 	.word	0x40014000
 8004ca0:	40014400 	.word	0x40014400
 8004ca4:	40014800 	.word	0x40014800

08004ca8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	f023 0210 	bic.w	r2, r3, #16
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	4b34      	ldr	r3, [pc, #208]	@ (8004da4 <TIM_OC2_SetConfig+0xfc>)
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	021b      	lsls	r3, r3, #8
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f023 0320 	bic.w	r3, r3, #32
 8004cf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	011b      	lsls	r3, r3, #4
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a29      	ldr	r2, [pc, #164]	@ (8004da8 <TIM_OC2_SetConfig+0x100>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d003      	beq.n	8004d10 <TIM_OC2_SetConfig+0x68>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a28      	ldr	r2, [pc, #160]	@ (8004dac <TIM_OC2_SetConfig+0x104>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d10d      	bne.n	8004d2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	011b      	lsls	r3, r3, #4
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a1e      	ldr	r2, [pc, #120]	@ (8004da8 <TIM_OC2_SetConfig+0x100>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d00f      	beq.n	8004d54 <TIM_OC2_SetConfig+0xac>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a1d      	ldr	r2, [pc, #116]	@ (8004dac <TIM_OC2_SetConfig+0x104>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d00b      	beq.n	8004d54 <TIM_OC2_SetConfig+0xac>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a1c      	ldr	r2, [pc, #112]	@ (8004db0 <TIM_OC2_SetConfig+0x108>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d007      	beq.n	8004d54 <TIM_OC2_SetConfig+0xac>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a1b      	ldr	r2, [pc, #108]	@ (8004db4 <TIM_OC2_SetConfig+0x10c>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d003      	beq.n	8004d54 <TIM_OC2_SetConfig+0xac>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a1a      	ldr	r2, [pc, #104]	@ (8004db8 <TIM_OC2_SetConfig+0x110>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d113      	bne.n	8004d7c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	621a      	str	r2, [r3, #32]
}
 8004d96:	bf00      	nop
 8004d98:	371c      	adds	r7, #28
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	feff8fff 	.word	0xfeff8fff
 8004da8:	40010000 	.word	0x40010000
 8004dac:	40010400 	.word	0x40010400
 8004db0:	40014000 	.word	0x40014000
 8004db4:	40014400 	.word	0x40014400
 8004db8:	40014800 	.word	0x40014800

08004dbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	4b33      	ldr	r3, [pc, #204]	@ (8004eb4 <TIM_OC3_SetConfig+0xf8>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 0303 	bic.w	r3, r3, #3
 8004df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	021b      	lsls	r3, r3, #8
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a28      	ldr	r2, [pc, #160]	@ (8004eb8 <TIM_OC3_SetConfig+0xfc>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d003      	beq.n	8004e22 <TIM_OC3_SetConfig+0x66>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a27      	ldr	r2, [pc, #156]	@ (8004ebc <TIM_OC3_SetConfig+0x100>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d10d      	bne.n	8004e3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	021b      	lsls	r3, r3, #8
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a1d      	ldr	r2, [pc, #116]	@ (8004eb8 <TIM_OC3_SetConfig+0xfc>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d00f      	beq.n	8004e66 <TIM_OC3_SetConfig+0xaa>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a1c      	ldr	r2, [pc, #112]	@ (8004ebc <TIM_OC3_SetConfig+0x100>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00b      	beq.n	8004e66 <TIM_OC3_SetConfig+0xaa>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a1b      	ldr	r2, [pc, #108]	@ (8004ec0 <TIM_OC3_SetConfig+0x104>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d007      	beq.n	8004e66 <TIM_OC3_SetConfig+0xaa>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a1a      	ldr	r2, [pc, #104]	@ (8004ec4 <TIM_OC3_SetConfig+0x108>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d003      	beq.n	8004e66 <TIM_OC3_SetConfig+0xaa>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a19      	ldr	r2, [pc, #100]	@ (8004ec8 <TIM_OC3_SetConfig+0x10c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d113      	bne.n	8004e8e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	011b      	lsls	r3, r3, #4
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	621a      	str	r2, [r3, #32]
}
 8004ea8:	bf00      	nop
 8004eaa:	371c      	adds	r7, #28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	fffeff8f 	.word	0xfffeff8f
 8004eb8:	40010000 	.word	0x40010000
 8004ebc:	40010400 	.word	0x40010400
 8004ec0:	40014000 	.word	0x40014000
 8004ec4:	40014400 	.word	0x40014400
 8004ec8:	40014800 	.word	0x40014800

08004ecc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	4b24      	ldr	r3, [pc, #144]	@ (8004f88 <TIM_OC4_SetConfig+0xbc>)
 8004ef8:	4013      	ands	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	021b      	lsls	r3, r3, #8
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	031b      	lsls	r3, r3, #12
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a19      	ldr	r2, [pc, #100]	@ (8004f8c <TIM_OC4_SetConfig+0xc0>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d00f      	beq.n	8004f4c <TIM_OC4_SetConfig+0x80>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a18      	ldr	r2, [pc, #96]	@ (8004f90 <TIM_OC4_SetConfig+0xc4>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d00b      	beq.n	8004f4c <TIM_OC4_SetConfig+0x80>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a17      	ldr	r2, [pc, #92]	@ (8004f94 <TIM_OC4_SetConfig+0xc8>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d007      	beq.n	8004f4c <TIM_OC4_SetConfig+0x80>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a16      	ldr	r2, [pc, #88]	@ (8004f98 <TIM_OC4_SetConfig+0xcc>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d003      	beq.n	8004f4c <TIM_OC4_SetConfig+0x80>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a15      	ldr	r2, [pc, #84]	@ (8004f9c <TIM_OC4_SetConfig+0xd0>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d109      	bne.n	8004f60 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	019b      	lsls	r3, r3, #6
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	621a      	str	r2, [r3, #32]
}
 8004f7a:	bf00      	nop
 8004f7c:	371c      	adds	r7, #28
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	feff8fff 	.word	0xfeff8fff
 8004f8c:	40010000 	.word	0x40010000
 8004f90:	40010400 	.word	0x40010400
 8004f94:	40014000 	.word	0x40014000
 8004f98:	40014400 	.word	0x40014400
 8004f9c:	40014800 	.word	0x40014800

08004fa0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	4b21      	ldr	r3, [pc, #132]	@ (8005050 <TIM_OC5_SetConfig+0xb0>)
 8004fcc:	4013      	ands	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004fe0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	041b      	lsls	r3, r3, #16
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a18      	ldr	r2, [pc, #96]	@ (8005054 <TIM_OC5_SetConfig+0xb4>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d00f      	beq.n	8005016 <TIM_OC5_SetConfig+0x76>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a17      	ldr	r2, [pc, #92]	@ (8005058 <TIM_OC5_SetConfig+0xb8>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d00b      	beq.n	8005016 <TIM_OC5_SetConfig+0x76>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a16      	ldr	r2, [pc, #88]	@ (800505c <TIM_OC5_SetConfig+0xbc>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d007      	beq.n	8005016 <TIM_OC5_SetConfig+0x76>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a15      	ldr	r2, [pc, #84]	@ (8005060 <TIM_OC5_SetConfig+0xc0>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d003      	beq.n	8005016 <TIM_OC5_SetConfig+0x76>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a14      	ldr	r2, [pc, #80]	@ (8005064 <TIM_OC5_SetConfig+0xc4>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d109      	bne.n	800502a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800501c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	021b      	lsls	r3, r3, #8
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	4313      	orrs	r3, r2
 8005028:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	621a      	str	r2, [r3, #32]
}
 8005044:	bf00      	nop
 8005046:	371c      	adds	r7, #28
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr
 8005050:	fffeff8f 	.word	0xfffeff8f
 8005054:	40010000 	.word	0x40010000
 8005058:	40010400 	.word	0x40010400
 800505c:	40014000 	.word	0x40014000
 8005060:	40014400 	.word	0x40014400
 8005064:	40014800 	.word	0x40014800

08005068 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800508e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	4b22      	ldr	r3, [pc, #136]	@ (800511c <TIM_OC6_SetConfig+0xb4>)
 8005094:	4013      	ands	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	021b      	lsls	r3, r3, #8
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80050aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	051b      	lsls	r3, r3, #20
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a19      	ldr	r2, [pc, #100]	@ (8005120 <TIM_OC6_SetConfig+0xb8>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d00f      	beq.n	80050e0 <TIM_OC6_SetConfig+0x78>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a18      	ldr	r2, [pc, #96]	@ (8005124 <TIM_OC6_SetConfig+0xbc>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d00b      	beq.n	80050e0 <TIM_OC6_SetConfig+0x78>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a17      	ldr	r2, [pc, #92]	@ (8005128 <TIM_OC6_SetConfig+0xc0>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d007      	beq.n	80050e0 <TIM_OC6_SetConfig+0x78>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a16      	ldr	r2, [pc, #88]	@ (800512c <TIM_OC6_SetConfig+0xc4>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d003      	beq.n	80050e0 <TIM_OC6_SetConfig+0x78>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a15      	ldr	r2, [pc, #84]	@ (8005130 <TIM_OC6_SetConfig+0xc8>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d109      	bne.n	80050f4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	029b      	lsls	r3, r3, #10
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	621a      	str	r2, [r3, #32]
}
 800510e:	bf00      	nop
 8005110:	371c      	adds	r7, #28
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	feff8fff 	.word	0xfeff8fff
 8005120:	40010000 	.word	0x40010000
 8005124:	40010400 	.word	0x40010400
 8005128:	40014000 	.word	0x40014000
 800512c:	40014400 	.word	0x40014400
 8005130:	40014800 	.word	0x40014800

08005134 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	f003 031f 	and.w	r3, r3, #31
 8005146:	2201      	movs	r2, #1
 8005148:	fa02 f303 	lsl.w	r3, r2, r3
 800514c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6a1a      	ldr	r2, [r3, #32]
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	43db      	mvns	r3, r3
 8005156:	401a      	ands	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6a1a      	ldr	r2, [r3, #32]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f003 031f 	and.w	r3, r3, #31
 8005166:	6879      	ldr	r1, [r7, #4]
 8005168:	fa01 f303 	lsl.w	r3, r1, r3
 800516c:	431a      	orrs	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	621a      	str	r2, [r3, #32]
}
 8005172:	bf00      	nop
 8005174:	371c      	adds	r7, #28
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b082      	sub	sp, #8
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e042      	b.n	8005216 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005196:	2b00      	cmp	r3, #0
 8005198:	d106      	bne.n	80051a8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7fb fe48 	bl	8000e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2224      	movs	r2, #36	@ 0x24
 80051ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 0201 	bic.w	r2, r2, #1
 80051be:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 fd91 	bl	8005cf0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f826 	bl	8005220 <UART_SetConfig>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d101      	bne.n	80051de <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e01b      	b.n	8005216 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051fc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f042 0201 	orr.w	r2, r2, #1
 800520c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 fe10 	bl	8005e34 <UART_CheckIdleState>
 8005214:	4603      	mov	r3, r0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
	...

08005220 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005224:	b092      	sub	sp, #72	@ 0x48
 8005226:	af00      	add	r7, sp, #0
 8005228:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	431a      	orrs	r2, r3
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	431a      	orrs	r2, r3
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	69db      	ldr	r3, [r3, #28]
 8005244:	4313      	orrs	r3, r2
 8005246:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	4bbe      	ldr	r3, [pc, #760]	@ (8005548 <UART_SetConfig+0x328>)
 8005250:	4013      	ands	r3, r2
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	6812      	ldr	r2, [r2, #0]
 8005256:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005258:	430b      	orrs	r3, r1
 800525a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4ab3      	ldr	r2, [pc, #716]	@ (800554c <UART_SetConfig+0x32c>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d004      	beq.n	800528c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005288:	4313      	orrs	r3, r2
 800528a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689a      	ldr	r2, [r3, #8]
 8005292:	4baf      	ldr	r3, [pc, #700]	@ (8005550 <UART_SetConfig+0x330>)
 8005294:	4013      	ands	r3, r2
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	6812      	ldr	r2, [r2, #0]
 800529a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800529c:	430b      	orrs	r3, r1
 800529e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a6:	f023 010f 	bic.w	r1, r3, #15
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4aa6      	ldr	r2, [pc, #664]	@ (8005554 <UART_SetConfig+0x334>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d177      	bne.n	80053b0 <UART_SetConfig+0x190>
 80052c0:	4ba5      	ldr	r3, [pc, #660]	@ (8005558 <UART_SetConfig+0x338>)
 80052c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052c8:	2b28      	cmp	r3, #40	@ 0x28
 80052ca:	d86d      	bhi.n	80053a8 <UART_SetConfig+0x188>
 80052cc:	a201      	add	r2, pc, #4	@ (adr r2, 80052d4 <UART_SetConfig+0xb4>)
 80052ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d2:	bf00      	nop
 80052d4:	08005379 	.word	0x08005379
 80052d8:	080053a9 	.word	0x080053a9
 80052dc:	080053a9 	.word	0x080053a9
 80052e0:	080053a9 	.word	0x080053a9
 80052e4:	080053a9 	.word	0x080053a9
 80052e8:	080053a9 	.word	0x080053a9
 80052ec:	080053a9 	.word	0x080053a9
 80052f0:	080053a9 	.word	0x080053a9
 80052f4:	08005381 	.word	0x08005381
 80052f8:	080053a9 	.word	0x080053a9
 80052fc:	080053a9 	.word	0x080053a9
 8005300:	080053a9 	.word	0x080053a9
 8005304:	080053a9 	.word	0x080053a9
 8005308:	080053a9 	.word	0x080053a9
 800530c:	080053a9 	.word	0x080053a9
 8005310:	080053a9 	.word	0x080053a9
 8005314:	08005389 	.word	0x08005389
 8005318:	080053a9 	.word	0x080053a9
 800531c:	080053a9 	.word	0x080053a9
 8005320:	080053a9 	.word	0x080053a9
 8005324:	080053a9 	.word	0x080053a9
 8005328:	080053a9 	.word	0x080053a9
 800532c:	080053a9 	.word	0x080053a9
 8005330:	080053a9 	.word	0x080053a9
 8005334:	08005391 	.word	0x08005391
 8005338:	080053a9 	.word	0x080053a9
 800533c:	080053a9 	.word	0x080053a9
 8005340:	080053a9 	.word	0x080053a9
 8005344:	080053a9 	.word	0x080053a9
 8005348:	080053a9 	.word	0x080053a9
 800534c:	080053a9 	.word	0x080053a9
 8005350:	080053a9 	.word	0x080053a9
 8005354:	08005399 	.word	0x08005399
 8005358:	080053a9 	.word	0x080053a9
 800535c:	080053a9 	.word	0x080053a9
 8005360:	080053a9 	.word	0x080053a9
 8005364:	080053a9 	.word	0x080053a9
 8005368:	080053a9 	.word	0x080053a9
 800536c:	080053a9 	.word	0x080053a9
 8005370:	080053a9 	.word	0x080053a9
 8005374:	080053a1 	.word	0x080053a1
 8005378:	2301      	movs	r3, #1
 800537a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800537e:	e222      	b.n	80057c6 <UART_SetConfig+0x5a6>
 8005380:	2304      	movs	r3, #4
 8005382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005386:	e21e      	b.n	80057c6 <UART_SetConfig+0x5a6>
 8005388:	2308      	movs	r3, #8
 800538a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800538e:	e21a      	b.n	80057c6 <UART_SetConfig+0x5a6>
 8005390:	2310      	movs	r3, #16
 8005392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005396:	e216      	b.n	80057c6 <UART_SetConfig+0x5a6>
 8005398:	2320      	movs	r3, #32
 800539a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800539e:	e212      	b.n	80057c6 <UART_SetConfig+0x5a6>
 80053a0:	2340      	movs	r3, #64	@ 0x40
 80053a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053a6:	e20e      	b.n	80057c6 <UART_SetConfig+0x5a6>
 80053a8:	2380      	movs	r3, #128	@ 0x80
 80053aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ae:	e20a      	b.n	80057c6 <UART_SetConfig+0x5a6>
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a69      	ldr	r2, [pc, #420]	@ (800555c <UART_SetConfig+0x33c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d130      	bne.n	800541c <UART_SetConfig+0x1fc>
 80053ba:	4b67      	ldr	r3, [pc, #412]	@ (8005558 <UART_SetConfig+0x338>)
 80053bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053be:	f003 0307 	and.w	r3, r3, #7
 80053c2:	2b05      	cmp	r3, #5
 80053c4:	d826      	bhi.n	8005414 <UART_SetConfig+0x1f4>
 80053c6:	a201      	add	r2, pc, #4	@ (adr r2, 80053cc <UART_SetConfig+0x1ac>)
 80053c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053cc:	080053e5 	.word	0x080053e5
 80053d0:	080053ed 	.word	0x080053ed
 80053d4:	080053f5 	.word	0x080053f5
 80053d8:	080053fd 	.word	0x080053fd
 80053dc:	08005405 	.word	0x08005405
 80053e0:	0800540d 	.word	0x0800540d
 80053e4:	2300      	movs	r3, #0
 80053e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ea:	e1ec      	b.n	80057c6 <UART_SetConfig+0x5a6>
 80053ec:	2304      	movs	r3, #4
 80053ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053f2:	e1e8      	b.n	80057c6 <UART_SetConfig+0x5a6>
 80053f4:	2308      	movs	r3, #8
 80053f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053fa:	e1e4      	b.n	80057c6 <UART_SetConfig+0x5a6>
 80053fc:	2310      	movs	r3, #16
 80053fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005402:	e1e0      	b.n	80057c6 <UART_SetConfig+0x5a6>
 8005404:	2320      	movs	r3, #32
 8005406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800540a:	e1dc      	b.n	80057c6 <UART_SetConfig+0x5a6>
 800540c:	2340      	movs	r3, #64	@ 0x40
 800540e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005412:	e1d8      	b.n	80057c6 <UART_SetConfig+0x5a6>
 8005414:	2380      	movs	r3, #128	@ 0x80
 8005416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800541a:	e1d4      	b.n	80057c6 <UART_SetConfig+0x5a6>
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a4f      	ldr	r2, [pc, #316]	@ (8005560 <UART_SetConfig+0x340>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d130      	bne.n	8005488 <UART_SetConfig+0x268>
 8005426:	4b4c      	ldr	r3, [pc, #304]	@ (8005558 <UART_SetConfig+0x338>)
 8005428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800542a:	f003 0307 	and.w	r3, r3, #7
 800542e:	2b05      	cmp	r3, #5
 8005430:	d826      	bhi.n	8005480 <UART_SetConfig+0x260>
 8005432:	a201      	add	r2, pc, #4	@ (adr r2, 8005438 <UART_SetConfig+0x218>)
 8005434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005438:	08005451 	.word	0x08005451
 800543c:	08005459 	.word	0x08005459
 8005440:	08005461 	.word	0x08005461
 8005444:	08005469 	.word	0x08005469
 8005448:	08005471 	.word	0x08005471
 800544c:	08005479 	.word	0x08005479
 8005450:	2300      	movs	r3, #0
 8005452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005456:	e1b6      	b.n	80057c6 <UART_SetConfig+0x5a6>
 8005458:	2304      	movs	r3, #4
 800545a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800545e:	e1b2      	b.n	80057c6 <UART_SetConfig+0x5a6>
 8005460:	2308      	movs	r3, #8
 8005462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005466:	e1ae      	b.n	80057c6 <UART_SetConfig+0x5a6>
 8005468:	2310      	movs	r3, #16
 800546a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800546e:	e1aa      	b.n	80057c6 <UART_SetConfig+0x5a6>
 8005470:	2320      	movs	r3, #32
 8005472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005476:	e1a6      	b.n	80057c6 <UART_SetConfig+0x5a6>
 8005478:	2340      	movs	r3, #64	@ 0x40
 800547a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800547e:	e1a2      	b.n	80057c6 <UART_SetConfig+0x5a6>
 8005480:	2380      	movs	r3, #128	@ 0x80
 8005482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005486:	e19e      	b.n	80057c6 <UART_SetConfig+0x5a6>
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a35      	ldr	r2, [pc, #212]	@ (8005564 <UART_SetConfig+0x344>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d130      	bne.n	80054f4 <UART_SetConfig+0x2d4>
 8005492:	4b31      	ldr	r3, [pc, #196]	@ (8005558 <UART_SetConfig+0x338>)
 8005494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005496:	f003 0307 	and.w	r3, r3, #7
 800549a:	2b05      	cmp	r3, #5
 800549c:	d826      	bhi.n	80054ec <UART_SetConfig+0x2cc>
 800549e:	a201      	add	r2, pc, #4	@ (adr r2, 80054a4 <UART_SetConfig+0x284>)
 80054a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a4:	080054bd 	.word	0x080054bd
 80054a8:	080054c5 	.word	0x080054c5
 80054ac:	080054cd 	.word	0x080054cd
 80054b0:	080054d5 	.word	0x080054d5
 80054b4:	080054dd 	.word	0x080054dd
 80054b8:	080054e5 	.word	0x080054e5
 80054bc:	2300      	movs	r3, #0
 80054be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054c2:	e180      	b.n	80057c6 <UART_SetConfig+0x5a6>
 80054c4:	2304      	movs	r3, #4
 80054c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ca:	e17c      	b.n	80057c6 <UART_SetConfig+0x5a6>
 80054cc:	2308      	movs	r3, #8
 80054ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054d2:	e178      	b.n	80057c6 <UART_SetConfig+0x5a6>
 80054d4:	2310      	movs	r3, #16
 80054d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054da:	e174      	b.n	80057c6 <UART_SetConfig+0x5a6>
 80054dc:	2320      	movs	r3, #32
 80054de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054e2:	e170      	b.n	80057c6 <UART_SetConfig+0x5a6>
 80054e4:	2340      	movs	r3, #64	@ 0x40
 80054e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ea:	e16c      	b.n	80057c6 <UART_SetConfig+0x5a6>
 80054ec:	2380      	movs	r3, #128	@ 0x80
 80054ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054f2:	e168      	b.n	80057c6 <UART_SetConfig+0x5a6>
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a1b      	ldr	r2, [pc, #108]	@ (8005568 <UART_SetConfig+0x348>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d142      	bne.n	8005584 <UART_SetConfig+0x364>
 80054fe:	4b16      	ldr	r3, [pc, #88]	@ (8005558 <UART_SetConfig+0x338>)
 8005500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005502:	f003 0307 	and.w	r3, r3, #7
 8005506:	2b05      	cmp	r3, #5
 8005508:	d838      	bhi.n	800557c <UART_SetConfig+0x35c>
 800550a:	a201      	add	r2, pc, #4	@ (adr r2, 8005510 <UART_SetConfig+0x2f0>)
 800550c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005510:	08005529 	.word	0x08005529
 8005514:	08005531 	.word	0x08005531
 8005518:	08005539 	.word	0x08005539
 800551c:	08005541 	.word	0x08005541
 8005520:	0800556d 	.word	0x0800556d
 8005524:	08005575 	.word	0x08005575
 8005528:	2300      	movs	r3, #0
 800552a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800552e:	e14a      	b.n	80057c6 <UART_SetConfig+0x5a6>
 8005530:	2304      	movs	r3, #4
 8005532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005536:	e146      	b.n	80057c6 <UART_SetConfig+0x5a6>
 8005538:	2308      	movs	r3, #8
 800553a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800553e:	e142      	b.n	80057c6 <UART_SetConfig+0x5a6>
 8005540:	2310      	movs	r3, #16
 8005542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005546:	e13e      	b.n	80057c6 <UART_SetConfig+0x5a6>
 8005548:	cfff69f3 	.word	0xcfff69f3
 800554c:	58000c00 	.word	0x58000c00
 8005550:	11fff4ff 	.word	0x11fff4ff
 8005554:	40011000 	.word	0x40011000
 8005558:	58024400 	.word	0x58024400
 800555c:	40004400 	.word	0x40004400
 8005560:	40004800 	.word	0x40004800
 8005564:	40004c00 	.word	0x40004c00
 8005568:	40005000 	.word	0x40005000
 800556c:	2320      	movs	r3, #32
 800556e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005572:	e128      	b.n	80057c6 <UART_SetConfig+0x5a6>
 8005574:	2340      	movs	r3, #64	@ 0x40
 8005576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800557a:	e124      	b.n	80057c6 <UART_SetConfig+0x5a6>
 800557c:	2380      	movs	r3, #128	@ 0x80
 800557e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005582:	e120      	b.n	80057c6 <UART_SetConfig+0x5a6>
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4acb      	ldr	r2, [pc, #812]	@ (80058b8 <UART_SetConfig+0x698>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d176      	bne.n	800567c <UART_SetConfig+0x45c>
 800558e:	4bcb      	ldr	r3, [pc, #812]	@ (80058bc <UART_SetConfig+0x69c>)
 8005590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005592:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005596:	2b28      	cmp	r3, #40	@ 0x28
 8005598:	d86c      	bhi.n	8005674 <UART_SetConfig+0x454>
 800559a:	a201      	add	r2, pc, #4	@ (adr r2, 80055a0 <UART_SetConfig+0x380>)
 800559c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a0:	08005645 	.word	0x08005645
 80055a4:	08005675 	.word	0x08005675
 80055a8:	08005675 	.word	0x08005675
 80055ac:	08005675 	.word	0x08005675
 80055b0:	08005675 	.word	0x08005675
 80055b4:	08005675 	.word	0x08005675
 80055b8:	08005675 	.word	0x08005675
 80055bc:	08005675 	.word	0x08005675
 80055c0:	0800564d 	.word	0x0800564d
 80055c4:	08005675 	.word	0x08005675
 80055c8:	08005675 	.word	0x08005675
 80055cc:	08005675 	.word	0x08005675
 80055d0:	08005675 	.word	0x08005675
 80055d4:	08005675 	.word	0x08005675
 80055d8:	08005675 	.word	0x08005675
 80055dc:	08005675 	.word	0x08005675
 80055e0:	08005655 	.word	0x08005655
 80055e4:	08005675 	.word	0x08005675
 80055e8:	08005675 	.word	0x08005675
 80055ec:	08005675 	.word	0x08005675
 80055f0:	08005675 	.word	0x08005675
 80055f4:	08005675 	.word	0x08005675
 80055f8:	08005675 	.word	0x08005675
 80055fc:	08005675 	.word	0x08005675
 8005600:	0800565d 	.word	0x0800565d
 8005604:	08005675 	.word	0x08005675
 8005608:	08005675 	.word	0x08005675
 800560c:	08005675 	.word	0x08005675
 8005610:	08005675 	.word	0x08005675
 8005614:	08005675 	.word	0x08005675
 8005618:	08005675 	.word	0x08005675
 800561c:	08005675 	.word	0x08005675
 8005620:	08005665 	.word	0x08005665
 8005624:	08005675 	.word	0x08005675
 8005628:	08005675 	.word	0x08005675
 800562c:	08005675 	.word	0x08005675
 8005630:	08005675 	.word	0x08005675
 8005634:	08005675 	.word	0x08005675
 8005638:	08005675 	.word	0x08005675
 800563c:	08005675 	.word	0x08005675
 8005640:	0800566d 	.word	0x0800566d
 8005644:	2301      	movs	r3, #1
 8005646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800564a:	e0bc      	b.n	80057c6 <UART_SetConfig+0x5a6>
 800564c:	2304      	movs	r3, #4
 800564e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005652:	e0b8      	b.n	80057c6 <UART_SetConfig+0x5a6>
 8005654:	2308      	movs	r3, #8
 8005656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800565a:	e0b4      	b.n	80057c6 <UART_SetConfig+0x5a6>
 800565c:	2310      	movs	r3, #16
 800565e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005662:	e0b0      	b.n	80057c6 <UART_SetConfig+0x5a6>
 8005664:	2320      	movs	r3, #32
 8005666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800566a:	e0ac      	b.n	80057c6 <UART_SetConfig+0x5a6>
 800566c:	2340      	movs	r3, #64	@ 0x40
 800566e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005672:	e0a8      	b.n	80057c6 <UART_SetConfig+0x5a6>
 8005674:	2380      	movs	r3, #128	@ 0x80
 8005676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800567a:	e0a4      	b.n	80057c6 <UART_SetConfig+0x5a6>
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a8f      	ldr	r2, [pc, #572]	@ (80058c0 <UART_SetConfig+0x6a0>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d130      	bne.n	80056e8 <UART_SetConfig+0x4c8>
 8005686:	4b8d      	ldr	r3, [pc, #564]	@ (80058bc <UART_SetConfig+0x69c>)
 8005688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800568a:	f003 0307 	and.w	r3, r3, #7
 800568e:	2b05      	cmp	r3, #5
 8005690:	d826      	bhi.n	80056e0 <UART_SetConfig+0x4c0>
 8005692:	a201      	add	r2, pc, #4	@ (adr r2, 8005698 <UART_SetConfig+0x478>)
 8005694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005698:	080056b1 	.word	0x080056b1
 800569c:	080056b9 	.word	0x080056b9
 80056a0:	080056c1 	.word	0x080056c1
 80056a4:	080056c9 	.word	0x080056c9
 80056a8:	080056d1 	.word	0x080056d1
 80056ac:	080056d9 	.word	0x080056d9
 80056b0:	2300      	movs	r3, #0
 80056b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056b6:	e086      	b.n	80057c6 <UART_SetConfig+0x5a6>
 80056b8:	2304      	movs	r3, #4
 80056ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056be:	e082      	b.n	80057c6 <UART_SetConfig+0x5a6>
 80056c0:	2308      	movs	r3, #8
 80056c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056c6:	e07e      	b.n	80057c6 <UART_SetConfig+0x5a6>
 80056c8:	2310      	movs	r3, #16
 80056ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ce:	e07a      	b.n	80057c6 <UART_SetConfig+0x5a6>
 80056d0:	2320      	movs	r3, #32
 80056d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056d6:	e076      	b.n	80057c6 <UART_SetConfig+0x5a6>
 80056d8:	2340      	movs	r3, #64	@ 0x40
 80056da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056de:	e072      	b.n	80057c6 <UART_SetConfig+0x5a6>
 80056e0:	2380      	movs	r3, #128	@ 0x80
 80056e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056e6:	e06e      	b.n	80057c6 <UART_SetConfig+0x5a6>
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a75      	ldr	r2, [pc, #468]	@ (80058c4 <UART_SetConfig+0x6a4>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d130      	bne.n	8005754 <UART_SetConfig+0x534>
 80056f2:	4b72      	ldr	r3, [pc, #456]	@ (80058bc <UART_SetConfig+0x69c>)
 80056f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056f6:	f003 0307 	and.w	r3, r3, #7
 80056fa:	2b05      	cmp	r3, #5
 80056fc:	d826      	bhi.n	800574c <UART_SetConfig+0x52c>
 80056fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005704 <UART_SetConfig+0x4e4>)
 8005700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005704:	0800571d 	.word	0x0800571d
 8005708:	08005725 	.word	0x08005725
 800570c:	0800572d 	.word	0x0800572d
 8005710:	08005735 	.word	0x08005735
 8005714:	0800573d 	.word	0x0800573d
 8005718:	08005745 	.word	0x08005745
 800571c:	2300      	movs	r3, #0
 800571e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005722:	e050      	b.n	80057c6 <UART_SetConfig+0x5a6>
 8005724:	2304      	movs	r3, #4
 8005726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800572a:	e04c      	b.n	80057c6 <UART_SetConfig+0x5a6>
 800572c:	2308      	movs	r3, #8
 800572e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005732:	e048      	b.n	80057c6 <UART_SetConfig+0x5a6>
 8005734:	2310      	movs	r3, #16
 8005736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800573a:	e044      	b.n	80057c6 <UART_SetConfig+0x5a6>
 800573c:	2320      	movs	r3, #32
 800573e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005742:	e040      	b.n	80057c6 <UART_SetConfig+0x5a6>
 8005744:	2340      	movs	r3, #64	@ 0x40
 8005746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800574a:	e03c      	b.n	80057c6 <UART_SetConfig+0x5a6>
 800574c:	2380      	movs	r3, #128	@ 0x80
 800574e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005752:	e038      	b.n	80057c6 <UART_SetConfig+0x5a6>
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a5b      	ldr	r2, [pc, #364]	@ (80058c8 <UART_SetConfig+0x6a8>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d130      	bne.n	80057c0 <UART_SetConfig+0x5a0>
 800575e:	4b57      	ldr	r3, [pc, #348]	@ (80058bc <UART_SetConfig+0x69c>)
 8005760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005762:	f003 0307 	and.w	r3, r3, #7
 8005766:	2b05      	cmp	r3, #5
 8005768:	d826      	bhi.n	80057b8 <UART_SetConfig+0x598>
 800576a:	a201      	add	r2, pc, #4	@ (adr r2, 8005770 <UART_SetConfig+0x550>)
 800576c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005770:	08005789 	.word	0x08005789
 8005774:	08005791 	.word	0x08005791
 8005778:	08005799 	.word	0x08005799
 800577c:	080057a1 	.word	0x080057a1
 8005780:	080057a9 	.word	0x080057a9
 8005784:	080057b1 	.word	0x080057b1
 8005788:	2302      	movs	r3, #2
 800578a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800578e:	e01a      	b.n	80057c6 <UART_SetConfig+0x5a6>
 8005790:	2304      	movs	r3, #4
 8005792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005796:	e016      	b.n	80057c6 <UART_SetConfig+0x5a6>
 8005798:	2308      	movs	r3, #8
 800579a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800579e:	e012      	b.n	80057c6 <UART_SetConfig+0x5a6>
 80057a0:	2310      	movs	r3, #16
 80057a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057a6:	e00e      	b.n	80057c6 <UART_SetConfig+0x5a6>
 80057a8:	2320      	movs	r3, #32
 80057aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ae:	e00a      	b.n	80057c6 <UART_SetConfig+0x5a6>
 80057b0:	2340      	movs	r3, #64	@ 0x40
 80057b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057b6:	e006      	b.n	80057c6 <UART_SetConfig+0x5a6>
 80057b8:	2380      	movs	r3, #128	@ 0x80
 80057ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057be:	e002      	b.n	80057c6 <UART_SetConfig+0x5a6>
 80057c0:	2380      	movs	r3, #128	@ 0x80
 80057c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a3f      	ldr	r2, [pc, #252]	@ (80058c8 <UART_SetConfig+0x6a8>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	f040 80f8 	bne.w	80059c2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057d2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80057d6:	2b20      	cmp	r3, #32
 80057d8:	dc46      	bgt.n	8005868 <UART_SetConfig+0x648>
 80057da:	2b02      	cmp	r3, #2
 80057dc:	f2c0 8082 	blt.w	80058e4 <UART_SetConfig+0x6c4>
 80057e0:	3b02      	subs	r3, #2
 80057e2:	2b1e      	cmp	r3, #30
 80057e4:	d87e      	bhi.n	80058e4 <UART_SetConfig+0x6c4>
 80057e6:	a201      	add	r2, pc, #4	@ (adr r2, 80057ec <UART_SetConfig+0x5cc>)
 80057e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ec:	0800586f 	.word	0x0800586f
 80057f0:	080058e5 	.word	0x080058e5
 80057f4:	08005877 	.word	0x08005877
 80057f8:	080058e5 	.word	0x080058e5
 80057fc:	080058e5 	.word	0x080058e5
 8005800:	080058e5 	.word	0x080058e5
 8005804:	08005887 	.word	0x08005887
 8005808:	080058e5 	.word	0x080058e5
 800580c:	080058e5 	.word	0x080058e5
 8005810:	080058e5 	.word	0x080058e5
 8005814:	080058e5 	.word	0x080058e5
 8005818:	080058e5 	.word	0x080058e5
 800581c:	080058e5 	.word	0x080058e5
 8005820:	080058e5 	.word	0x080058e5
 8005824:	08005897 	.word	0x08005897
 8005828:	080058e5 	.word	0x080058e5
 800582c:	080058e5 	.word	0x080058e5
 8005830:	080058e5 	.word	0x080058e5
 8005834:	080058e5 	.word	0x080058e5
 8005838:	080058e5 	.word	0x080058e5
 800583c:	080058e5 	.word	0x080058e5
 8005840:	080058e5 	.word	0x080058e5
 8005844:	080058e5 	.word	0x080058e5
 8005848:	080058e5 	.word	0x080058e5
 800584c:	080058e5 	.word	0x080058e5
 8005850:	080058e5 	.word	0x080058e5
 8005854:	080058e5 	.word	0x080058e5
 8005858:	080058e5 	.word	0x080058e5
 800585c:	080058e5 	.word	0x080058e5
 8005860:	080058e5 	.word	0x080058e5
 8005864:	080058d7 	.word	0x080058d7
 8005868:	2b40      	cmp	r3, #64	@ 0x40
 800586a:	d037      	beq.n	80058dc <UART_SetConfig+0x6bc>
 800586c:	e03a      	b.n	80058e4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800586e:	f7fe f9ef 	bl	8003c50 <HAL_RCCEx_GetD3PCLK1Freq>
 8005872:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005874:	e03c      	b.n	80058f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005876:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800587a:	4618      	mov	r0, r3
 800587c:	f7fe f9fe 	bl	8003c7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005884:	e034      	b.n	80058f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005886:	f107 0318 	add.w	r3, r7, #24
 800588a:	4618      	mov	r0, r3
 800588c:	f7fe fb4a 	bl	8003f24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005894:	e02c      	b.n	80058f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005896:	4b09      	ldr	r3, [pc, #36]	@ (80058bc <UART_SetConfig+0x69c>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0320 	and.w	r3, r3, #32
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d016      	beq.n	80058d0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80058a2:	4b06      	ldr	r3, [pc, #24]	@ (80058bc <UART_SetConfig+0x69c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	08db      	lsrs	r3, r3, #3
 80058a8:	f003 0303 	and.w	r3, r3, #3
 80058ac:	4a07      	ldr	r2, [pc, #28]	@ (80058cc <UART_SetConfig+0x6ac>)
 80058ae:	fa22 f303 	lsr.w	r3, r2, r3
 80058b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058b4:	e01c      	b.n	80058f0 <UART_SetConfig+0x6d0>
 80058b6:	bf00      	nop
 80058b8:	40011400 	.word	0x40011400
 80058bc:	58024400 	.word	0x58024400
 80058c0:	40007800 	.word	0x40007800
 80058c4:	40007c00 	.word	0x40007c00
 80058c8:	58000c00 	.word	0x58000c00
 80058cc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80058d0:	4b9d      	ldr	r3, [pc, #628]	@ (8005b48 <UART_SetConfig+0x928>)
 80058d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058d4:	e00c      	b.n	80058f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80058d6:	4b9d      	ldr	r3, [pc, #628]	@ (8005b4c <UART_SetConfig+0x92c>)
 80058d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058da:	e009      	b.n	80058f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058e2:	e005      	b.n	80058f0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80058e4:	2300      	movs	r3, #0
 80058e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80058ee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f000 81de 	beq.w	8005cb4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058fc:	4a94      	ldr	r2, [pc, #592]	@ (8005b50 <UART_SetConfig+0x930>)
 80058fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005902:	461a      	mov	r2, r3
 8005904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005906:	fbb3 f3f2 	udiv	r3, r3, r2
 800590a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	4613      	mov	r3, r2
 8005912:	005b      	lsls	r3, r3, #1
 8005914:	4413      	add	r3, r2
 8005916:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005918:	429a      	cmp	r2, r3
 800591a:	d305      	bcc.n	8005928 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005922:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005924:	429a      	cmp	r2, r3
 8005926:	d903      	bls.n	8005930 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800592e:	e1c1      	b.n	8005cb4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005932:	2200      	movs	r2, #0
 8005934:	60bb      	str	r3, [r7, #8]
 8005936:	60fa      	str	r2, [r7, #12]
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800593c:	4a84      	ldr	r2, [pc, #528]	@ (8005b50 <UART_SetConfig+0x930>)
 800593e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005942:	b29b      	uxth	r3, r3
 8005944:	2200      	movs	r2, #0
 8005946:	603b      	str	r3, [r7, #0]
 8005948:	607a      	str	r2, [r7, #4]
 800594a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800594e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005952:	f7fa fcc1 	bl	80002d8 <__aeabi_uldivmod>
 8005956:	4602      	mov	r2, r0
 8005958:	460b      	mov	r3, r1
 800595a:	4610      	mov	r0, r2
 800595c:	4619      	mov	r1, r3
 800595e:	f04f 0200 	mov.w	r2, #0
 8005962:	f04f 0300 	mov.w	r3, #0
 8005966:	020b      	lsls	r3, r1, #8
 8005968:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800596c:	0202      	lsls	r2, r0, #8
 800596e:	6979      	ldr	r1, [r7, #20]
 8005970:	6849      	ldr	r1, [r1, #4]
 8005972:	0849      	lsrs	r1, r1, #1
 8005974:	2000      	movs	r0, #0
 8005976:	460c      	mov	r4, r1
 8005978:	4605      	mov	r5, r0
 800597a:	eb12 0804 	adds.w	r8, r2, r4
 800597e:	eb43 0905 	adc.w	r9, r3, r5
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	469a      	mov	sl, r3
 800598a:	4693      	mov	fp, r2
 800598c:	4652      	mov	r2, sl
 800598e:	465b      	mov	r3, fp
 8005990:	4640      	mov	r0, r8
 8005992:	4649      	mov	r1, r9
 8005994:	f7fa fca0 	bl	80002d8 <__aeabi_uldivmod>
 8005998:	4602      	mov	r2, r0
 800599a:	460b      	mov	r3, r1
 800599c:	4613      	mov	r3, r2
 800599e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059a6:	d308      	bcc.n	80059ba <UART_SetConfig+0x79a>
 80059a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059ae:	d204      	bcs.n	80059ba <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059b6:	60da      	str	r2, [r3, #12]
 80059b8:	e17c      	b.n	8005cb4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80059c0:	e178      	b.n	8005cb4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059ca:	f040 80c5 	bne.w	8005b58 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80059ce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80059d2:	2b20      	cmp	r3, #32
 80059d4:	dc48      	bgt.n	8005a68 <UART_SetConfig+0x848>
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	db7b      	blt.n	8005ad2 <UART_SetConfig+0x8b2>
 80059da:	2b20      	cmp	r3, #32
 80059dc:	d879      	bhi.n	8005ad2 <UART_SetConfig+0x8b2>
 80059de:	a201      	add	r2, pc, #4	@ (adr r2, 80059e4 <UART_SetConfig+0x7c4>)
 80059e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e4:	08005a6f 	.word	0x08005a6f
 80059e8:	08005a77 	.word	0x08005a77
 80059ec:	08005ad3 	.word	0x08005ad3
 80059f0:	08005ad3 	.word	0x08005ad3
 80059f4:	08005a7f 	.word	0x08005a7f
 80059f8:	08005ad3 	.word	0x08005ad3
 80059fc:	08005ad3 	.word	0x08005ad3
 8005a00:	08005ad3 	.word	0x08005ad3
 8005a04:	08005a8f 	.word	0x08005a8f
 8005a08:	08005ad3 	.word	0x08005ad3
 8005a0c:	08005ad3 	.word	0x08005ad3
 8005a10:	08005ad3 	.word	0x08005ad3
 8005a14:	08005ad3 	.word	0x08005ad3
 8005a18:	08005ad3 	.word	0x08005ad3
 8005a1c:	08005ad3 	.word	0x08005ad3
 8005a20:	08005ad3 	.word	0x08005ad3
 8005a24:	08005a9f 	.word	0x08005a9f
 8005a28:	08005ad3 	.word	0x08005ad3
 8005a2c:	08005ad3 	.word	0x08005ad3
 8005a30:	08005ad3 	.word	0x08005ad3
 8005a34:	08005ad3 	.word	0x08005ad3
 8005a38:	08005ad3 	.word	0x08005ad3
 8005a3c:	08005ad3 	.word	0x08005ad3
 8005a40:	08005ad3 	.word	0x08005ad3
 8005a44:	08005ad3 	.word	0x08005ad3
 8005a48:	08005ad3 	.word	0x08005ad3
 8005a4c:	08005ad3 	.word	0x08005ad3
 8005a50:	08005ad3 	.word	0x08005ad3
 8005a54:	08005ad3 	.word	0x08005ad3
 8005a58:	08005ad3 	.word	0x08005ad3
 8005a5c:	08005ad3 	.word	0x08005ad3
 8005a60:	08005ad3 	.word	0x08005ad3
 8005a64:	08005ac5 	.word	0x08005ac5
 8005a68:	2b40      	cmp	r3, #64	@ 0x40
 8005a6a:	d02e      	beq.n	8005aca <UART_SetConfig+0x8aa>
 8005a6c:	e031      	b.n	8005ad2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a6e:	f7fc feb9 	bl	80027e4 <HAL_RCC_GetPCLK1Freq>
 8005a72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005a74:	e033      	b.n	8005ade <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a76:	f7fc fecb 	bl	8002810 <HAL_RCC_GetPCLK2Freq>
 8005a7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005a7c:	e02f      	b.n	8005ade <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fe f8fa 	bl	8003c7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a8c:	e027      	b.n	8005ade <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a8e:	f107 0318 	add.w	r3, r7, #24
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7fe fa46 	bl	8003f24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a9c:	e01f      	b.n	8005ade <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a9e:	4b2d      	ldr	r3, [pc, #180]	@ (8005b54 <UART_SetConfig+0x934>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0320 	and.w	r3, r3, #32
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d009      	beq.n	8005abe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8005b54 <UART_SetConfig+0x934>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	08db      	lsrs	r3, r3, #3
 8005ab0:	f003 0303 	and.w	r3, r3, #3
 8005ab4:	4a24      	ldr	r2, [pc, #144]	@ (8005b48 <UART_SetConfig+0x928>)
 8005ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8005aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005abc:	e00f      	b.n	8005ade <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005abe:	4b22      	ldr	r3, [pc, #136]	@ (8005b48 <UART_SetConfig+0x928>)
 8005ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ac2:	e00c      	b.n	8005ade <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ac4:	4b21      	ldr	r3, [pc, #132]	@ (8005b4c <UART_SetConfig+0x92c>)
 8005ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ac8:	e009      	b.n	8005ade <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ad0:	e005      	b.n	8005ade <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005adc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 80e7 	beq.w	8005cb4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aea:	4a19      	ldr	r2, [pc, #100]	@ (8005b50 <UART_SetConfig+0x930>)
 8005aec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005af0:	461a      	mov	r2, r3
 8005af2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005af4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005af8:	005a      	lsls	r2, r3, #1
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	085b      	lsrs	r3, r3, #1
 8005b00:	441a      	add	r2, r3
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b0e:	2b0f      	cmp	r3, #15
 8005b10:	d916      	bls.n	8005b40 <UART_SetConfig+0x920>
 8005b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b18:	d212      	bcs.n	8005b40 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	f023 030f 	bic.w	r3, r3, #15
 8005b22:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b26:	085b      	lsrs	r3, r3, #1
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	f003 0307 	and.w	r3, r3, #7
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005b32:	4313      	orrs	r3, r2
 8005b34:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005b3c:	60da      	str	r2, [r3, #12]
 8005b3e:	e0b9      	b.n	8005cb4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005b46:	e0b5      	b.n	8005cb4 <UART_SetConfig+0xa94>
 8005b48:	03d09000 	.word	0x03d09000
 8005b4c:	003d0900 	.word	0x003d0900
 8005b50:	080063b8 	.word	0x080063b8
 8005b54:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b58:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005b5c:	2b20      	cmp	r3, #32
 8005b5e:	dc49      	bgt.n	8005bf4 <UART_SetConfig+0x9d4>
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	db7c      	blt.n	8005c5e <UART_SetConfig+0xa3e>
 8005b64:	2b20      	cmp	r3, #32
 8005b66:	d87a      	bhi.n	8005c5e <UART_SetConfig+0xa3e>
 8005b68:	a201      	add	r2, pc, #4	@ (adr r2, 8005b70 <UART_SetConfig+0x950>)
 8005b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6e:	bf00      	nop
 8005b70:	08005bfb 	.word	0x08005bfb
 8005b74:	08005c03 	.word	0x08005c03
 8005b78:	08005c5f 	.word	0x08005c5f
 8005b7c:	08005c5f 	.word	0x08005c5f
 8005b80:	08005c0b 	.word	0x08005c0b
 8005b84:	08005c5f 	.word	0x08005c5f
 8005b88:	08005c5f 	.word	0x08005c5f
 8005b8c:	08005c5f 	.word	0x08005c5f
 8005b90:	08005c1b 	.word	0x08005c1b
 8005b94:	08005c5f 	.word	0x08005c5f
 8005b98:	08005c5f 	.word	0x08005c5f
 8005b9c:	08005c5f 	.word	0x08005c5f
 8005ba0:	08005c5f 	.word	0x08005c5f
 8005ba4:	08005c5f 	.word	0x08005c5f
 8005ba8:	08005c5f 	.word	0x08005c5f
 8005bac:	08005c5f 	.word	0x08005c5f
 8005bb0:	08005c2b 	.word	0x08005c2b
 8005bb4:	08005c5f 	.word	0x08005c5f
 8005bb8:	08005c5f 	.word	0x08005c5f
 8005bbc:	08005c5f 	.word	0x08005c5f
 8005bc0:	08005c5f 	.word	0x08005c5f
 8005bc4:	08005c5f 	.word	0x08005c5f
 8005bc8:	08005c5f 	.word	0x08005c5f
 8005bcc:	08005c5f 	.word	0x08005c5f
 8005bd0:	08005c5f 	.word	0x08005c5f
 8005bd4:	08005c5f 	.word	0x08005c5f
 8005bd8:	08005c5f 	.word	0x08005c5f
 8005bdc:	08005c5f 	.word	0x08005c5f
 8005be0:	08005c5f 	.word	0x08005c5f
 8005be4:	08005c5f 	.word	0x08005c5f
 8005be8:	08005c5f 	.word	0x08005c5f
 8005bec:	08005c5f 	.word	0x08005c5f
 8005bf0:	08005c51 	.word	0x08005c51
 8005bf4:	2b40      	cmp	r3, #64	@ 0x40
 8005bf6:	d02e      	beq.n	8005c56 <UART_SetConfig+0xa36>
 8005bf8:	e031      	b.n	8005c5e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bfa:	f7fc fdf3 	bl	80027e4 <HAL_RCC_GetPCLK1Freq>
 8005bfe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005c00:	e033      	b.n	8005c6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c02:	f7fc fe05 	bl	8002810 <HAL_RCC_GetPCLK2Freq>
 8005c06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005c08:	e02f      	b.n	8005c6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7fe f834 	bl	8003c7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c18:	e027      	b.n	8005c6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c1a:	f107 0318 	add.w	r3, r7, #24
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fe f980 	bl	8003f24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c28:	e01f      	b.n	8005c6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c2a:	4b2d      	ldr	r3, [pc, #180]	@ (8005ce0 <UART_SetConfig+0xac0>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0320 	and.w	r3, r3, #32
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d009      	beq.n	8005c4a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c36:	4b2a      	ldr	r3, [pc, #168]	@ (8005ce0 <UART_SetConfig+0xac0>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	08db      	lsrs	r3, r3, #3
 8005c3c:	f003 0303 	and.w	r3, r3, #3
 8005c40:	4a28      	ldr	r2, [pc, #160]	@ (8005ce4 <UART_SetConfig+0xac4>)
 8005c42:	fa22 f303 	lsr.w	r3, r2, r3
 8005c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c48:	e00f      	b.n	8005c6a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005c4a:	4b26      	ldr	r3, [pc, #152]	@ (8005ce4 <UART_SetConfig+0xac4>)
 8005c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c4e:	e00c      	b.n	8005c6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c50:	4b25      	ldr	r3, [pc, #148]	@ (8005ce8 <UART_SetConfig+0xac8>)
 8005c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c54:	e009      	b.n	8005c6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c5c:	e005      	b.n	8005c6a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005c68:	bf00      	nop
    }

    if (pclk != 0U)
 8005c6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d021      	beq.n	8005cb4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c74:	4a1d      	ldr	r2, [pc, #116]	@ (8005cec <UART_SetConfig+0xacc>)
 8005c76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	085b      	lsrs	r3, r3, #1
 8005c88:	441a      	add	r2, r3
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c92:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c96:	2b0f      	cmp	r3, #15
 8005c98:	d909      	bls.n	8005cae <UART_SetConfig+0xa8e>
 8005c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ca0:	d205      	bcs.n	8005cae <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	60da      	str	r2, [r3, #12]
 8005cac:	e002      	b.n	8005cb4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005cd0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3748      	adds	r7, #72	@ 0x48
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cde:	bf00      	nop
 8005ce0:	58024400 	.word	0x58024400
 8005ce4:	03d09000 	.word	0x03d09000
 8005ce8:	003d0900 	.word	0x003d0900
 8005cec:	080063b8 	.word	0x080063b8

08005cf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfc:	f003 0308 	and.w	r3, r3, #8
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00a      	beq.n	8005d1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	430a      	orrs	r2, r1
 8005d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00a      	beq.n	8005d3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d40:	f003 0302 	and.w	r3, r3, #2
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00a      	beq.n	8005d5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d62:	f003 0304 	and.w	r3, r3, #4
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00a      	beq.n	8005d80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d84:	f003 0310 	and.w	r3, r3, #16
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00a      	beq.n	8005da2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da6:	f003 0320 	and.w	r3, r3, #32
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00a      	beq.n	8005dc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d01a      	beq.n	8005e06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dee:	d10a      	bne.n	8005e06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	430a      	orrs	r2, r1
 8005e04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00a      	beq.n	8005e28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	605a      	str	r2, [r3, #4]
  }
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b098      	sub	sp, #96	@ 0x60
 8005e38:	af02      	add	r7, sp, #8
 8005e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e44:	f7fb f944 	bl	80010d0 <HAL_GetTick>
 8005e48:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0308 	and.w	r3, r3, #8
 8005e54:	2b08      	cmp	r3, #8
 8005e56:	d12f      	bne.n	8005eb8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e5c:	9300      	str	r3, [sp, #0]
 8005e5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e60:	2200      	movs	r2, #0
 8005e62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f88e 	bl	8005f88 <UART_WaitOnFlagUntilTimeout>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d022      	beq.n	8005eb8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e7a:	e853 3f00 	ldrex	r3, [r3]
 8005e7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e86:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e90:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e92:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e98:	e841 2300 	strex	r3, r2, [r1]
 8005e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1e6      	bne.n	8005e72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e063      	b.n	8005f80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0304 	and.w	r3, r3, #4
 8005ec2:	2b04      	cmp	r3, #4
 8005ec4:	d149      	bne.n	8005f5a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ec6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 f857 	bl	8005f88 <UART_WaitOnFlagUntilTimeout>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d03c      	beq.n	8005f5a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee8:	e853 3f00 	ldrex	r3, [r3]
 8005eec:	623b      	str	r3, [r7, #32]
   return(result);
 8005eee:	6a3b      	ldr	r3, [r7, #32]
 8005ef0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ef4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	461a      	mov	r2, r3
 8005efc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005efe:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f00:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f06:	e841 2300 	strex	r3, r2, [r1]
 8005f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1e6      	bne.n	8005ee0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	3308      	adds	r3, #8
 8005f18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	e853 3f00 	ldrex	r3, [r3]
 8005f20:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f023 0301 	bic.w	r3, r3, #1
 8005f28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3308      	adds	r3, #8
 8005f30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f32:	61fa      	str	r2, [r7, #28]
 8005f34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f36:	69b9      	ldr	r1, [r7, #24]
 8005f38:	69fa      	ldr	r2, [r7, #28]
 8005f3a:	e841 2300 	strex	r3, r2, [r1]
 8005f3e:	617b      	str	r3, [r7, #20]
   return(result);
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1e5      	bne.n	8005f12 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2220      	movs	r2, #32
 8005f4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e012      	b.n	8005f80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2220      	movs	r2, #32
 8005f5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2220      	movs	r2, #32
 8005f66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3758      	adds	r7, #88	@ 0x58
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	603b      	str	r3, [r7, #0]
 8005f94:	4613      	mov	r3, r2
 8005f96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f98:	e04f      	b.n	800603a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa0:	d04b      	beq.n	800603a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fa2:	f7fb f895 	bl	80010d0 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	69ba      	ldr	r2, [r7, #24]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d302      	bcc.n	8005fb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d101      	bne.n	8005fbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e04e      	b.n	800605a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0304 	and.w	r3, r3, #4
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d037      	beq.n	800603a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	2b80      	cmp	r3, #128	@ 0x80
 8005fce:	d034      	beq.n	800603a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2b40      	cmp	r3, #64	@ 0x40
 8005fd4:	d031      	beq.n	800603a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	69db      	ldr	r3, [r3, #28]
 8005fdc:	f003 0308 	and.w	r3, r3, #8
 8005fe0:	2b08      	cmp	r3, #8
 8005fe2:	d110      	bne.n	8006006 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2208      	movs	r2, #8
 8005fea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f000 f839 	bl	8006064 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2208      	movs	r2, #8
 8005ff6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e029      	b.n	800605a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	69db      	ldr	r3, [r3, #28]
 800600c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006010:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006014:	d111      	bne.n	800603a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800601e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 f81f 	bl	8006064 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2220      	movs	r2, #32
 800602a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e00f      	b.n	800605a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	69da      	ldr	r2, [r3, #28]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	4013      	ands	r3, r2
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	429a      	cmp	r2, r3
 8006048:	bf0c      	ite	eq
 800604a:	2301      	moveq	r3, #1
 800604c:	2300      	movne	r3, #0
 800604e:	b2db      	uxtb	r3, r3
 8006050:	461a      	mov	r2, r3
 8006052:	79fb      	ldrb	r3, [r7, #7]
 8006054:	429a      	cmp	r2, r3
 8006056:	d0a0      	beq.n	8005f9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
	...

08006064 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006064:	b480      	push	{r7}
 8006066:	b095      	sub	sp, #84	@ 0x54
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006074:	e853 3f00 	ldrex	r3, [r3]
 8006078:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800607a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006080:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	461a      	mov	r2, r3
 8006088:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800608a:	643b      	str	r3, [r7, #64]	@ 0x40
 800608c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006090:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006092:	e841 2300 	strex	r3, r2, [r1]
 8006096:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1e6      	bne.n	800606c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3308      	adds	r3, #8
 80060a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	e853 3f00 	ldrex	r3, [r3]
 80060ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80060ae:	69fa      	ldr	r2, [r7, #28]
 80060b0:	4b1e      	ldr	r3, [pc, #120]	@ (800612c <UART_EndRxTransfer+0xc8>)
 80060b2:	4013      	ands	r3, r2
 80060b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	3308      	adds	r3, #8
 80060bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060c6:	e841 2300 	strex	r3, r2, [r1]
 80060ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80060cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1e5      	bne.n	800609e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d118      	bne.n	800610c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	e853 3f00 	ldrex	r3, [r3]
 80060e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	f023 0310 	bic.w	r3, r3, #16
 80060ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	461a      	mov	r2, r3
 80060f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060f8:	61bb      	str	r3, [r7, #24]
 80060fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fc:	6979      	ldr	r1, [r7, #20]
 80060fe:	69ba      	ldr	r2, [r7, #24]
 8006100:	e841 2300 	strex	r3, r2, [r1]
 8006104:	613b      	str	r3, [r7, #16]
   return(result);
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1e6      	bne.n	80060da <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2220      	movs	r2, #32
 8006110:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006120:	bf00      	nop
 8006122:	3754      	adds	r7, #84	@ 0x54
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr
 800612c:	effffffe 	.word	0xeffffffe

08006130 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800613e:	2b01      	cmp	r3, #1
 8006140:	d101      	bne.n	8006146 <HAL_UARTEx_DisableFifoMode+0x16>
 8006142:	2302      	movs	r3, #2
 8006144:	e027      	b.n	8006196 <HAL_UARTEx_DisableFifoMode+0x66>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2224      	movs	r2, #36	@ 0x24
 8006152:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 0201 	bic.w	r2, r2, #1
 800616c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006174:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2220      	movs	r2, #32
 8006188:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3714      	adds	r7, #20
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b084      	sub	sp, #16
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d101      	bne.n	80061ba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80061b6:	2302      	movs	r3, #2
 80061b8:	e02d      	b.n	8006216 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2224      	movs	r2, #36	@ 0x24
 80061c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f022 0201 	bic.w	r2, r2, #1
 80061e0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f850 	bl	800629c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2220      	movs	r2, #32
 8006208:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b084      	sub	sp, #16
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800622e:	2b01      	cmp	r3, #1
 8006230:	d101      	bne.n	8006236 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006232:	2302      	movs	r3, #2
 8006234:	e02d      	b.n	8006292 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2224      	movs	r2, #36	@ 0x24
 8006242:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 0201 	bic.w	r2, r2, #1
 800625c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	683a      	ldr	r2, [r7, #0]
 800626e:	430a      	orrs	r2, r1
 8006270:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f812 	bl	800629c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2220      	movs	r2, #32
 8006284:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
	...

0800629c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d108      	bne.n	80062be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80062bc:	e031      	b.n	8006322 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80062be:	2310      	movs	r3, #16
 80062c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80062c2:	2310      	movs	r3, #16
 80062c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	0e5b      	lsrs	r3, r3, #25
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	f003 0307 	and.w	r3, r3, #7
 80062d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	0f5b      	lsrs	r3, r3, #29
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	f003 0307 	and.w	r3, r3, #7
 80062e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062e6:	7bbb      	ldrb	r3, [r7, #14]
 80062e8:	7b3a      	ldrb	r2, [r7, #12]
 80062ea:	4911      	ldr	r1, [pc, #68]	@ (8006330 <UARTEx_SetNbDataToProcess+0x94>)
 80062ec:	5c8a      	ldrb	r2, [r1, r2]
 80062ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80062f2:	7b3a      	ldrb	r2, [r7, #12]
 80062f4:	490f      	ldr	r1, [pc, #60]	@ (8006334 <UARTEx_SetNbDataToProcess+0x98>)
 80062f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006304:	7bfb      	ldrb	r3, [r7, #15]
 8006306:	7b7a      	ldrb	r2, [r7, #13]
 8006308:	4909      	ldr	r1, [pc, #36]	@ (8006330 <UARTEx_SetNbDataToProcess+0x94>)
 800630a:	5c8a      	ldrb	r2, [r1, r2]
 800630c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006310:	7b7a      	ldrb	r2, [r7, #13]
 8006312:	4908      	ldr	r1, [pc, #32]	@ (8006334 <UARTEx_SetNbDataToProcess+0x98>)
 8006314:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006316:	fb93 f3f2 	sdiv	r3, r3, r2
 800631a:	b29a      	uxth	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006322:	bf00      	nop
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	080063d0 	.word	0x080063d0
 8006334:	080063d8 	.word	0x080063d8

08006338 <memset>:
 8006338:	4402      	add	r2, r0
 800633a:	4603      	mov	r3, r0
 800633c:	4293      	cmp	r3, r2
 800633e:	d100      	bne.n	8006342 <memset+0xa>
 8006340:	4770      	bx	lr
 8006342:	f803 1b01 	strb.w	r1, [r3], #1
 8006346:	e7f9      	b.n	800633c <memset+0x4>

08006348 <__libc_init_array>:
 8006348:	b570      	push	{r4, r5, r6, lr}
 800634a:	4d0d      	ldr	r5, [pc, #52]	@ (8006380 <__libc_init_array+0x38>)
 800634c:	4c0d      	ldr	r4, [pc, #52]	@ (8006384 <__libc_init_array+0x3c>)
 800634e:	1b64      	subs	r4, r4, r5
 8006350:	10a4      	asrs	r4, r4, #2
 8006352:	2600      	movs	r6, #0
 8006354:	42a6      	cmp	r6, r4
 8006356:	d109      	bne.n	800636c <__libc_init_array+0x24>
 8006358:	4d0b      	ldr	r5, [pc, #44]	@ (8006388 <__libc_init_array+0x40>)
 800635a:	4c0c      	ldr	r4, [pc, #48]	@ (800638c <__libc_init_array+0x44>)
 800635c:	f000 f818 	bl	8006390 <_init>
 8006360:	1b64      	subs	r4, r4, r5
 8006362:	10a4      	asrs	r4, r4, #2
 8006364:	2600      	movs	r6, #0
 8006366:	42a6      	cmp	r6, r4
 8006368:	d105      	bne.n	8006376 <__libc_init_array+0x2e>
 800636a:	bd70      	pop	{r4, r5, r6, pc}
 800636c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006370:	4798      	blx	r3
 8006372:	3601      	adds	r6, #1
 8006374:	e7ee      	b.n	8006354 <__libc_init_array+0xc>
 8006376:	f855 3b04 	ldr.w	r3, [r5], #4
 800637a:	4798      	blx	r3
 800637c:	3601      	adds	r6, #1
 800637e:	e7f2      	b.n	8006366 <__libc_init_array+0x1e>
 8006380:	080063e8 	.word	0x080063e8
 8006384:	080063e8 	.word	0x080063e8
 8006388:	080063e8 	.word	0x080063e8
 800638c:	080063ec 	.word	0x080063ec

08006390 <_init>:
 8006390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006392:	bf00      	nop
 8006394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006396:	bc08      	pop	{r3}
 8006398:	469e      	mov	lr, r3
 800639a:	4770      	bx	lr

0800639c <_fini>:
 800639c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800639e:	bf00      	nop
 80063a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063a2:	bc08      	pop	{r3}
 80063a4:	469e      	mov	lr, r3
 80063a6:	4770      	bx	lr
