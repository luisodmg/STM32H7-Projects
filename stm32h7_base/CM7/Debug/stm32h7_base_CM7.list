
stm32h7_base_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063e4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08006684  08006684  00007684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066f0  080066f0  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080066f0  080066f0  000076f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066f8  080066f8  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066f8  080066f8  000076f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080066fc  080066fc  000076fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  24000000  08006700  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2400006c  0800676c  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000270  0800676c  00008270  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ca1  00000000  00000000  0000809a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000225f  00000000  00000000  00018d3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  0001afa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000091d  00000000  00000000  0001bb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a663  00000000  00000000  0001c4b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010283  00000000  00000000  00056b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017d280  00000000  00000000  00066d9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e401b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037e4  00000000  00000000  001e4060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  001e7844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400006c 	.word	0x2400006c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800666c 	.word	0x0800666c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000070 	.word	0x24000070
 80002dc:	0800666c 	.word	0x0800666c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006b0:	4b49      	ldr	r3, [pc, #292]	@ (80007d8 <SystemInit+0x12c>)
 80006b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006b6:	4a48      	ldr	r2, [pc, #288]	@ (80007d8 <SystemInit+0x12c>)
 80006b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006c0:	4b45      	ldr	r3, [pc, #276]	@ (80007d8 <SystemInit+0x12c>)
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	4a44      	ldr	r2, [pc, #272]	@ (80007d8 <SystemInit+0x12c>)
 80006c6:	f043 0310 	orr.w	r3, r3, #16
 80006ca:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006cc:	4b43      	ldr	r3, [pc, #268]	@ (80007dc <SystemInit+0x130>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f003 030f 	and.w	r3, r3, #15
 80006d4:	2b06      	cmp	r3, #6
 80006d6:	d807      	bhi.n	80006e8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d8:	4b40      	ldr	r3, [pc, #256]	@ (80007dc <SystemInit+0x130>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f023 030f 	bic.w	r3, r3, #15
 80006e0:	4a3e      	ldr	r2, [pc, #248]	@ (80007dc <SystemInit+0x130>)
 80006e2:	f043 0307 	orr.w	r3, r3, #7
 80006e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006e8:	4b3d      	ldr	r3, [pc, #244]	@ (80007e0 <SystemInit+0x134>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a3c      	ldr	r2, [pc, #240]	@ (80007e0 <SystemInit+0x134>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006f4:	4b3a      	ldr	r3, [pc, #232]	@ (80007e0 <SystemInit+0x134>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006fa:	4b39      	ldr	r3, [pc, #228]	@ (80007e0 <SystemInit+0x134>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	4938      	ldr	r1, [pc, #224]	@ (80007e0 <SystemInit+0x134>)
 8000700:	4b38      	ldr	r3, [pc, #224]	@ (80007e4 <SystemInit+0x138>)
 8000702:	4013      	ands	r3, r2
 8000704:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000706:	4b35      	ldr	r3, [pc, #212]	@ (80007dc <SystemInit+0x130>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f003 0308 	and.w	r3, r3, #8
 800070e:	2b00      	cmp	r3, #0
 8000710:	d007      	beq.n	8000722 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000712:	4b32      	ldr	r3, [pc, #200]	@ (80007dc <SystemInit+0x130>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f023 030f 	bic.w	r3, r3, #15
 800071a:	4a30      	ldr	r2, [pc, #192]	@ (80007dc <SystemInit+0x130>)
 800071c:	f043 0307 	orr.w	r3, r3, #7
 8000720:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000722:	4b2f      	ldr	r3, [pc, #188]	@ (80007e0 <SystemInit+0x134>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000728:	4b2d      	ldr	r3, [pc, #180]	@ (80007e0 <SystemInit+0x134>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800072e:	4b2c      	ldr	r3, [pc, #176]	@ (80007e0 <SystemInit+0x134>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000734:	4b2a      	ldr	r3, [pc, #168]	@ (80007e0 <SystemInit+0x134>)
 8000736:	4a2c      	ldr	r2, [pc, #176]	@ (80007e8 <SystemInit+0x13c>)
 8000738:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800073a:	4b29      	ldr	r3, [pc, #164]	@ (80007e0 <SystemInit+0x134>)
 800073c:	4a2b      	ldr	r2, [pc, #172]	@ (80007ec <SystemInit+0x140>)
 800073e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000740:	4b27      	ldr	r3, [pc, #156]	@ (80007e0 <SystemInit+0x134>)
 8000742:	4a2b      	ldr	r2, [pc, #172]	@ (80007f0 <SystemInit+0x144>)
 8000744:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000746:	4b26      	ldr	r3, [pc, #152]	@ (80007e0 <SystemInit+0x134>)
 8000748:	2200      	movs	r2, #0
 800074a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800074c:	4b24      	ldr	r3, [pc, #144]	@ (80007e0 <SystemInit+0x134>)
 800074e:	4a28      	ldr	r2, [pc, #160]	@ (80007f0 <SystemInit+0x144>)
 8000750:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000752:	4b23      	ldr	r3, [pc, #140]	@ (80007e0 <SystemInit+0x134>)
 8000754:	2200      	movs	r2, #0
 8000756:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000758:	4b21      	ldr	r3, [pc, #132]	@ (80007e0 <SystemInit+0x134>)
 800075a:	4a25      	ldr	r2, [pc, #148]	@ (80007f0 <SystemInit+0x144>)
 800075c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800075e:	4b20      	ldr	r3, [pc, #128]	@ (80007e0 <SystemInit+0x134>)
 8000760:	2200      	movs	r2, #0
 8000762:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000764:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <SystemInit+0x134>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a1d      	ldr	r2, [pc, #116]	@ (80007e0 <SystemInit+0x134>)
 800076a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800076e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000770:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <SystemInit+0x134>)
 8000772:	2200      	movs	r2, #0
 8000774:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000776:	4b1f      	ldr	r3, [pc, #124]	@ (80007f4 <SystemInit+0x148>)
 8000778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800077a:	4a1e      	ldr	r2, [pc, #120]	@ (80007f4 <SystemInit+0x148>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000780:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000782:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <SystemInit+0x14c>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b1d      	ldr	r3, [pc, #116]	@ (80007fc <SystemInit+0x150>)
 8000788:	4013      	ands	r3, r2
 800078a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800078e:	d202      	bcs.n	8000796 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000790:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <SystemInit+0x154>)
 8000792:	2201      	movs	r2, #1
 8000794:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000796:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <SystemInit+0x134>)
 8000798:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800079c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d113      	bne.n	80007cc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007a4:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <SystemInit+0x134>)
 80007a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007aa:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <SystemInit+0x134>)
 80007ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007b0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007b4:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <SystemInit+0x158>)
 80007b6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007ba:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <SystemInit+0x134>)
 80007be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007c2:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <SystemInit+0x134>)
 80007c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007c8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000ed00 	.word	0xe000ed00
 80007dc:	52002000 	.word	0x52002000
 80007e0:	58024400 	.word	0x58024400
 80007e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007e8:	02020200 	.word	0x02020200
 80007ec:	01ff0000 	.word	0x01ff0000
 80007f0:	01010280 	.word	0x01010280
 80007f4:	580000c0 	.word	0x580000c0
 80007f8:	5c001000 	.word	0x5c001000
 80007fc:	ffff0000 	.word	0xffff0000
 8000800:	51008108 	.word	0x51008108
 8000804:	52004000 	.word	0x52004000

08000808 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800080c:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <ExitRun0Mode+0x2c>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	4a08      	ldr	r2, [pc, #32]	@ (8000834 <ExitRun0Mode+0x2c>)
 8000812:	f023 0302 	bic.w	r3, r3, #2
 8000816:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000818:	bf00      	nop
 800081a:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <ExitRun0Mode+0x2c>)
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0f9      	beq.n	800081a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000826:	bf00      	nop
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	58024800 	.word	0x58024800

08000838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
  int32_t timeout;
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800083e:	f000 f991 	bl	8000b64 <MPU_Config>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000842:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000846:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000848:	bf00      	nop
 800084a:	4b2e      	ldr	r3, [pc, #184]	@ (8000904 <main+0xcc>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000852:	2b00      	cmp	r3, #0
 8000854:	d004      	beq.n	8000860 <main+0x28>
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	1e5a      	subs	r2, r3, #1
 800085a:	60fa      	str	r2, [r7, #12]
 800085c:	2b00      	cmp	r3, #0
 800085e:	dcf4      	bgt.n	800084a <main+0x12>
  if ( timeout < 0 )
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	2b00      	cmp	r3, #0
 8000864:	da01      	bge.n	800086a <main+0x32>
  {
  Error_Handler();
 8000866:	f000 f9a9 	bl	8000bbc <Error_Handler>
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086a:	f000 fb41 	bl	8000ef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800086e:	f000 f84d 	bl	800090c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000872:	4b24      	ldr	r3, [pc, #144]	@ (8000904 <main+0xcc>)
 8000874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000878:	4a22      	ldr	r2, [pc, #136]	@ (8000904 <main+0xcc>)
 800087a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800087e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000882:	4b20      	ldr	r3, [pc, #128]	@ (8000904 <main+0xcc>)
 8000884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000890:	2000      	movs	r0, #0
 8000892:	f000 fef1 	bl	8001678 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000896:	2100      	movs	r1, #0
 8000898:	2000      	movs	r0, #0
 800089a:	f000 ff07 	bl	80016ac <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800089e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008a2:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80008a4:	bf00      	nop
 80008a6:	4b17      	ldr	r3, [pc, #92]	@ (8000904 <main+0xcc>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d104      	bne.n	80008bc <main+0x84>
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	1e5a      	subs	r2, r3, #1
 80008b6:	60fa      	str	r2, [r7, #12]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	dcf4      	bgt.n	80008a6 <main+0x6e>
if ( timeout < 0 )
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	da01      	bge.n	80008c6 <main+0x8e>
{
Error_Handler();
 80008c2:	f000 f97b 	bl	8000bbc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c6:	f000 f8e9 	bl	8000a9c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80008ca:	f000 f89b 	bl	8000a04 <MX_USART3_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t rxChar;
  while (1)
  {
	    HAL_UART_Receive(&huart3, &rxChar, 1, HAL_MAX_DELAY);
 80008ce:	f107 010b 	add.w	r1, r7, #11
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295
 80008d6:	2201      	movs	r2, #1
 80008d8:	480b      	ldr	r0, [pc, #44]	@ (8000908 <main+0xd0>)
 80008da:	f003 fe45 	bl	8004568 <HAL_UART_Receive>
	    rxChar = rxChar + 1;
 80008de:	7afb      	ldrb	r3, [r7, #11]
 80008e0:	3301      	adds	r3, #1
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	72fb      	strb	r3, [r7, #11]
	    HAL_UART_Transmit(&huart3, &rxChar, 1, HAL_MAX_DELAY);
 80008e6:	f107 010b 	add.w	r1, r7, #11
 80008ea:	f04f 33ff 	mov.w	r3, #4294967295
 80008ee:	2201      	movs	r2, #1
 80008f0:	4805      	ldr	r0, [pc, #20]	@ (8000908 <main+0xd0>)
 80008f2:	f003 fdab 	bl	800444c <HAL_UART_Transmit>
	    printf(rxChar);
 80008f6:	7afb      	ldrb	r3, [r7, #11]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f005 f84b 	bl	8005994 <iprintf>
	    HAL_UART_Receive(&huart3, &rxChar, 1, HAL_MAX_DELAY);
 80008fe:	bf00      	nop
 8000900:	e7e5      	b.n	80008ce <main+0x96>
 8000902:	bf00      	nop
 8000904:	58024400 	.word	0x58024400
 8000908:	24000088 	.word	0x24000088

0800090c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b09c      	sub	sp, #112	@ 0x70
 8000910:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000912:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000916:	224c      	movs	r2, #76	@ 0x4c
 8000918:	2100      	movs	r1, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f005 f88f 	bl	8005a3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2220      	movs	r2, #32
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f005 f889 	bl	8005a3e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800092c:	2004      	movs	r0, #4
 800092e:	f000 fed1 	bl	80016d4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000932:	2300      	movs	r3, #0
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	4b31      	ldr	r3, [pc, #196]	@ (80009fc <SystemClock_Config+0xf0>)
 8000938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800093a:	4a30      	ldr	r2, [pc, #192]	@ (80009fc <SystemClock_Config+0xf0>)
 800093c:	f023 0301 	bic.w	r3, r3, #1
 8000940:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000942:	4b2e      	ldr	r3, [pc, #184]	@ (80009fc <SystemClock_Config+0xf0>)
 8000944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a00 <SystemClock_Config+0xf4>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	4a2b      	ldr	r2, [pc, #172]	@ (8000a00 <SystemClock_Config+0xf4>)
 8000952:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000956:	6193      	str	r3, [r2, #24]
 8000958:	4b29      	ldr	r3, [pc, #164]	@ (8000a00 <SystemClock_Config+0xf4>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000964:	bf00      	nop
 8000966:	4b26      	ldr	r3, [pc, #152]	@ (8000a00 <SystemClock_Config+0xf4>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800096e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000972:	d1f8      	bne.n	8000966 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000974:	2302      	movs	r3, #2
 8000976:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000978:	2301      	movs	r3, #1
 800097a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800097c:	2340      	movs	r3, #64	@ 0x40
 800097e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000980:	2302      	movs	r3, #2
 8000982:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000984:	2300      	movs	r3, #0
 8000986:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000988:	2304      	movs	r3, #4
 800098a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 800098c:	2332      	movs	r3, #50	@ 0x32
 800098e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000990:	2302      	movs	r3, #2
 8000992:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000994:	2302      	movs	r3, #2
 8000996:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000998:	2302      	movs	r3, #2
 800099a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800099c:	230c      	movs	r3, #12
 800099e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 feeb 	bl	8001788 <HAL_RCC_OscConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80009b8:	f000 f900 	bl	8000bbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009bc:	233f      	movs	r3, #63	@ 0x3f
 80009be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c0:	2303      	movs	r3, #3
 80009c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009c8:	2308      	movs	r3, #8
 80009ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009cc:	2340      	movs	r3, #64	@ 0x40
 80009ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009d0:	2340      	movs	r3, #64	@ 0x40
 80009d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009da:	2340      	movs	r3, #64	@ 0x40
 80009dc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2102      	movs	r1, #2
 80009e2:	4618      	mov	r0, r3
 80009e4:	f001 fb2a 	bl	800203c <HAL_RCC_ClockConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80009ee:	f000 f8e5 	bl	8000bbc <Error_Handler>
  }
}
 80009f2:	bf00      	nop
 80009f4:	3770      	adds	r7, #112	@ 0x70
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	58000400 	.word	0x58000400
 8000a00:	58024800 	.word	0x58024800

08000a04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a08:	4b22      	ldr	r3, [pc, #136]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a0a:	4a23      	ldr	r2, [pc, #140]	@ (8000a98 <MX_USART3_UART_Init+0x94>)
 8000a0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000a0e:	4b21      	ldr	r3, [pc, #132]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a10:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000a14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a16:	4b1f      	ldr	r3, [pc, #124]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a22:	4b1c      	ldr	r3, [pc, #112]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a28:	4b1a      	ldr	r3, [pc, #104]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2e:	4b19      	ldr	r3, [pc, #100]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a34:	4b17      	ldr	r3, [pc, #92]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a3a:	4b16      	ldr	r3, [pc, #88]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a40:	4b14      	ldr	r3, [pc, #80]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a46:	4b13      	ldr	r3, [pc, #76]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a4c:	4811      	ldr	r0, [pc, #68]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a4e:	f003 fcad 	bl	80043ac <HAL_UART_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a58:	f000 f8b0 	bl	8000bbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	480d      	ldr	r0, [pc, #52]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a60:	f004 fe0b 	bl	800567a <HAL_UARTEx_SetTxFifoThreshold>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a6a:	f000 f8a7 	bl	8000bbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4808      	ldr	r0, [pc, #32]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a72:	f004 fe40 	bl	80056f6 <HAL_UARTEx_SetRxFifoThreshold>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a7c:	f000 f89e 	bl	8000bbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a80:	4804      	ldr	r0, [pc, #16]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a82:	f004 fdc1 	bl	8005608 <HAL_UARTEx_DisableFifoMode>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a8c:	f000 f896 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	24000088 	.word	0x24000088
 8000a98:	40004800 	.word	0x40004800

08000a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	f107 030c 	add.w	r3, r7, #12
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	4b29      	ldr	r3, [pc, #164]	@ (8000b58 <MX_GPIO_Init+0xbc>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab8:	4a27      	ldr	r2, [pc, #156]	@ (8000b58 <MX_GPIO_Init+0xbc>)
 8000aba:	f043 0304 	orr.w	r3, r3, #4
 8000abe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ac2:	4b25      	ldr	r3, [pc, #148]	@ (8000b58 <MX_GPIO_Init+0xbc>)
 8000ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad0:	4b21      	ldr	r3, [pc, #132]	@ (8000b58 <MX_GPIO_Init+0xbc>)
 8000ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad6:	4a20      	ldr	r2, [pc, #128]	@ (8000b58 <MX_GPIO_Init+0xbc>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b58 <MX_GPIO_Init+0xbc>)
 8000ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae6:	f003 0302 	and.w	r3, r3, #2
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aee:	4b1a      	ldr	r3, [pc, #104]	@ (8000b58 <MX_GPIO_Init+0xbc>)
 8000af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af4:	4a18      	ldr	r2, [pc, #96]	@ (8000b58 <MX_GPIO_Init+0xbc>)
 8000af6:	f043 0308 	orr.w	r3, r3, #8
 8000afa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000afe:	4b16      	ldr	r3, [pc, #88]	@ (8000b58 <MX_GPIO_Init+0xbc>)
 8000b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b04:	f003 0308 	and.w	r3, r3, #8
 8000b08:	603b      	str	r3, [r7, #0]
 8000b0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000b12:	4812      	ldr	r0, [pc, #72]	@ (8000b5c <MX_GPIO_Init+0xc0>)
 8000b14:	f000 fd96 	bl	8001644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 030c 	add.w	r3, r7, #12
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	480c      	ldr	r0, [pc, #48]	@ (8000b60 <MX_GPIO_Init+0xc4>)
 8000b2e:	f000 fbd9 	bl	80012e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b32:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000b36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4804      	ldr	r0, [pc, #16]	@ (8000b5c <MX_GPIO_Init+0xc0>)
 8000b4c:	f000 fbca 	bl	80012e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b50:	bf00      	nop
 8000b52:	3720      	adds	r7, #32
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	58024400 	.word	0x58024400
 8000b5c:	58020400 	.word	0x58020400
 8000b60:	58020800 	.word	0x58020800

08000b64 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b76:	f000 fb3d 	bl	80011f4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000b86:	231f      	movs	r3, #31
 8000b88:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000b8a:	2387      	movs	r3, #135	@ 0x87
 8000b8c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000b92:	2300      	movs	r3, #0
 8000b94:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b96:	2301      	movs	r3, #1
 8000b98:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f000 fb5b 	bl	8001264 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000bae:	2004      	movs	r0, #4
 8000bb0:	f000 fb38 	bl	8001224 <HAL_MPU_Enable>

}
 8000bb4:	bf00      	nop
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc0:	b672      	cpsid	i
}
 8000bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <Error_Handler+0x8>

08000bc8 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000bd0:	1d39      	adds	r1, r7, #4
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	4803      	ldr	r0, [pc, #12]	@ (8000be8 <__io_putchar+0x20>)
 8000bda:	f003 fc37 	bl	800444c <HAL_UART_Transmit>
  return ch;
 8000bde:	687b      	ldr	r3, [r7, #4]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	24000088 	.word	0x24000088

08000bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8000c1c <HAL_MspInit+0x30>)
 8000bf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bf8:	4a08      	ldr	r2, [pc, #32]	@ (8000c1c <HAL_MspInit+0x30>)
 8000bfa:	f043 0302 	orr.w	r3, r3, #2
 8000bfe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c02:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <HAL_MspInit+0x30>)
 8000c04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c08:	f003 0302 	and.w	r3, r3, #2
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	58024400 	.word	0x58024400

08000c20 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b0ba      	sub	sp, #232	@ 0xe8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	22c0      	movs	r2, #192	@ 0xc0
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4618      	mov	r0, r3
 8000c42:	f004 fefc 	bl	8005a3e <memset>
  if(huart->Instance==USART3)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a27      	ldr	r2, [pc, #156]	@ (8000ce8 <HAL_UART_MspInit+0xc8>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d146      	bne.n	8000cde <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c50:	f04f 0202 	mov.w	r2, #2
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c62:	f107 0310 	add.w	r3, r7, #16
 8000c66:	4618      	mov	r0, r3
 8000c68:	f001 fd74 	bl	8002754 <HAL_RCCEx_PeriphCLKConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c72:	f7ff ffa3 	bl	8000bbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c76:	4b1d      	ldr	r3, [pc, #116]	@ (8000cec <HAL_UART_MspInit+0xcc>)
 8000c78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cec <HAL_UART_MspInit+0xcc>)
 8000c7e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c82:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c86:	4b19      	ldr	r3, [pc, #100]	@ (8000cec <HAL_UART_MspInit+0xcc>)
 8000c88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c94:	4b15      	ldr	r3, [pc, #84]	@ (8000cec <HAL_UART_MspInit+0xcc>)
 8000c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c9a:	4a14      	ldr	r2, [pc, #80]	@ (8000cec <HAL_UART_MspInit+0xcc>)
 8000c9c:	f043 0308 	orr.w	r3, r3, #8
 8000ca0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ca4:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <HAL_UART_MspInit+0xcc>)
 8000ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000caa:	f003 0308 	and.w	r3, r3, #8
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000cb2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ccc:	2307      	movs	r3, #7
 8000cce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4805      	ldr	r0, [pc, #20]	@ (8000cf0 <HAL_UART_MspInit+0xd0>)
 8000cda:	f000 fb03 	bl	80012e4 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000cde:	bf00      	nop
 8000ce0:	37e8      	adds	r7, #232	@ 0xe8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40004800 	.word	0x40004800
 8000cec:	58024400 	.word	0x58024400
 8000cf0:	58020c00 	.word	0x58020c00

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <NMI_Handler+0x4>

08000cfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <HardFault_Handler+0x4>

08000d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <MemManage_Handler+0x4>

08000d0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <BusFault_Handler+0x4>

08000d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <UsageFault_Handler+0x4>

08000d1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d4a:	f000 f943 	bl	8000fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b086      	sub	sp, #24
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	60f8      	str	r0, [r7, #12]
 8000d5a:	60b9      	str	r1, [r7, #8]
 8000d5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	e00a      	b.n	8000d7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d64:	f3af 8000 	nop.w
 8000d68:	4601      	mov	r1, r0
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	1c5a      	adds	r2, r3, #1
 8000d6e:	60ba      	str	r2, [r7, #8]
 8000d70:	b2ca      	uxtb	r2, r1
 8000d72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	3301      	adds	r3, #1
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	697a      	ldr	r2, [r7, #20]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	dbf0      	blt.n	8000d64 <_read+0x12>
  }

  return len;
 8000d82:	687b      	ldr	r3, [r7, #4]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	e009      	b.n	8000db2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	1c5a      	adds	r2, r3, #1
 8000da2:	60ba      	str	r2, [r7, #8]
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff ff0e 	bl	8000bc8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	3301      	adds	r3, #1
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	dbf1      	blt.n	8000d9e <_write+0x12>
  }
  return len;
 8000dba:	687b      	ldr	r3, [r7, #4]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <_close>:

int _close(int file)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dec:	605a      	str	r2, [r3, #4]
  return 0;
 8000dee:	2300      	movs	r3, #0
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <_isatty>:

int _isatty(int file)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e04:	2301      	movs	r3, #1
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b085      	sub	sp, #20
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	60f8      	str	r0, [r7, #12]
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e1e:	2300      	movs	r3, #0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e34:	4a14      	ldr	r2, [pc, #80]	@ (8000e88 <_sbrk+0x5c>)
 8000e36:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <_sbrk+0x60>)
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e40:	4b13      	ldr	r3, [pc, #76]	@ (8000e90 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d102      	bne.n	8000e4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e48:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <_sbrk+0x64>)
 8000e4a:	4a12      	ldr	r2, [pc, #72]	@ (8000e94 <_sbrk+0x68>)
 8000e4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4e:	4b10      	ldr	r3, [pc, #64]	@ (8000e90 <_sbrk+0x64>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d207      	bcs.n	8000e6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e5c:	f004 fe3e 	bl	8005adc <__errno>
 8000e60:	4603      	mov	r3, r0
 8000e62:	220c      	movs	r2, #12
 8000e64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6a:	e009      	b.n	8000e80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e6c:	4b08      	ldr	r3, [pc, #32]	@ (8000e90 <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e72:	4b07      	ldr	r3, [pc, #28]	@ (8000e90 <_sbrk+0x64>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	4a05      	ldr	r2, [pc, #20]	@ (8000e90 <_sbrk+0x64>)
 8000e7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	24080000 	.word	0x24080000
 8000e8c:	00000400 	.word	0x00000400
 8000e90:	2400011c 	.word	0x2400011c
 8000e94:	24000270 	.word	0x24000270

08000e98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e98:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000ed4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000e9c:	f7ff fcb4 	bl	8000808 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ea0:	f7ff fc04 	bl	80006ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ea4:	480c      	ldr	r0, [pc, #48]	@ (8000ed8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ea6:	490d      	ldr	r1, [pc, #52]	@ (8000edc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eac:	e002      	b.n	8000eb4 <LoopCopyDataInit>

08000eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb2:	3304      	adds	r3, #4

08000eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb8:	d3f9      	bcc.n	8000eae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ebc:	4c0a      	ldr	r4, [pc, #40]	@ (8000ee8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec0:	e001      	b.n	8000ec6 <LoopFillZerobss>

08000ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec4:	3204      	adds	r2, #4

08000ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec8:	d3fb      	bcc.n	8000ec2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eca:	f004 fe0d 	bl	8005ae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ece:	f7ff fcb3 	bl	8000838 <main>
  bx  lr
 8000ed2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ed4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ed8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000edc:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8000ee0:	08006700 	.word	0x08006700
  ldr r2, =_sbss
 8000ee4:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8000ee8:	24000270 	.word	0x24000270

08000eec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eec:	e7fe      	b.n	8000eec <ADC3_IRQHandler>
	...

08000ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef6:	2003      	movs	r0, #3
 8000ef8:	f000 f94a 	bl	8001190 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000efc:	f001 fa54 	bl	80023a8 <HAL_RCC_GetSysClockFreq>
 8000f00:	4602      	mov	r2, r0
 8000f02:	4b15      	ldr	r3, [pc, #84]	@ (8000f58 <HAL_Init+0x68>)
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	0a1b      	lsrs	r3, r3, #8
 8000f08:	f003 030f 	and.w	r3, r3, #15
 8000f0c:	4913      	ldr	r1, [pc, #76]	@ (8000f5c <HAL_Init+0x6c>)
 8000f0e:	5ccb      	ldrb	r3, [r1, r3]
 8000f10:	f003 031f 	and.w	r3, r3, #31
 8000f14:	fa22 f303 	lsr.w	r3, r2, r3
 8000f18:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f58 <HAL_Init+0x68>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	f003 030f 	and.w	r3, r3, #15
 8000f22:	4a0e      	ldr	r2, [pc, #56]	@ (8000f5c <HAL_Init+0x6c>)
 8000f24:	5cd3      	ldrb	r3, [r2, r3]
 8000f26:	f003 031f 	and.w	r3, r3, #31
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f30:	4a0b      	ldr	r2, [pc, #44]	@ (8000f60 <HAL_Init+0x70>)
 8000f32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f34:	4a0b      	ldr	r2, [pc, #44]	@ (8000f64 <HAL_Init+0x74>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f3a:	200f      	movs	r0, #15
 8000f3c:	f000 f814 	bl	8000f68 <HAL_InitTick>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e002      	b.n	8000f50 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f4a:	f7ff fe4f 	bl	8000bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	58024400 	.word	0x58024400
 8000f5c:	08006684 	.word	0x08006684
 8000f60:	24000004 	.word	0x24000004
 8000f64:	24000000 	.word	0x24000000

08000f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f70:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <HAL_InitTick+0x60>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e021      	b.n	8000fc0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f7c:	4b13      	ldr	r3, [pc, #76]	@ (8000fcc <HAL_InitTick+0x64>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4b11      	ldr	r3, [pc, #68]	@ (8000fc8 <HAL_InitTick+0x60>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4619      	mov	r1, r3
 8000f86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 f921 	bl	80011da <HAL_SYSTICK_Config>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00e      	b.n	8000fc0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b0f      	cmp	r3, #15
 8000fa6:	d80a      	bhi.n	8000fbe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	f000 f8f9 	bl	80011a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb4:	4a06      	ldr	r2, [pc, #24]	@ (8000fd0 <HAL_InitTick+0x68>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	e000      	b.n	8000fc0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	2400000c 	.word	0x2400000c
 8000fcc:	24000000 	.word	0x24000000
 8000fd0:	24000008 	.word	0x24000008

08000fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <HAL_IncTick+0x20>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <HAL_IncTick+0x24>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4a04      	ldr	r2, [pc, #16]	@ (8000ff8 <HAL_IncTick+0x24>)
 8000fe6:	6013      	str	r3, [r2, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	2400000c 	.word	0x2400000c
 8000ff8:	24000120 	.word	0x24000120

08000ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8001000:	4b03      	ldr	r3, [pc, #12]	@ (8001010 <HAL_GetTick+0x14>)
 8001002:	681b      	ldr	r3, [r3, #0]
}
 8001004:	4618      	mov	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	24000120 	.word	0x24000120

08001014 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001018:	4b03      	ldr	r3, [pc, #12]	@ (8001028 <HAL_GetREVID+0x14>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	0c1b      	lsrs	r3, r3, #16
}
 800101e:	4618      	mov	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	5c001000 	.word	0x5c001000

0800102c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800103c:	4b0b      	ldr	r3, [pc, #44]	@ (800106c <__NVIC_SetPriorityGrouping+0x40>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001048:	4013      	ands	r3, r2
 800104a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001054:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <__NVIC_SetPriorityGrouping+0x44>)
 8001056:	4313      	orrs	r3, r2
 8001058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105a:	4a04      	ldr	r2, [pc, #16]	@ (800106c <__NVIC_SetPriorityGrouping+0x40>)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60d3      	str	r3, [r2, #12]
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00
 8001070:	05fa0000 	.word	0x05fa0000

08001074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001078:	4b04      	ldr	r3, [pc, #16]	@ (800108c <__NVIC_GetPriorityGrouping+0x18>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	0a1b      	lsrs	r3, r3, #8
 800107e:	f003 0307 	and.w	r3, r3, #7
}
 8001082:	4618      	mov	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800109c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	db0a      	blt.n	80010ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	490c      	ldr	r1, [pc, #48]	@ (80010dc <__NVIC_SetPriority+0x4c>)
 80010aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ae:	0112      	lsls	r2, r2, #4
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	440b      	add	r3, r1
 80010b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b8:	e00a      	b.n	80010d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4908      	ldr	r1, [pc, #32]	@ (80010e0 <__NVIC_SetPriority+0x50>)
 80010c0:	88fb      	ldrh	r3, [r7, #6]
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	3b04      	subs	r3, #4
 80010c8:	0112      	lsls	r2, r2, #4
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	440b      	add	r3, r1
 80010ce:	761a      	strb	r2, [r3, #24]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000e100 	.word	0xe000e100
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	@ 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f1c3 0307 	rsb	r3, r3, #7
 80010fe:	2b04      	cmp	r3, #4
 8001100:	bf28      	it	cs
 8001102:	2304      	movcs	r3, #4
 8001104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3304      	adds	r3, #4
 800110a:	2b06      	cmp	r3, #6
 800110c:	d902      	bls.n	8001114 <NVIC_EncodePriority+0x30>
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3b03      	subs	r3, #3
 8001112:	e000      	b.n	8001116 <NVIC_EncodePriority+0x32>
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	f04f 32ff 	mov.w	r2, #4294967295
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43da      	mvns	r2, r3
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	401a      	ands	r2, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800112c:	f04f 31ff 	mov.w	r1, #4294967295
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa01 f303 	lsl.w	r3, r1, r3
 8001136:	43d9      	mvns	r1, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	4313      	orrs	r3, r2
         );
}
 800113e:	4618      	mov	r0, r3
 8001140:	3724      	adds	r7, #36	@ 0x24
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800115c:	d301      	bcc.n	8001162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800115e:	2301      	movs	r3, #1
 8001160:	e00f      	b.n	8001182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001162:	4a0a      	ldr	r2, [pc, #40]	@ (800118c <SysTick_Config+0x40>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116a:	210f      	movs	r1, #15
 800116c:	f04f 30ff 	mov.w	r0, #4294967295
 8001170:	f7ff ff8e 	bl	8001090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001174:	4b05      	ldr	r3, [pc, #20]	@ (800118c <SysTick_Config+0x40>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117a:	4b04      	ldr	r3, [pc, #16]	@ (800118c <SysTick_Config+0x40>)
 800117c:	2207      	movs	r2, #7
 800117e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	e000e010 	.word	0xe000e010

08001190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ff47 	bl	800102c <__NVIC_SetPriorityGrouping>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b086      	sub	sp, #24
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011b4:	f7ff ff5e 	bl	8001074 <__NVIC_GetPriorityGrouping>
 80011b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	68b9      	ldr	r1, [r7, #8]
 80011be:	6978      	ldr	r0, [r7, #20]
 80011c0:	f7ff ff90 	bl	80010e4 <NVIC_EncodePriority>
 80011c4:	4602      	mov	r2, r0
 80011c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ca:	4611      	mov	r1, r2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff5f 	bl	8001090 <__NVIC_SetPriority>
}
 80011d2:	bf00      	nop
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ffb2 	bl	800114c <SysTick_Config>
 80011e8:	4603      	mov	r3, r0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80011f8:	f3bf 8f5f 	dmb	sy
}
 80011fc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80011fe:	4b07      	ldr	r3, [pc, #28]	@ (800121c <HAL_MPU_Disable+0x28>)
 8001200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001202:	4a06      	ldr	r2, [pc, #24]	@ (800121c <HAL_MPU_Disable+0x28>)
 8001204:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001208:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800120a:	4b05      	ldr	r3, [pc, #20]	@ (8001220 <HAL_MPU_Disable+0x2c>)
 800120c:	2200      	movs	r2, #0
 800120e:	605a      	str	r2, [r3, #4]
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000ed00 	.word	0xe000ed00
 8001220:	e000ed90 	.word	0xe000ed90

08001224 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800122c:	4a0b      	ldr	r2, [pc, #44]	@ (800125c <HAL_MPU_Enable+0x38>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001236:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <HAL_MPU_Enable+0x3c>)
 8001238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800123a:	4a09      	ldr	r2, [pc, #36]	@ (8001260 <HAL_MPU_Enable+0x3c>)
 800123c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001240:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001242:	f3bf 8f4f 	dsb	sy
}
 8001246:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001248:	f3bf 8f6f 	isb	sy
}
 800124c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000ed90 	.word	0xe000ed90
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	785a      	ldrb	r2, [r3, #1]
 8001270:	4b1b      	ldr	r3, [pc, #108]	@ (80012e0 <HAL_MPU_ConfigRegion+0x7c>)
 8001272:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001274:	4b1a      	ldr	r3, [pc, #104]	@ (80012e0 <HAL_MPU_ConfigRegion+0x7c>)
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	4a19      	ldr	r2, [pc, #100]	@ (80012e0 <HAL_MPU_ConfigRegion+0x7c>)
 800127a:	f023 0301 	bic.w	r3, r3, #1
 800127e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001280:	4a17      	ldr	r2, [pc, #92]	@ (80012e0 <HAL_MPU_ConfigRegion+0x7c>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	7b1b      	ldrb	r3, [r3, #12]
 800128c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	7adb      	ldrb	r3, [r3, #11]
 8001292:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001294:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	7a9b      	ldrb	r3, [r3, #10]
 800129a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800129c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	7b5b      	ldrb	r3, [r3, #13]
 80012a2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80012a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	7b9b      	ldrb	r3, [r3, #14]
 80012aa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80012ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	7bdb      	ldrb	r3, [r3, #15]
 80012b2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	7a5b      	ldrb	r3, [r3, #9]
 80012ba:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	7a1b      	ldrb	r3, [r3, #8]
 80012c2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012c4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	7812      	ldrb	r2, [r2, #0]
 80012ca:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012cc:	4a04      	ldr	r2, [pc, #16]	@ (80012e0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012ce:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012d0:	6113      	str	r3, [r2, #16]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000ed90 	.word	0xe000ed90

080012e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b089      	sub	sp, #36	@ 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80012f2:	4b89      	ldr	r3, [pc, #548]	@ (8001518 <HAL_GPIO_Init+0x234>)
 80012f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012f6:	e194      	b.n	8001622 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	2101      	movs	r1, #1
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	fa01 f303 	lsl.w	r3, r1, r3
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 8186 	beq.w	800161c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	2b01      	cmp	r3, #1
 800131a:	d005      	beq.n	8001328 <HAL_GPIO_Init+0x44>
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 0303 	and.w	r3, r3, #3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d130      	bne.n	800138a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	2203      	movs	r2, #3
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	68da      	ldr	r2, [r3, #12]
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800135e:	2201      	movs	r2, #1
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	091b      	lsrs	r3, r3, #4
 8001374:	f003 0201 	and.w	r2, r3, #1
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	2b03      	cmp	r3, #3
 8001394:	d017      	beq.n	80013c6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	2203      	movs	r2, #3
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4313      	orrs	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d123      	bne.n	800141a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	08da      	lsrs	r2, r3, #3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3208      	adds	r2, #8
 80013da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	220f      	movs	r2, #15
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	691a      	ldr	r2, [r3, #16]
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	08da      	lsrs	r2, r3, #3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3208      	adds	r2, #8
 8001414:	69b9      	ldr	r1, [r7, #24]
 8001416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	2203      	movs	r2, #3
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 0203 	and.w	r2, r3, #3
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 80e0 	beq.w	800161c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145c:	4b2f      	ldr	r3, [pc, #188]	@ (800151c <HAL_GPIO_Init+0x238>)
 800145e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001462:	4a2e      	ldr	r2, [pc, #184]	@ (800151c <HAL_GPIO_Init+0x238>)
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800146c:	4b2b      	ldr	r3, [pc, #172]	@ (800151c <HAL_GPIO_Init+0x238>)
 800146e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800147a:	4a29      	ldr	r2, [pc, #164]	@ (8001520 <HAL_GPIO_Init+0x23c>)
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	089b      	lsrs	r3, r3, #2
 8001480:	3302      	adds	r3, #2
 8001482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f003 0303 	and.w	r3, r3, #3
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	220f      	movs	r2, #15
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a20      	ldr	r2, [pc, #128]	@ (8001524 <HAL_GPIO_Init+0x240>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d052      	beq.n	800154c <HAL_GPIO_Init+0x268>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001528 <HAL_GPIO_Init+0x244>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d031      	beq.n	8001512 <HAL_GPIO_Init+0x22e>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a1e      	ldr	r2, [pc, #120]	@ (800152c <HAL_GPIO_Init+0x248>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d02b      	beq.n	800150e <HAL_GPIO_Init+0x22a>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001530 <HAL_GPIO_Init+0x24c>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d025      	beq.n	800150a <HAL_GPIO_Init+0x226>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001534 <HAL_GPIO_Init+0x250>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d01f      	beq.n	8001506 <HAL_GPIO_Init+0x222>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001538 <HAL_GPIO_Init+0x254>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d019      	beq.n	8001502 <HAL_GPIO_Init+0x21e>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a1a      	ldr	r2, [pc, #104]	@ (800153c <HAL_GPIO_Init+0x258>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d013      	beq.n	80014fe <HAL_GPIO_Init+0x21a>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a19      	ldr	r2, [pc, #100]	@ (8001540 <HAL_GPIO_Init+0x25c>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d00d      	beq.n	80014fa <HAL_GPIO_Init+0x216>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a18      	ldr	r2, [pc, #96]	@ (8001544 <HAL_GPIO_Init+0x260>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d007      	beq.n	80014f6 <HAL_GPIO_Init+0x212>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a17      	ldr	r2, [pc, #92]	@ (8001548 <HAL_GPIO_Init+0x264>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d101      	bne.n	80014f2 <HAL_GPIO_Init+0x20e>
 80014ee:	2309      	movs	r3, #9
 80014f0:	e02d      	b.n	800154e <HAL_GPIO_Init+0x26a>
 80014f2:	230a      	movs	r3, #10
 80014f4:	e02b      	b.n	800154e <HAL_GPIO_Init+0x26a>
 80014f6:	2308      	movs	r3, #8
 80014f8:	e029      	b.n	800154e <HAL_GPIO_Init+0x26a>
 80014fa:	2307      	movs	r3, #7
 80014fc:	e027      	b.n	800154e <HAL_GPIO_Init+0x26a>
 80014fe:	2306      	movs	r3, #6
 8001500:	e025      	b.n	800154e <HAL_GPIO_Init+0x26a>
 8001502:	2305      	movs	r3, #5
 8001504:	e023      	b.n	800154e <HAL_GPIO_Init+0x26a>
 8001506:	2304      	movs	r3, #4
 8001508:	e021      	b.n	800154e <HAL_GPIO_Init+0x26a>
 800150a:	2303      	movs	r3, #3
 800150c:	e01f      	b.n	800154e <HAL_GPIO_Init+0x26a>
 800150e:	2302      	movs	r3, #2
 8001510:	e01d      	b.n	800154e <HAL_GPIO_Init+0x26a>
 8001512:	2301      	movs	r3, #1
 8001514:	e01b      	b.n	800154e <HAL_GPIO_Init+0x26a>
 8001516:	bf00      	nop
 8001518:	58000080 	.word	0x58000080
 800151c:	58024400 	.word	0x58024400
 8001520:	58000400 	.word	0x58000400
 8001524:	58020000 	.word	0x58020000
 8001528:	58020400 	.word	0x58020400
 800152c:	58020800 	.word	0x58020800
 8001530:	58020c00 	.word	0x58020c00
 8001534:	58021000 	.word	0x58021000
 8001538:	58021400 	.word	0x58021400
 800153c:	58021800 	.word	0x58021800
 8001540:	58021c00 	.word	0x58021c00
 8001544:	58022000 	.word	0x58022000
 8001548:	58022400 	.word	0x58022400
 800154c:	2300      	movs	r3, #0
 800154e:	69fa      	ldr	r2, [r7, #28]
 8001550:	f002 0203 	and.w	r2, r2, #3
 8001554:	0092      	lsls	r2, r2, #2
 8001556:	4093      	lsls	r3, r2
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800155e:	4938      	ldr	r1, [pc, #224]	@ (8001640 <HAL_GPIO_Init+0x35c>)
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	089b      	lsrs	r3, r3, #2
 8001564:	3302      	adds	r3, #2
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800156c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	4313      	orrs	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001592:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800159a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80015c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d003      	beq.n	80015ec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	43db      	mvns	r3, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4013      	ands	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	3301      	adds	r3, #1
 8001620:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	fa22 f303 	lsr.w	r3, r2, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	f47f ae63 	bne.w	80012f8 <HAL_GPIO_Init+0x14>
  }
}
 8001632:	bf00      	nop
 8001634:	bf00      	nop
 8001636:	3724      	adds	r7, #36	@ 0x24
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	58000400 	.word	0x58000400

08001644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	807b      	strh	r3, [r7, #2]
 8001650:	4613      	mov	r3, r2
 8001652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001654:	787b      	ldrb	r3, [r7, #1]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800165a:	887a      	ldrh	r2, [r7, #2]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001660:	e003      	b.n	800166a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001662:	887b      	ldrh	r3, [r7, #2]
 8001664:	041a      	lsls	r2, r3, #16
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	619a      	str	r2, [r3, #24]
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001680:	4a08      	ldr	r2, [pc, #32]	@ (80016a4 <HAL_HSEM_FastTake+0x2c>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3320      	adds	r3, #32
 8001686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168a:	4a07      	ldr	r2, [pc, #28]	@ (80016a8 <HAL_HSEM_FastTake+0x30>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d101      	bne.n	8001694 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	e000      	b.n	8001696 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
}
 8001696:	4618      	mov	r0, r3
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	58026400 	.word	0x58026400
 80016a8:	80000300 	.word	0x80000300

080016ac <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80016b6:	4906      	ldr	r1, [pc, #24]	@ (80016d0 <HAL_HSEM_Release+0x24>)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	58026400 	.word	0x58026400

080016d4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80016dc:	4b29      	ldr	r3, [pc, #164]	@ (8001784 <HAL_PWREx_ConfigSupply+0xb0>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	2b06      	cmp	r3, #6
 80016e6:	d00a      	beq.n	80016fe <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80016e8:	4b26      	ldr	r3, [pc, #152]	@ (8001784 <HAL_PWREx_ConfigSupply+0xb0>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d001      	beq.n	80016fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e040      	b.n	800177c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	e03e      	b.n	800177c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80016fe:	4b21      	ldr	r3, [pc, #132]	@ (8001784 <HAL_PWREx_ConfigSupply+0xb0>)
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001706:	491f      	ldr	r1, [pc, #124]	@ (8001784 <HAL_PWREx_ConfigSupply+0xb0>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4313      	orrs	r3, r2
 800170c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800170e:	f7ff fc75 	bl	8000ffc <HAL_GetTick>
 8001712:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001714:	e009      	b.n	800172a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001716:	f7ff fc71 	bl	8000ffc <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001724:	d901      	bls.n	800172a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e028      	b.n	800177c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800172a:	4b16      	ldr	r3, [pc, #88]	@ (8001784 <HAL_PWREx_ConfigSupply+0xb0>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001732:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001736:	d1ee      	bne.n	8001716 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b1e      	cmp	r3, #30
 800173c:	d008      	beq.n	8001750 <HAL_PWREx_ConfigSupply+0x7c>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b2e      	cmp	r3, #46	@ 0x2e
 8001742:	d005      	beq.n	8001750 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b1d      	cmp	r3, #29
 8001748:	d002      	beq.n	8001750 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b2d      	cmp	r3, #45	@ 0x2d
 800174e:	d114      	bne.n	800177a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001750:	f7ff fc54 	bl	8000ffc <HAL_GetTick>
 8001754:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001756:	e009      	b.n	800176c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001758:	f7ff fc50 	bl	8000ffc <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001766:	d901      	bls.n	800176c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e007      	b.n	800177c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800176c:	4b05      	ldr	r3, [pc, #20]	@ (8001784 <HAL_PWREx_ConfigSupply+0xb0>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001778:	d1ee      	bne.n	8001758 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	58024800 	.word	0x58024800

08001788 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08c      	sub	sp, #48	@ 0x30
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d102      	bne.n	800179c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	f000 bc48 	b.w	800202c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 8088 	beq.w	80018ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017aa:	4b99      	ldr	r3, [pc, #612]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80017b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017b4:	4b96      	ldr	r3, [pc, #600]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 80017b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80017ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017bc:	2b10      	cmp	r3, #16
 80017be:	d007      	beq.n	80017d0 <HAL_RCC_OscConfig+0x48>
 80017c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017c2:	2b18      	cmp	r3, #24
 80017c4:	d111      	bne.n	80017ea <HAL_RCC_OscConfig+0x62>
 80017c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d10c      	bne.n	80017ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d0:	4b8f      	ldr	r3, [pc, #572]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d06d      	beq.n	80018b8 <HAL_RCC_OscConfig+0x130>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d169      	bne.n	80018b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	f000 bc21 	b.w	800202c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017f2:	d106      	bne.n	8001802 <HAL_RCC_OscConfig+0x7a>
 80017f4:	4b86      	ldr	r3, [pc, #536]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a85      	ldr	r2, [pc, #532]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 80017fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	e02e      	b.n	8001860 <HAL_RCC_OscConfig+0xd8>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10c      	bne.n	8001824 <HAL_RCC_OscConfig+0x9c>
 800180a:	4b81      	ldr	r3, [pc, #516]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a80      	ldr	r2, [pc, #512]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001810:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	4b7e      	ldr	r3, [pc, #504]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a7d      	ldr	r2, [pc, #500]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 800181c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	e01d      	b.n	8001860 <HAL_RCC_OscConfig+0xd8>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800182c:	d10c      	bne.n	8001848 <HAL_RCC_OscConfig+0xc0>
 800182e:	4b78      	ldr	r3, [pc, #480]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a77      	ldr	r2, [pc, #476]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001834:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	4b75      	ldr	r3, [pc, #468]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a74      	ldr	r2, [pc, #464]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001840:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	e00b      	b.n	8001860 <HAL_RCC_OscConfig+0xd8>
 8001848:	4b71      	ldr	r3, [pc, #452]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a70      	ldr	r2, [pc, #448]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 800184e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	4b6e      	ldr	r3, [pc, #440]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a6d      	ldr	r2, [pc, #436]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 800185a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800185e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d013      	beq.n	8001890 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001868:	f7ff fbc8 	bl	8000ffc <HAL_GetTick>
 800186c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001870:	f7ff fbc4 	bl	8000ffc <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b64      	cmp	r3, #100	@ 0x64
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e3d4      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001882:	4b63      	ldr	r3, [pc, #396]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0f0      	beq.n	8001870 <HAL_RCC_OscConfig+0xe8>
 800188e:	e014      	b.n	80018ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001890:	f7ff fbb4 	bl	8000ffc <HAL_GetTick>
 8001894:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001898:	f7ff fbb0 	bl	8000ffc <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b64      	cmp	r3, #100	@ 0x64
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e3c0      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018aa:	4b59      	ldr	r3, [pc, #356]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f0      	bne.n	8001898 <HAL_RCC_OscConfig+0x110>
 80018b6:	e000      	b.n	80018ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 80ca 	beq.w	8001a5c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018c8:	4b51      	ldr	r3, [pc, #324]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018d0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018d2:	4b4f      	ldr	r3, [pc, #316]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 80018d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80018d8:	6a3b      	ldr	r3, [r7, #32]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d007      	beq.n	80018ee <HAL_RCC_OscConfig+0x166>
 80018de:	6a3b      	ldr	r3, [r7, #32]
 80018e0:	2b18      	cmp	r3, #24
 80018e2:	d156      	bne.n	8001992 <HAL_RCC_OscConfig+0x20a>
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d151      	bne.n	8001992 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018ee:	4b48      	ldr	r3, [pc, #288]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0304 	and.w	r3, r3, #4
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d005      	beq.n	8001906 <HAL_RCC_OscConfig+0x17e>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e392      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001906:	4b42      	ldr	r3, [pc, #264]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f023 0219 	bic.w	r2, r3, #25
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	493f      	ldr	r1, [pc, #252]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001914:	4313      	orrs	r3, r2
 8001916:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001918:	f7ff fb70 	bl	8000ffc <HAL_GetTick>
 800191c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001920:	f7ff fb6c 	bl	8000ffc <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e37c      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001932:	4b37      	ldr	r3, [pc, #220]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193e:	f7ff fb69 	bl	8001014 <HAL_GetREVID>
 8001942:	4603      	mov	r3, r0
 8001944:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001948:	4293      	cmp	r3, r2
 800194a:	d817      	bhi.n	800197c <HAL_RCC_OscConfig+0x1f4>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	2b40      	cmp	r3, #64	@ 0x40
 8001952:	d108      	bne.n	8001966 <HAL_RCC_OscConfig+0x1de>
 8001954:	4b2e      	ldr	r3, [pc, #184]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800195c:	4a2c      	ldr	r2, [pc, #176]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 800195e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001962:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001964:	e07a      	b.n	8001a5c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001966:	4b2a      	ldr	r3, [pc, #168]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	031b      	lsls	r3, r3, #12
 8001974:	4926      	ldr	r1, [pc, #152]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001976:	4313      	orrs	r3, r2
 8001978:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800197a:	e06f      	b.n	8001a5c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197c:	4b24      	ldr	r3, [pc, #144]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	061b      	lsls	r3, r3, #24
 800198a:	4921      	ldr	r1, [pc, #132]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 800198c:	4313      	orrs	r3, r2
 800198e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001990:	e064      	b.n	8001a5c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d047      	beq.n	8001a2a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800199a:	4b1d      	ldr	r3, [pc, #116]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f023 0219 	bic.w	r2, r3, #25
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	491a      	ldr	r1, [pc, #104]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ac:	f7ff fb26 	bl	8000ffc <HAL_GetTick>
 80019b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b4:	f7ff fb22 	bl	8000ffc <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e332      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019c6:	4b12      	ldr	r3, [pc, #72]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d0f0      	beq.n	80019b4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d2:	f7ff fb1f 	bl	8001014 <HAL_GetREVID>
 80019d6:	4603      	mov	r3, r0
 80019d8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80019dc:	4293      	cmp	r3, r2
 80019de:	d819      	bhi.n	8001a14 <HAL_RCC_OscConfig+0x28c>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	2b40      	cmp	r3, #64	@ 0x40
 80019e6:	d108      	bne.n	80019fa <HAL_RCC_OscConfig+0x272>
 80019e8:	4b09      	ldr	r3, [pc, #36]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80019f0:	4a07      	ldr	r2, [pc, #28]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 80019f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019f6:	6053      	str	r3, [r2, #4]
 80019f8:	e030      	b.n	8001a5c <HAL_RCC_OscConfig+0x2d4>
 80019fa:	4b05      	ldr	r3, [pc, #20]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	031b      	lsls	r3, r3, #12
 8001a08:	4901      	ldr	r1, [pc, #4]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	604b      	str	r3, [r1, #4]
 8001a0e:	e025      	b.n	8001a5c <HAL_RCC_OscConfig+0x2d4>
 8001a10:	58024400 	.word	0x58024400
 8001a14:	4b9a      	ldr	r3, [pc, #616]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	061b      	lsls	r3, r3, #24
 8001a22:	4997      	ldr	r1, [pc, #604]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
 8001a28:	e018      	b.n	8001a5c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a2a:	4b95      	ldr	r3, [pc, #596]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a94      	ldr	r2, [pc, #592]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001a30:	f023 0301 	bic.w	r3, r3, #1
 8001a34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a36:	f7ff fae1 	bl	8000ffc <HAL_GetTick>
 8001a3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a3e:	f7ff fadd 	bl	8000ffc <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e2ed      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a50:	4b8b      	ldr	r3, [pc, #556]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1f0      	bne.n	8001a3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0310 	and.w	r3, r3, #16
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 80a9 	beq.w	8001bbc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a6a:	4b85      	ldr	r3, [pc, #532]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a72:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a74:	4b82      	ldr	r3, [pc, #520]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a78:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d007      	beq.n	8001a90 <HAL_RCC_OscConfig+0x308>
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	2b18      	cmp	r3, #24
 8001a84:	d13a      	bne.n	8001afc <HAL_RCC_OscConfig+0x374>
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d135      	bne.n	8001afc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a90:	4b7b      	ldr	r3, [pc, #492]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x320>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	2b80      	cmp	r3, #128	@ 0x80
 8001aa2:	d001      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e2c1      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001aa8:	f7ff fab4 	bl	8001014 <HAL_GetREVID>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d817      	bhi.n	8001ae6 <HAL_RCC_OscConfig+0x35e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	2b20      	cmp	r3, #32
 8001abc:	d108      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x348>
 8001abe:	4b70      	ldr	r3, [pc, #448]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001ac6:	4a6e      	ldr	r2, [pc, #440]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001ac8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001acc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ace:	e075      	b.n	8001bbc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ad0:	4b6b      	ldr	r3, [pc, #428]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	069b      	lsls	r3, r3, #26
 8001ade:	4968      	ldr	r1, [pc, #416]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ae4:	e06a      	b.n	8001bbc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ae6:	4b66      	ldr	r3, [pc, #408]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	061b      	lsls	r3, r3, #24
 8001af4:	4962      	ldr	r1, [pc, #392]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001afa:	e05f      	b.n	8001bbc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d042      	beq.n	8001b8a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001b04:	4b5e      	ldr	r3, [pc, #376]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a5d      	ldr	r2, [pc, #372]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001b0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b10:	f7ff fa74 	bl	8000ffc <HAL_GetTick>
 8001b14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001b18:	f7ff fa70 	bl	8000ffc <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e280      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b2a:	4b55      	ldr	r3, [pc, #340]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0f0      	beq.n	8001b18 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b36:	f7ff fa6d 	bl	8001014 <HAL_GetREVID>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d817      	bhi.n	8001b74 <HAL_RCC_OscConfig+0x3ec>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	2b20      	cmp	r3, #32
 8001b4a:	d108      	bne.n	8001b5e <HAL_RCC_OscConfig+0x3d6>
 8001b4c:	4b4c      	ldr	r3, [pc, #304]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001b54:	4a4a      	ldr	r2, [pc, #296]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001b56:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001b5a:	6053      	str	r3, [r2, #4]
 8001b5c:	e02e      	b.n	8001bbc <HAL_RCC_OscConfig+0x434>
 8001b5e:	4b48      	ldr	r3, [pc, #288]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a1b      	ldr	r3, [r3, #32]
 8001b6a:	069b      	lsls	r3, r3, #26
 8001b6c:	4944      	ldr	r1, [pc, #272]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	604b      	str	r3, [r1, #4]
 8001b72:	e023      	b.n	8001bbc <HAL_RCC_OscConfig+0x434>
 8001b74:	4b42      	ldr	r3, [pc, #264]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	061b      	lsls	r3, r3, #24
 8001b82:	493f      	ldr	r1, [pc, #252]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	60cb      	str	r3, [r1, #12]
 8001b88:	e018      	b.n	8001bbc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001b8a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a3c      	ldr	r2, [pc, #240]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001b90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001b94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b96:	f7ff fa31 	bl	8000ffc <HAL_GetTick>
 8001b9a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001b9e:	f7ff fa2d 	bl	8000ffc <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e23d      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001bb0:	4b33      	ldr	r3, [pc, #204]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1f0      	bne.n	8001b9e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d036      	beq.n	8001c36 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d019      	beq.n	8001c04 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bd0:	4b2b      	ldr	r3, [pc, #172]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001bd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bd4:	4a2a      	ldr	r2, [pc, #168]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bdc:	f7ff fa0e 	bl	8000ffc <HAL_GetTick>
 8001be0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be4:	f7ff fa0a 	bl	8000ffc <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e21a      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bf6:	4b22      	ldr	r3, [pc, #136]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001bf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f0      	beq.n	8001be4 <HAL_RCC_OscConfig+0x45c>
 8001c02:	e018      	b.n	8001c36 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c04:	4b1e      	ldr	r3, [pc, #120]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001c06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c08:	4a1d      	ldr	r2, [pc, #116]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001c0a:	f023 0301 	bic.w	r3, r3, #1
 8001c0e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c10:	f7ff f9f4 	bl	8000ffc <HAL_GetTick>
 8001c14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c18:	f7ff f9f0 	bl	8000ffc <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e200      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c2a:	4b15      	ldr	r3, [pc, #84]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001c2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f0      	bne.n	8001c18 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0320 	and.w	r3, r3, #32
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d039      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d01c      	beq.n	8001c84 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a0c      	ldr	r2, [pc, #48]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001c50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c54:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c56:	f7ff f9d1 	bl	8000ffc <HAL_GetTick>
 8001c5a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c5e:	f7ff f9cd 	bl	8000ffc <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e1dd      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c70:	4b03      	ldr	r3, [pc, #12]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x4d6>
 8001c7c:	e01b      	b.n	8001cb6 <HAL_RCC_OscConfig+0x52e>
 8001c7e:	bf00      	nop
 8001c80:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c84:	4b9b      	ldr	r3, [pc, #620]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a9a      	ldr	r2, [pc, #616]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001c8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001c8e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c90:	f7ff f9b4 	bl	8000ffc <HAL_GetTick>
 8001c94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c98:	f7ff f9b0 	bl	8000ffc <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e1c0      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001caa:	4b92      	ldr	r3, [pc, #584]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 8081 	beq.w	8001dc6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001cc4:	4b8c      	ldr	r3, [pc, #560]	@ (8001ef8 <HAL_RCC_OscConfig+0x770>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a8b      	ldr	r2, [pc, #556]	@ (8001ef8 <HAL_RCC_OscConfig+0x770>)
 8001cca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cd0:	f7ff f994 	bl	8000ffc <HAL_GetTick>
 8001cd4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd8:	f7ff f990 	bl	8000ffc <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b64      	cmp	r3, #100	@ 0x64
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e1a0      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cea:	4b83      	ldr	r3, [pc, #524]	@ (8001ef8 <HAL_RCC_OscConfig+0x770>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f0      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d106      	bne.n	8001d0c <HAL_RCC_OscConfig+0x584>
 8001cfe:	4b7d      	ldr	r3, [pc, #500]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d02:	4a7c      	ldr	r2, [pc, #496]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d0a:	e02d      	b.n	8001d68 <HAL_RCC_OscConfig+0x5e0>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d10c      	bne.n	8001d2e <HAL_RCC_OscConfig+0x5a6>
 8001d14:	4b77      	ldr	r3, [pc, #476]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d18:	4a76      	ldr	r2, [pc, #472]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001d1a:	f023 0301 	bic.w	r3, r3, #1
 8001d1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d20:	4b74      	ldr	r3, [pc, #464]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d24:	4a73      	ldr	r2, [pc, #460]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001d26:	f023 0304 	bic.w	r3, r3, #4
 8001d2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d2c:	e01c      	b.n	8001d68 <HAL_RCC_OscConfig+0x5e0>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	2b05      	cmp	r3, #5
 8001d34:	d10c      	bne.n	8001d50 <HAL_RCC_OscConfig+0x5c8>
 8001d36:	4b6f      	ldr	r3, [pc, #444]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d3a:	4a6e      	ldr	r2, [pc, #440]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001d3c:	f043 0304 	orr.w	r3, r3, #4
 8001d40:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d42:	4b6c      	ldr	r3, [pc, #432]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d46:	4a6b      	ldr	r2, [pc, #428]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d4e:	e00b      	b.n	8001d68 <HAL_RCC_OscConfig+0x5e0>
 8001d50:	4b68      	ldr	r3, [pc, #416]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d54:	4a67      	ldr	r2, [pc, #412]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001d56:	f023 0301 	bic.w	r3, r3, #1
 8001d5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d5c:	4b65      	ldr	r3, [pc, #404]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d60:	4a64      	ldr	r2, [pc, #400]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001d62:	f023 0304 	bic.w	r3, r3, #4
 8001d66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d015      	beq.n	8001d9c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d70:	f7ff f944 	bl	8000ffc <HAL_GetTick>
 8001d74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d76:	e00a      	b.n	8001d8e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d78:	f7ff f940 	bl	8000ffc <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e14e      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d8e:	4b59      	ldr	r3, [pc, #356]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0ee      	beq.n	8001d78 <HAL_RCC_OscConfig+0x5f0>
 8001d9a:	e014      	b.n	8001dc6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d9c:	f7ff f92e 	bl	8000ffc <HAL_GetTick>
 8001da0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001da2:	e00a      	b.n	8001dba <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da4:	f7ff f92a 	bl	8000ffc <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e138      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dba:	4b4e      	ldr	r3, [pc, #312]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1ee      	bne.n	8001da4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 812d 	beq.w	800202a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001dd0:	4b48      	ldr	r3, [pc, #288]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001dd8:	2b18      	cmp	r3, #24
 8001dda:	f000 80bd 	beq.w	8001f58 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	f040 809e 	bne.w	8001f24 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de8:	4b42      	ldr	r3, [pc, #264]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a41      	ldr	r2, [pc, #260]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001dee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df4:	f7ff f902 	bl	8000ffc <HAL_GetTick>
 8001df8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfc:	f7ff f8fe 	bl	8000ffc <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e10e      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e0e:	4b39      	ldr	r3, [pc, #228]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e1a:	4b36      	ldr	r3, [pc, #216]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001e1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e1e:	4b37      	ldr	r3, [pc, #220]	@ (8001efc <HAL_RCC_OscConfig+0x774>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001e2a:	0112      	lsls	r2, r2, #4
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	4931      	ldr	r1, [pc, #196]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	628b      	str	r3, [r1, #40]	@ 0x28
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e42:	3b01      	subs	r3, #1
 8001e44:	025b      	lsls	r3, r3, #9
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	041b      	lsls	r3, r3, #16
 8001e52:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	061b      	lsls	r3, r3, #24
 8001e60:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001e64:	4923      	ldr	r1, [pc, #140]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001e6a:	4b22      	ldr	r3, [pc, #136]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e6e:	4a21      	ldr	r2, [pc, #132]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001e70:	f023 0301 	bic.w	r3, r3, #1
 8001e74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e76:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001e78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e7a:	4b21      	ldr	r3, [pc, #132]	@ (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e82:	00d2      	lsls	r2, r2, #3
 8001e84:	491b      	ldr	r1, [pc, #108]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e8e:	f023 020c 	bic.w	r2, r3, #12
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	4917      	ldr	r1, [pc, #92]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001e9c:	4b15      	ldr	r3, [pc, #84]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea0:	f023 0202 	bic.w	r2, r3, #2
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea8:	4912      	ldr	r1, [pc, #72]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001eae:	4b11      	ldr	r3, [pc, #68]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb2:	4a10      	ldr	r2, [pc, #64]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001eb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001eba:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ebe:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001ec0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ec4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eca:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001ecc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ed0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001ed2:	4b08      	ldr	r3, [pc, #32]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed6:	4a07      	ldr	r2, [pc, #28]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ede:	4b05      	ldr	r3, [pc, #20]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a04      	ldr	r2, [pc, #16]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001ee4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eea:	f7ff f887 	bl	8000ffc <HAL_GetTick>
 8001eee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ef0:	e011      	b.n	8001f16 <HAL_RCC_OscConfig+0x78e>
 8001ef2:	bf00      	nop
 8001ef4:	58024400 	.word	0x58024400
 8001ef8:	58024800 	.word	0x58024800
 8001efc:	fffffc0c 	.word	0xfffffc0c
 8001f00:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f04:	f7ff f87a 	bl	8000ffc <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e08a      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f16:	4b47      	ldr	r3, [pc, #284]	@ (8002034 <HAL_RCC_OscConfig+0x8ac>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0x77c>
 8001f22:	e082      	b.n	800202a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f24:	4b43      	ldr	r3, [pc, #268]	@ (8002034 <HAL_RCC_OscConfig+0x8ac>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a42      	ldr	r2, [pc, #264]	@ (8002034 <HAL_RCC_OscConfig+0x8ac>)
 8001f2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f30:	f7ff f864 	bl	8000ffc <HAL_GetTick>
 8001f34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f38:	f7ff f860 	bl	8000ffc <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e070      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f4a:	4b3a      	ldr	r3, [pc, #232]	@ (8002034 <HAL_RCC_OscConfig+0x8ac>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_OscConfig+0x7b0>
 8001f56:	e068      	b.n	800202a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f58:	4b36      	ldr	r3, [pc, #216]	@ (8002034 <HAL_RCC_OscConfig+0x8ac>)
 8001f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f5e:	4b35      	ldr	r3, [pc, #212]	@ (8002034 <HAL_RCC_OscConfig+0x8ac>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f62:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d031      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	f003 0203 	and.w	r2, r3, #3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d12a      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	091b      	lsrs	r3, r3, #4
 8001f7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d122      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f94:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d11a      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	0a5b      	lsrs	r3, r3, #9
 8001f9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fa6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d111      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	0c1b      	lsrs	r3, r3, #16
 8001fb0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fb8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d108      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	0e1b      	lsrs	r3, r3, #24
 8001fc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fca:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e02b      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001fd4:	4b17      	ldr	r3, [pc, #92]	@ (8002034 <HAL_RCC_OscConfig+0x8ac>)
 8001fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fd8:	08db      	lsrs	r3, r3, #3
 8001fda:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001fde:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d01f      	beq.n	800202a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001fea:	4b12      	ldr	r3, [pc, #72]	@ (8002034 <HAL_RCC_OscConfig+0x8ac>)
 8001fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fee:	4a11      	ldr	r2, [pc, #68]	@ (8002034 <HAL_RCC_OscConfig+0x8ac>)
 8001ff0:	f023 0301 	bic.w	r3, r3, #1
 8001ff4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ff6:	f7ff f801 	bl	8000ffc <HAL_GetTick>
 8001ffa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001ffc:	bf00      	nop
 8001ffe:	f7fe fffd 	bl	8000ffc <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002006:	4293      	cmp	r3, r2
 8002008:	d0f9      	beq.n	8001ffe <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800200a:	4b0a      	ldr	r3, [pc, #40]	@ (8002034 <HAL_RCC_OscConfig+0x8ac>)
 800200c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800200e:	4b0a      	ldr	r3, [pc, #40]	@ (8002038 <HAL_RCC_OscConfig+0x8b0>)
 8002010:	4013      	ands	r3, r2
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002016:	00d2      	lsls	r2, r2, #3
 8002018:	4906      	ldr	r1, [pc, #24]	@ (8002034 <HAL_RCC_OscConfig+0x8ac>)
 800201a:	4313      	orrs	r3, r2
 800201c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800201e:	4b05      	ldr	r3, [pc, #20]	@ (8002034 <HAL_RCC_OscConfig+0x8ac>)
 8002020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002022:	4a04      	ldr	r2, [pc, #16]	@ (8002034 <HAL_RCC_OscConfig+0x8ac>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3730      	adds	r7, #48	@ 0x30
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	58024400 	.word	0x58024400
 8002038:	ffff0007 	.word	0xffff0007

0800203c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e19c      	b.n	800238a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002050:	4b8a      	ldr	r3, [pc, #552]	@ (800227c <HAL_RCC_ClockConfig+0x240>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	429a      	cmp	r2, r3
 800205c:	d910      	bls.n	8002080 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205e:	4b87      	ldr	r3, [pc, #540]	@ (800227c <HAL_RCC_ClockConfig+0x240>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f023 020f 	bic.w	r2, r3, #15
 8002066:	4985      	ldr	r1, [pc, #532]	@ (800227c <HAL_RCC_ClockConfig+0x240>)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	4313      	orrs	r3, r2
 800206c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800206e:	4b83      	ldr	r3, [pc, #524]	@ (800227c <HAL_RCC_ClockConfig+0x240>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	429a      	cmp	r2, r3
 800207a:	d001      	beq.n	8002080 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e184      	b.n	800238a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d010      	beq.n	80020ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	4b7b      	ldr	r3, [pc, #492]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002098:	429a      	cmp	r2, r3
 800209a:	d908      	bls.n	80020ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800209c:	4b78      	ldr	r3, [pc, #480]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	4975      	ldr	r1, [pc, #468]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d010      	beq.n	80020dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695a      	ldr	r2, [r3, #20]
 80020be:	4b70      	ldr	r3, [pc, #448]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d908      	bls.n	80020dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020ca:	4b6d      	ldr	r3, [pc, #436]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	496a      	ldr	r1, [pc, #424]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0310 	and.w	r3, r3, #16
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d010      	beq.n	800210a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	699a      	ldr	r2, [r3, #24]
 80020ec:	4b64      	ldr	r3, [pc, #400]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d908      	bls.n	800210a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80020f8:	4b61      	ldr	r3, [pc, #388]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	495e      	ldr	r1, [pc, #376]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 8002106:	4313      	orrs	r3, r2
 8002108:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0320 	and.w	r3, r3, #32
 8002112:	2b00      	cmp	r3, #0
 8002114:	d010      	beq.n	8002138 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69da      	ldr	r2, [r3, #28]
 800211a:	4b59      	ldr	r3, [pc, #356]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002122:	429a      	cmp	r2, r3
 8002124:	d908      	bls.n	8002138 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002126:	4b56      	ldr	r3, [pc, #344]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	4953      	ldr	r1, [pc, #332]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 8002134:	4313      	orrs	r3, r2
 8002136:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d010      	beq.n	8002166 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	4b4d      	ldr	r3, [pc, #308]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	f003 030f 	and.w	r3, r3, #15
 8002150:	429a      	cmp	r2, r3
 8002152:	d908      	bls.n	8002166 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002154:	4b4a      	ldr	r3, [pc, #296]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	f023 020f 	bic.w	r2, r3, #15
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4947      	ldr	r1, [pc, #284]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 8002162:	4313      	orrs	r3, r2
 8002164:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d055      	beq.n	800221e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002172:	4b43      	ldr	r3, [pc, #268]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	4940      	ldr	r1, [pc, #256]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 8002180:	4313      	orrs	r3, r2
 8002182:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b02      	cmp	r3, #2
 800218a:	d107      	bne.n	800219c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800218c:	4b3c      	ldr	r3, [pc, #240]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d121      	bne.n	80021dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e0f6      	b.n	800238a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b03      	cmp	r3, #3
 80021a2:	d107      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021a4:	4b36      	ldr	r3, [pc, #216]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d115      	bne.n	80021dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0ea      	b.n	800238a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d107      	bne.n	80021cc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021bc:	4b30      	ldr	r3, [pc, #192]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d109      	bne.n	80021dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0de      	b.n	800238a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021cc:	4b2c      	ldr	r3, [pc, #176]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e0d6      	b.n	800238a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021dc:	4b28      	ldr	r3, [pc, #160]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	f023 0207 	bic.w	r2, r3, #7
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	4925      	ldr	r1, [pc, #148]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021ee:	f7fe ff05 	bl	8000ffc <HAL_GetTick>
 80021f2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f4:	e00a      	b.n	800220c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f6:	f7fe ff01 	bl	8000ffc <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002204:	4293      	cmp	r3, r2
 8002206:	d901      	bls.n	800220c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e0be      	b.n	800238a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220c:	4b1c      	ldr	r3, [pc, #112]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	429a      	cmp	r2, r3
 800221c:	d1eb      	bne.n	80021f6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d010      	beq.n	800224c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	4b14      	ldr	r3, [pc, #80]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	429a      	cmp	r2, r3
 8002238:	d208      	bcs.n	800224c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800223a:	4b11      	ldr	r3, [pc, #68]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	f023 020f 	bic.w	r2, r3, #15
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	490e      	ldr	r1, [pc, #56]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 8002248:	4313      	orrs	r3, r2
 800224a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800224c:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <HAL_RCC_ClockConfig+0x240>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 030f 	and.w	r3, r3, #15
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d214      	bcs.n	8002284 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225a:	4b08      	ldr	r3, [pc, #32]	@ (800227c <HAL_RCC_ClockConfig+0x240>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f023 020f 	bic.w	r2, r3, #15
 8002262:	4906      	ldr	r1, [pc, #24]	@ (800227c <HAL_RCC_ClockConfig+0x240>)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	4313      	orrs	r3, r2
 8002268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800226a:	4b04      	ldr	r3, [pc, #16]	@ (800227c <HAL_RCC_ClockConfig+0x240>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d005      	beq.n	8002284 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e086      	b.n	800238a <HAL_RCC_ClockConfig+0x34e>
 800227c:	52002000 	.word	0x52002000
 8002280:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	d010      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	4b3f      	ldr	r3, [pc, #252]	@ (8002394 <HAL_RCC_ClockConfig+0x358>)
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800229c:	429a      	cmp	r2, r3
 800229e:	d208      	bcs.n	80022b2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022a0:	4b3c      	ldr	r3, [pc, #240]	@ (8002394 <HAL_RCC_ClockConfig+0x358>)
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	4939      	ldr	r1, [pc, #228]	@ (8002394 <HAL_RCC_ClockConfig+0x358>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d010      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695a      	ldr	r2, [r3, #20]
 80022c2:	4b34      	ldr	r3, [pc, #208]	@ (8002394 <HAL_RCC_ClockConfig+0x358>)
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d208      	bcs.n	80022e0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022ce:	4b31      	ldr	r3, [pc, #196]	@ (8002394 <HAL_RCC_ClockConfig+0x358>)
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	492e      	ldr	r1, [pc, #184]	@ (8002394 <HAL_RCC_ClockConfig+0x358>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0310 	and.w	r3, r3, #16
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d010      	beq.n	800230e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	699a      	ldr	r2, [r3, #24]
 80022f0:	4b28      	ldr	r3, [pc, #160]	@ (8002394 <HAL_RCC_ClockConfig+0x358>)
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d208      	bcs.n	800230e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80022fc:	4b25      	ldr	r3, [pc, #148]	@ (8002394 <HAL_RCC_ClockConfig+0x358>)
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	4922      	ldr	r1, [pc, #136]	@ (8002394 <HAL_RCC_ClockConfig+0x358>)
 800230a:	4313      	orrs	r3, r2
 800230c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0320 	and.w	r3, r3, #32
 8002316:	2b00      	cmp	r3, #0
 8002318:	d010      	beq.n	800233c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69da      	ldr	r2, [r3, #28]
 800231e:	4b1d      	ldr	r3, [pc, #116]	@ (8002394 <HAL_RCC_ClockConfig+0x358>)
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002326:	429a      	cmp	r2, r3
 8002328:	d208      	bcs.n	800233c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800232a:	4b1a      	ldr	r3, [pc, #104]	@ (8002394 <HAL_RCC_ClockConfig+0x358>)
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	4917      	ldr	r1, [pc, #92]	@ (8002394 <HAL_RCC_ClockConfig+0x358>)
 8002338:	4313      	orrs	r3, r2
 800233a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800233c:	f000 f834 	bl	80023a8 <HAL_RCC_GetSysClockFreq>
 8002340:	4602      	mov	r2, r0
 8002342:	4b14      	ldr	r3, [pc, #80]	@ (8002394 <HAL_RCC_ClockConfig+0x358>)
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	0a1b      	lsrs	r3, r3, #8
 8002348:	f003 030f 	and.w	r3, r3, #15
 800234c:	4912      	ldr	r1, [pc, #72]	@ (8002398 <HAL_RCC_ClockConfig+0x35c>)
 800234e:	5ccb      	ldrb	r3, [r1, r3]
 8002350:	f003 031f 	and.w	r3, r3, #31
 8002354:	fa22 f303 	lsr.w	r3, r2, r3
 8002358:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800235a:	4b0e      	ldr	r3, [pc, #56]	@ (8002394 <HAL_RCC_ClockConfig+0x358>)
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	4a0d      	ldr	r2, [pc, #52]	@ (8002398 <HAL_RCC_ClockConfig+0x35c>)
 8002364:	5cd3      	ldrb	r3, [r2, r3]
 8002366:	f003 031f 	and.w	r3, r3, #31
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	fa22 f303 	lsr.w	r3, r2, r3
 8002370:	4a0a      	ldr	r2, [pc, #40]	@ (800239c <HAL_RCC_ClockConfig+0x360>)
 8002372:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002374:	4a0a      	ldr	r2, [pc, #40]	@ (80023a0 <HAL_RCC_ClockConfig+0x364>)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800237a:	4b0a      	ldr	r3, [pc, #40]	@ (80023a4 <HAL_RCC_ClockConfig+0x368>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe fdf2 	bl	8000f68 <HAL_InitTick>
 8002384:	4603      	mov	r3, r0
 8002386:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002388:	7bfb      	ldrb	r3, [r7, #15]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	58024400 	.word	0x58024400
 8002398:	08006684 	.word	0x08006684
 800239c:	24000004 	.word	0x24000004
 80023a0:	24000000 	.word	0x24000000
 80023a4:	24000008 	.word	0x24000008

080023a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b089      	sub	sp, #36	@ 0x24
 80023ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023ae:	4bb3      	ldr	r3, [pc, #716]	@ (800267c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023b6:	2b18      	cmp	r3, #24
 80023b8:	f200 8155 	bhi.w	8002666 <HAL_RCC_GetSysClockFreq+0x2be>
 80023bc:	a201      	add	r2, pc, #4	@ (adr r2, 80023c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80023be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c2:	bf00      	nop
 80023c4:	08002429 	.word	0x08002429
 80023c8:	08002667 	.word	0x08002667
 80023cc:	08002667 	.word	0x08002667
 80023d0:	08002667 	.word	0x08002667
 80023d4:	08002667 	.word	0x08002667
 80023d8:	08002667 	.word	0x08002667
 80023dc:	08002667 	.word	0x08002667
 80023e0:	08002667 	.word	0x08002667
 80023e4:	0800244f 	.word	0x0800244f
 80023e8:	08002667 	.word	0x08002667
 80023ec:	08002667 	.word	0x08002667
 80023f0:	08002667 	.word	0x08002667
 80023f4:	08002667 	.word	0x08002667
 80023f8:	08002667 	.word	0x08002667
 80023fc:	08002667 	.word	0x08002667
 8002400:	08002667 	.word	0x08002667
 8002404:	08002455 	.word	0x08002455
 8002408:	08002667 	.word	0x08002667
 800240c:	08002667 	.word	0x08002667
 8002410:	08002667 	.word	0x08002667
 8002414:	08002667 	.word	0x08002667
 8002418:	08002667 	.word	0x08002667
 800241c:	08002667 	.word	0x08002667
 8002420:	08002667 	.word	0x08002667
 8002424:	0800245b 	.word	0x0800245b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002428:	4b94      	ldr	r3, [pc, #592]	@ (800267c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0320 	and.w	r3, r3, #32
 8002430:	2b00      	cmp	r3, #0
 8002432:	d009      	beq.n	8002448 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002434:	4b91      	ldr	r3, [pc, #580]	@ (800267c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	08db      	lsrs	r3, r3, #3
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	4a90      	ldr	r2, [pc, #576]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002440:	fa22 f303 	lsr.w	r3, r2, r3
 8002444:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002446:	e111      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002448:	4b8d      	ldr	r3, [pc, #564]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800244a:	61bb      	str	r3, [r7, #24]
      break;
 800244c:	e10e      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800244e:	4b8d      	ldr	r3, [pc, #564]	@ (8002684 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002450:	61bb      	str	r3, [r7, #24]
      break;
 8002452:	e10b      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002454:	4b8c      	ldr	r3, [pc, #560]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002456:	61bb      	str	r3, [r7, #24]
      break;
 8002458:	e108      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800245a:	4b88      	ldr	r3, [pc, #544]	@ (800267c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800245c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002464:	4b85      	ldr	r3, [pc, #532]	@ (800267c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002468:	091b      	lsrs	r3, r3, #4
 800246a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800246e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002470:	4b82      	ldr	r3, [pc, #520]	@ (800267c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800247a:	4b80      	ldr	r3, [pc, #512]	@ (800267c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800247c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800247e:	08db      	lsrs	r3, r3, #3
 8002480:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	fb02 f303 	mul.w	r3, r2, r3
 800248a:	ee07 3a90 	vmov	s15, r3
 800248e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002492:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 80e1 	beq.w	8002660 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	f000 8083 	beq.w	80025ac <HAL_RCC_GetSysClockFreq+0x204>
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	f200 80a1 	bhi.w	80025f0 <HAL_RCC_GetSysClockFreq+0x248>
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_RCC_GetSysClockFreq+0x114>
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d056      	beq.n	8002568 <HAL_RCC_GetSysClockFreq+0x1c0>
 80024ba:	e099      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024bc:	4b6f      	ldr	r3, [pc, #444]	@ (800267c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0320 	and.w	r3, r3, #32
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d02d      	beq.n	8002524 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80024c8:	4b6c      	ldr	r3, [pc, #432]	@ (800267c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	08db      	lsrs	r3, r3, #3
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	4a6b      	ldr	r2, [pc, #428]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024d4:	fa22 f303 	lsr.w	r3, r2, r3
 80024d8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	ee07 3a90 	vmov	s15, r3
 80024e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	ee07 3a90 	vmov	s15, r3
 80024ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024f2:	4b62      	ldr	r3, [pc, #392]	@ (800267c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024fa:	ee07 3a90 	vmov	s15, r3
 80024fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002502:	ed97 6a02 	vldr	s12, [r7, #8]
 8002506:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800268c <HAL_RCC_GetSysClockFreq+0x2e4>
 800250a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800250e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002512:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800251a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800251e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002522:	e087      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	ee07 3a90 	vmov	s15, r3
 800252a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800252e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002690 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002536:	4b51      	ldr	r3, [pc, #324]	@ (800267c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800253e:	ee07 3a90 	vmov	s15, r3
 8002542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002546:	ed97 6a02 	vldr	s12, [r7, #8]
 800254a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800268c <HAL_RCC_GetSysClockFreq+0x2e4>
 800254e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002556:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800255a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800255e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002562:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002566:	e065      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	ee07 3a90 	vmov	s15, r3
 800256e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002572:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002694 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800257a:	4b40      	ldr	r3, [pc, #256]	@ (800267c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002582:	ee07 3a90 	vmov	s15, r3
 8002586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800258a:	ed97 6a02 	vldr	s12, [r7, #8]
 800258e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800268c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800259a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800259e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80025aa:	e043      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	ee07 3a90 	vmov	s15, r3
 80025b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025b6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002698 <HAL_RCC_GetSysClockFreq+0x2f0>
 80025ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025be:	4b2f      	ldr	r3, [pc, #188]	@ (800267c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025c6:	ee07 3a90 	vmov	s15, r3
 80025ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80025d2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800268c <HAL_RCC_GetSysClockFreq+0x2e4>
 80025d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80025ee:	e021      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	ee07 3a90 	vmov	s15, r3
 80025f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025fa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002694 <HAL_RCC_GetSysClockFreq+0x2ec>
 80025fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002602:	4b1e      	ldr	r3, [pc, #120]	@ (800267c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800260a:	ee07 3a90 	vmov	s15, r3
 800260e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002612:	ed97 6a02 	vldr	s12, [r7, #8]
 8002616:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800268c <HAL_RCC_GetSysClockFreq+0x2e4>
 800261a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800261e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002622:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800262a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800262e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002632:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002634:	4b11      	ldr	r3, [pc, #68]	@ (800267c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002638:	0a5b      	lsrs	r3, r3, #9
 800263a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800263e:	3301      	adds	r3, #1
 8002640:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	ee07 3a90 	vmov	s15, r3
 8002648:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800264c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002654:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002658:	ee17 3a90 	vmov	r3, s15
 800265c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800265e:	e005      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	61bb      	str	r3, [r7, #24]
      break;
 8002664:	e002      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002666:	4b07      	ldr	r3, [pc, #28]	@ (8002684 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002668:	61bb      	str	r3, [r7, #24]
      break;
 800266a:	bf00      	nop
  }

  return sysclockfreq;
 800266c:	69bb      	ldr	r3, [r7, #24]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3724      	adds	r7, #36	@ 0x24
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	58024400 	.word	0x58024400
 8002680:	03d09000 	.word	0x03d09000
 8002684:	003d0900 	.word	0x003d0900
 8002688:	007a1200 	.word	0x007a1200
 800268c:	46000000 	.word	0x46000000
 8002690:	4c742400 	.word	0x4c742400
 8002694:	4a742400 	.word	0x4a742400
 8002698:	4af42400 	.word	0x4af42400

0800269c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80026a2:	f7ff fe81 	bl	80023a8 <HAL_RCC_GetSysClockFreq>
 80026a6:	4602      	mov	r2, r0
 80026a8:	4b10      	ldr	r3, [pc, #64]	@ (80026ec <HAL_RCC_GetHCLKFreq+0x50>)
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	0a1b      	lsrs	r3, r3, #8
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	490f      	ldr	r1, [pc, #60]	@ (80026f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80026b4:	5ccb      	ldrb	r3, [r1, r3]
 80026b6:	f003 031f 	and.w	r3, r3, #31
 80026ba:	fa22 f303 	lsr.w	r3, r2, r3
 80026be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026c0:	4b0a      	ldr	r3, [pc, #40]	@ (80026ec <HAL_RCC_GetHCLKFreq+0x50>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	f003 030f 	and.w	r3, r3, #15
 80026c8:	4a09      	ldr	r2, [pc, #36]	@ (80026f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80026ca:	5cd3      	ldrb	r3, [r2, r3]
 80026cc:	f003 031f 	and.w	r3, r3, #31
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	fa22 f303 	lsr.w	r3, r2, r3
 80026d6:	4a07      	ldr	r2, [pc, #28]	@ (80026f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80026d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026da:	4a07      	ldr	r2, [pc, #28]	@ (80026f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80026e0:	4b04      	ldr	r3, [pc, #16]	@ (80026f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80026e2:	681b      	ldr	r3, [r3, #0]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	58024400 	.word	0x58024400
 80026f0:	08006684 	.word	0x08006684
 80026f4:	24000004 	.word	0x24000004
 80026f8:	24000000 	.word	0x24000000

080026fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002700:	f7ff ffcc 	bl	800269c <HAL_RCC_GetHCLKFreq>
 8002704:	4602      	mov	r2, r0
 8002706:	4b06      	ldr	r3, [pc, #24]	@ (8002720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	091b      	lsrs	r3, r3, #4
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	4904      	ldr	r1, [pc, #16]	@ (8002724 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002712:	5ccb      	ldrb	r3, [r1, r3]
 8002714:	f003 031f 	and.w	r3, r3, #31
 8002718:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800271c:	4618      	mov	r0, r3
 800271e:	bd80      	pop	{r7, pc}
 8002720:	58024400 	.word	0x58024400
 8002724:	08006684 	.word	0x08006684

08002728 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800272c:	f7ff ffb6 	bl	800269c <HAL_RCC_GetHCLKFreq>
 8002730:	4602      	mov	r2, r0
 8002732:	4b06      	ldr	r3, [pc, #24]	@ (800274c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	0a1b      	lsrs	r3, r3, #8
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	4904      	ldr	r1, [pc, #16]	@ (8002750 <HAL_RCC_GetPCLK2Freq+0x28>)
 800273e:	5ccb      	ldrb	r3, [r1, r3]
 8002740:	f003 031f 	and.w	r3, r3, #31
 8002744:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002748:	4618      	mov	r0, r3
 800274a:	bd80      	pop	{r7, pc}
 800274c:	58024400 	.word	0x58024400
 8002750:	08006684 	.word	0x08006684

08002754 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002758:	b0ca      	sub	sp, #296	@ 0x128
 800275a:	af00      	add	r7, sp, #0
 800275c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002760:	2300      	movs	r3, #0
 8002762:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002766:	2300      	movs	r3, #0
 8002768:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800276c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002774:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002778:	2500      	movs	r5, #0
 800277a:	ea54 0305 	orrs.w	r3, r4, r5
 800277e:	d049      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002784:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002786:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800278a:	d02f      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x98>
 800278c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002790:	d828      	bhi.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002792:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002796:	d01a      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002798:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800279c:	d822      	bhi.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80027a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80027a6:	d007      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027a8:	e01c      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027aa:	4bb8      	ldr	r3, [pc, #736]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ae:	4ab7      	ldr	r2, [pc, #732]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80027b6:	e01a      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80027b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027bc:	3308      	adds	r3, #8
 80027be:	2102      	movs	r1, #2
 80027c0:	4618      	mov	r0, r3
 80027c2:	f001 fc8f 	bl	80040e4 <RCCEx_PLL2_Config>
 80027c6:	4603      	mov	r3, r0
 80027c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80027cc:	e00f      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80027ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027d2:	3328      	adds	r3, #40	@ 0x28
 80027d4:	2102      	movs	r1, #2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f001 fd36 	bl	8004248 <RCCEx_PLL3_Config>
 80027dc:	4603      	mov	r3, r0
 80027de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80027e2:	e004      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80027ea:	e000      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80027ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10a      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80027f6:	4ba5      	ldr	r3, [pc, #660]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027fa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80027fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002802:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002804:	4aa1      	ldr	r2, [pc, #644]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002806:	430b      	orrs	r3, r1
 8002808:	6513      	str	r3, [r2, #80]	@ 0x50
 800280a:	e003      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800280c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002810:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002820:	f04f 0900 	mov.w	r9, #0
 8002824:	ea58 0309 	orrs.w	r3, r8, r9
 8002828:	d047      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800282a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800282e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002830:	2b04      	cmp	r3, #4
 8002832:	d82a      	bhi.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002834:	a201      	add	r2, pc, #4	@ (adr r2, 800283c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283a:	bf00      	nop
 800283c:	08002851 	.word	0x08002851
 8002840:	0800285f 	.word	0x0800285f
 8002844:	08002875 	.word	0x08002875
 8002848:	08002893 	.word	0x08002893
 800284c:	08002893 	.word	0x08002893
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002850:	4b8e      	ldr	r3, [pc, #568]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002854:	4a8d      	ldr	r2, [pc, #564]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002856:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800285a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800285c:	e01a      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800285e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002862:	3308      	adds	r3, #8
 8002864:	2100      	movs	r1, #0
 8002866:	4618      	mov	r0, r3
 8002868:	f001 fc3c 	bl	80040e4 <RCCEx_PLL2_Config>
 800286c:	4603      	mov	r3, r0
 800286e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002872:	e00f      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002878:	3328      	adds	r3, #40	@ 0x28
 800287a:	2100      	movs	r1, #0
 800287c:	4618      	mov	r0, r3
 800287e:	f001 fce3 	bl	8004248 <RCCEx_PLL3_Config>
 8002882:	4603      	mov	r3, r0
 8002884:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002888:	e004      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002890:	e000      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002894:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10a      	bne.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800289c:	4b7b      	ldr	r3, [pc, #492]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800289e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028a0:	f023 0107 	bic.w	r1, r3, #7
 80028a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028aa:	4a78      	ldr	r2, [pc, #480]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028ac:	430b      	orrs	r3, r1
 80028ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80028b0:	e003      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80028ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80028c6:	f04f 0b00 	mov.w	fp, #0
 80028ca:	ea5a 030b 	orrs.w	r3, sl, fp
 80028ce:	d04c      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80028d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028da:	d030      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80028dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028e0:	d829      	bhi.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80028e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80028e4:	d02d      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80028e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80028e8:	d825      	bhi.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80028ea:	2b80      	cmp	r3, #128	@ 0x80
 80028ec:	d018      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80028ee:	2b80      	cmp	r3, #128	@ 0x80
 80028f0:	d821      	bhi.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80028f6:	2b40      	cmp	r3, #64	@ 0x40
 80028f8:	d007      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80028fa:	e01c      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028fc:	4b63      	ldr	r3, [pc, #396]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002900:	4a62      	ldr	r2, [pc, #392]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002902:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002906:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002908:	e01c      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800290a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800290e:	3308      	adds	r3, #8
 8002910:	2100      	movs	r1, #0
 8002912:	4618      	mov	r0, r3
 8002914:	f001 fbe6 	bl	80040e4 <RCCEx_PLL2_Config>
 8002918:	4603      	mov	r3, r0
 800291a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800291e:	e011      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002924:	3328      	adds	r3, #40	@ 0x28
 8002926:	2100      	movs	r1, #0
 8002928:	4618      	mov	r0, r3
 800292a:	f001 fc8d 	bl	8004248 <RCCEx_PLL3_Config>
 800292e:	4603      	mov	r3, r0
 8002930:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002934:	e006      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800293c:	e002      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800293e:	bf00      	nop
 8002940:	e000      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002942:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002944:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10a      	bne.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800294c:	4b4f      	ldr	r3, [pc, #316]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800294e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002950:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800295a:	4a4c      	ldr	r2, [pc, #304]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800295c:	430b      	orrs	r3, r1
 800295e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002960:	e003      	b.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002962:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002966:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800296a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800296e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002972:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002976:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800297a:	2300      	movs	r3, #0
 800297c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002980:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002984:	460b      	mov	r3, r1
 8002986:	4313      	orrs	r3, r2
 8002988:	d053      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800298a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800298e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002992:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002996:	d035      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002998:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800299c:	d82e      	bhi.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800299e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80029a2:	d031      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80029a4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80029a8:	d828      	bhi.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80029aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029ae:	d01a      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80029b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029b4:	d822      	bhi.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80029ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029be:	d007      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80029c0:	e01c      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029c2:	4b32      	ldr	r3, [pc, #200]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c6:	4a31      	ldr	r2, [pc, #196]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029ce:	e01c      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029d4:	3308      	adds	r3, #8
 80029d6:	2100      	movs	r1, #0
 80029d8:	4618      	mov	r0, r3
 80029da:	f001 fb83 	bl	80040e4 <RCCEx_PLL2_Config>
 80029de:	4603      	mov	r3, r0
 80029e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80029e4:	e011      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029ea:	3328      	adds	r3, #40	@ 0x28
 80029ec:	2100      	movs	r1, #0
 80029ee:	4618      	mov	r0, r3
 80029f0:	f001 fc2a 	bl	8004248 <RCCEx_PLL3_Config>
 80029f4:	4603      	mov	r3, r0
 80029f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029fa:	e006      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a02:	e002      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002a04:	bf00      	nop
 8002a06:	e000      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10b      	bne.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002a12:	4b1e      	ldr	r3, [pc, #120]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a16:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002a22:	4a1a      	ldr	r2, [pc, #104]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a24:	430b      	orrs	r3, r1
 8002a26:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a28:	e003      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002a3e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002a42:	2300      	movs	r3, #0
 8002a44:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002a48:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	d056      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002a5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a5e:	d038      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002a60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a64:	d831      	bhi.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a66:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002a6a:	d034      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002a6c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002a70:	d82b      	bhi.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a76:	d01d      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002a78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a7c:	d825      	bhi.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d006      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002a82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a86:	d00a      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002a88:	e01f      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a8a:	bf00      	nop
 8002a8c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a90:	4ba2      	ldr	r3, [pc, #648]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a94:	4aa1      	ldr	r2, [pc, #644]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a9c:	e01c      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aa2:	3308      	adds	r3, #8
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f001 fb1c 	bl	80040e4 <RCCEx_PLL2_Config>
 8002aac:	4603      	mov	r3, r0
 8002aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002ab2:	e011      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ab8:	3328      	adds	r3, #40	@ 0x28
 8002aba:	2100      	movs	r1, #0
 8002abc:	4618      	mov	r0, r3
 8002abe:	f001 fbc3 	bl	8004248 <RCCEx_PLL3_Config>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ac8:	e006      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ad0:	e002      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002ad2:	bf00      	nop
 8002ad4:	e000      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002ad6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10b      	bne.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002ae0:	4b8e      	ldr	r3, [pc, #568]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002af0:	4a8a      	ldr	r2, [pc, #552]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002af2:	430b      	orrs	r3, r1
 8002af4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002af6:	e003      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002afc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b08:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002b0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002b10:	2300      	movs	r3, #0
 8002b12:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002b16:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	d03a      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b26:	2b30      	cmp	r3, #48	@ 0x30
 8002b28:	d01f      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002b2a:	2b30      	cmp	r3, #48	@ 0x30
 8002b2c:	d819      	bhi.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002b2e:	2b20      	cmp	r3, #32
 8002b30:	d00c      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002b32:	2b20      	cmp	r3, #32
 8002b34:	d815      	bhi.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d019      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002b3a:	2b10      	cmp	r3, #16
 8002b3c:	d111      	bne.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b3e:	4b77      	ldr	r3, [pc, #476]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b42:	4a76      	ldr	r2, [pc, #472]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002b4a:	e011      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b50:	3308      	adds	r3, #8
 8002b52:	2102      	movs	r1, #2
 8002b54:	4618      	mov	r0, r3
 8002b56:	f001 fac5 	bl	80040e4 <RCCEx_PLL2_Config>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002b60:	e006      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b68:	e002      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002b6a:	bf00      	nop
 8002b6c:	e000      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002b6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10a      	bne.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b78:	4b68      	ldr	r3, [pc, #416]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b7c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b86:	4a65      	ldr	r2, [pc, #404]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b8c:	e003      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002ba2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002bac:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	d051      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bc0:	d035      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002bc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bc6:	d82e      	bhi.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002bc8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002bcc:	d031      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002bce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002bd2:	d828      	bhi.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002bd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bd8:	d01a      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002bda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bde:	d822      	bhi.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002be4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002be8:	d007      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002bea:	e01c      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bec:	4b4b      	ldr	r3, [pc, #300]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf0:	4a4a      	ldr	r2, [pc, #296]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002bf8:	e01c      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bfe:	3308      	adds	r3, #8
 8002c00:	2100      	movs	r1, #0
 8002c02:	4618      	mov	r0, r3
 8002c04:	f001 fa6e 	bl	80040e4 <RCCEx_PLL2_Config>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002c0e:	e011      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c14:	3328      	adds	r3, #40	@ 0x28
 8002c16:	2100      	movs	r1, #0
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f001 fb15 	bl	8004248 <RCCEx_PLL3_Config>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002c24:	e006      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c2c:	e002      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002c2e:	bf00      	nop
 8002c30:	e000      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002c32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10a      	bne.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002c3c:	4b37      	ldr	r3, [pc, #220]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c40:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c4a:	4a34      	ldr	r2, [pc, #208]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c50:	e003      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c62:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002c66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002c70:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002c74:	460b      	mov	r3, r1
 8002c76:	4313      	orrs	r3, r2
 8002c78:	d056      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c84:	d033      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002c86:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c8a:	d82c      	bhi.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002c8c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c90:	d02f      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002c92:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c96:	d826      	bhi.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002c98:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002c9c:	d02b      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002c9e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002ca2:	d820      	bhi.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ca4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ca8:	d012      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002caa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002cae:	d81a      	bhi.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d022      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002cb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cb8:	d115      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cbe:	3308      	adds	r3, #8
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f001 fa0e 	bl	80040e4 <RCCEx_PLL2_Config>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002cce:	e015      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cd4:	3328      	adds	r3, #40	@ 0x28
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f001 fab5 	bl	8004248 <RCCEx_PLL3_Config>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002ce4:	e00a      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002cec:	e006      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002cee:	bf00      	nop
 8002cf0:	e004      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002cf2:	bf00      	nop
 8002cf4:	e002      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002cf6:	bf00      	nop
 8002cf8:	e000      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002cfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10d      	bne.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002d04:	4b05      	ldr	r3, [pc, #20]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d08:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d12:	4a02      	ldr	r2, [pc, #8]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d14:	430b      	orrs	r3, r1
 8002d16:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d18:	e006      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002d1a:	bf00      	nop
 8002d1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d30:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002d34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002d38:	2300      	movs	r3, #0
 8002d3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002d3e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4313      	orrs	r3, r2
 8002d46:	d055      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002d50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d54:	d033      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002d56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d5a:	d82c      	bhi.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d60:	d02f      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002d62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d66:	d826      	bhi.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002d68:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002d6c:	d02b      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002d6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002d72:	d820      	bhi.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002d74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d78:	d012      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002d7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d7e:	d81a      	bhi.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d022      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002d84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d88:	d115      	bne.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d8e:	3308      	adds	r3, #8
 8002d90:	2101      	movs	r1, #1
 8002d92:	4618      	mov	r0, r3
 8002d94:	f001 f9a6 	bl	80040e4 <RCCEx_PLL2_Config>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002d9e:	e015      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002da4:	3328      	adds	r3, #40	@ 0x28
 8002da6:	2101      	movs	r1, #1
 8002da8:	4618      	mov	r0, r3
 8002daa:	f001 fa4d 	bl	8004248 <RCCEx_PLL3_Config>
 8002dae:	4603      	mov	r3, r0
 8002db0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002db4:	e00a      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002dbc:	e006      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002dbe:	bf00      	nop
 8002dc0:	e004      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002dc2:	bf00      	nop
 8002dc4:	e002      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002dc6:	bf00      	nop
 8002dc8:	e000      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002dca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10b      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002dd4:	4ba3      	ldr	r3, [pc, #652]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002de0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002de4:	4a9f      	ldr	r2, [pc, #636]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002de6:	430b      	orrs	r3, r1
 8002de8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dea:	e003      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002df0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002e00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002e04:	2300      	movs	r3, #0
 8002e06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002e0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4313      	orrs	r3, r2
 8002e12:	d037      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e1e:	d00e      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002e20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e24:	d816      	bhi.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d018      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002e2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e2e:	d111      	bne.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e30:	4b8c      	ldr	r3, [pc, #560]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e34:	4a8b      	ldr	r2, [pc, #556]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002e3c:	e00f      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e42:	3308      	adds	r3, #8
 8002e44:	2101      	movs	r1, #1
 8002e46:	4618      	mov	r0, r3
 8002e48:	f001 f94c 	bl	80040e4 <RCCEx_PLL2_Config>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002e52:	e004      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e5a:	e000      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002e5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10a      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e66:	4b7f      	ldr	r3, [pc, #508]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e6a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e74:	4a7b      	ldr	r2, [pc, #492]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e76:	430b      	orrs	r3, r1
 8002e78:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e7a:	e003      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002e90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e94:	2300      	movs	r3, #0
 8002e96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002e9a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	d039      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eaa:	2b03      	cmp	r3, #3
 8002eac:	d81c      	bhi.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002eae:	a201      	add	r2, pc, #4	@ (adr r2, 8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb4:	08002ef1 	.word	0x08002ef1
 8002eb8:	08002ec5 	.word	0x08002ec5
 8002ebc:	08002ed3 	.word	0x08002ed3
 8002ec0:	08002ef1 	.word	0x08002ef1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ec4:	4b67      	ldr	r3, [pc, #412]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec8:	4a66      	ldr	r2, [pc, #408]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002eca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ece:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002ed0:	e00f      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ed6:	3308      	adds	r3, #8
 8002ed8:	2102      	movs	r1, #2
 8002eda:	4618      	mov	r0, r3
 8002edc:	f001 f902 	bl	80040e4 <RCCEx_PLL2_Config>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002ee6:	e004      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002eee:	e000      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002ef0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10a      	bne.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002efa:	4b5a      	ldr	r3, [pc, #360]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002efe:	f023 0103 	bic.w	r1, r3, #3
 8002f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f08:	4a56      	ldr	r2, [pc, #344]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f0a:	430b      	orrs	r3, r1
 8002f0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f0e:	e003      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f20:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002f24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f2e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002f32:	460b      	mov	r3, r1
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f000 809f 	beq.w	8003078 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f3a:	4b4b      	ldr	r3, [pc, #300]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a4a      	ldr	r2, [pc, #296]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002f40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f46:	f7fe f859 	bl	8000ffc <HAL_GetTick>
 8002f4a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f4e:	e00b      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f50:	f7fe f854 	bl	8000ffc <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b64      	cmp	r3, #100	@ 0x64
 8002f5e:	d903      	bls.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f66:	e005      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f68:	4b3f      	ldr	r3, [pc, #252]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0ed      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002f74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d179      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002f7c:	4b39      	ldr	r3, [pc, #228]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f7e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002f88:	4053      	eors	r3, r2
 8002f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d015      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f92:	4b34      	ldr	r3, [pc, #208]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f9a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f9e:	4b31      	ldr	r3, [pc, #196]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa2:	4a30      	ldr	r2, [pc, #192]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fa8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002faa:	4b2e      	ldr	r3, [pc, #184]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fae:	4a2d      	ldr	r2, [pc, #180]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fb4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002fb6:	4a2b      	ldr	r2, [pc, #172]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fbc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002fc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fca:	d118      	bne.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fcc:	f7fe f816 	bl	8000ffc <HAL_GetTick>
 8002fd0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fd4:	e00d      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd6:	f7fe f811 	bl	8000ffc <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002fe0:	1ad2      	subs	r2, r2, r3
 8002fe2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d903      	bls.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8002ff0:	e005      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0eb      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003002:	2b00      	cmp	r3, #0
 8003004:	d129      	bne.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800300a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800300e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003012:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003016:	d10e      	bne.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003018:	4b12      	ldr	r3, [pc, #72]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003024:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003028:	091a      	lsrs	r2, r3, #4
 800302a:	4b10      	ldr	r3, [pc, #64]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800302c:	4013      	ands	r3, r2
 800302e:	4a0d      	ldr	r2, [pc, #52]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003030:	430b      	orrs	r3, r1
 8003032:	6113      	str	r3, [r2, #16]
 8003034:	e005      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003036:	4b0b      	ldr	r3, [pc, #44]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	4a0a      	ldr	r2, [pc, #40]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800303c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003040:	6113      	str	r3, [r2, #16]
 8003042:	4b08      	ldr	r3, [pc, #32]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003044:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800304a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800304e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003052:	4a04      	ldr	r2, [pc, #16]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003054:	430b      	orrs	r3, r1
 8003056:	6713      	str	r3, [r2, #112]	@ 0x70
 8003058:	e00e      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800305a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800305e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003062:	e009      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003064:	58024400 	.word	0x58024400
 8003068:	58024800 	.word	0x58024800
 800306c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003070:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003074:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800307c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003080:	f002 0301 	and.w	r3, r2, #1
 8003084:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003088:	2300      	movs	r3, #0
 800308a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800308e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003092:	460b      	mov	r3, r1
 8003094:	4313      	orrs	r3, r2
 8003096:	f000 8089 	beq.w	80031ac <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800309a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800309e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030a0:	2b28      	cmp	r3, #40	@ 0x28
 80030a2:	d86b      	bhi.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80030a4:	a201      	add	r2, pc, #4	@ (adr r2, 80030ac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80030a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030aa:	bf00      	nop
 80030ac:	08003185 	.word	0x08003185
 80030b0:	0800317d 	.word	0x0800317d
 80030b4:	0800317d 	.word	0x0800317d
 80030b8:	0800317d 	.word	0x0800317d
 80030bc:	0800317d 	.word	0x0800317d
 80030c0:	0800317d 	.word	0x0800317d
 80030c4:	0800317d 	.word	0x0800317d
 80030c8:	0800317d 	.word	0x0800317d
 80030cc:	08003151 	.word	0x08003151
 80030d0:	0800317d 	.word	0x0800317d
 80030d4:	0800317d 	.word	0x0800317d
 80030d8:	0800317d 	.word	0x0800317d
 80030dc:	0800317d 	.word	0x0800317d
 80030e0:	0800317d 	.word	0x0800317d
 80030e4:	0800317d 	.word	0x0800317d
 80030e8:	0800317d 	.word	0x0800317d
 80030ec:	08003167 	.word	0x08003167
 80030f0:	0800317d 	.word	0x0800317d
 80030f4:	0800317d 	.word	0x0800317d
 80030f8:	0800317d 	.word	0x0800317d
 80030fc:	0800317d 	.word	0x0800317d
 8003100:	0800317d 	.word	0x0800317d
 8003104:	0800317d 	.word	0x0800317d
 8003108:	0800317d 	.word	0x0800317d
 800310c:	08003185 	.word	0x08003185
 8003110:	0800317d 	.word	0x0800317d
 8003114:	0800317d 	.word	0x0800317d
 8003118:	0800317d 	.word	0x0800317d
 800311c:	0800317d 	.word	0x0800317d
 8003120:	0800317d 	.word	0x0800317d
 8003124:	0800317d 	.word	0x0800317d
 8003128:	0800317d 	.word	0x0800317d
 800312c:	08003185 	.word	0x08003185
 8003130:	0800317d 	.word	0x0800317d
 8003134:	0800317d 	.word	0x0800317d
 8003138:	0800317d 	.word	0x0800317d
 800313c:	0800317d 	.word	0x0800317d
 8003140:	0800317d 	.word	0x0800317d
 8003144:	0800317d 	.word	0x0800317d
 8003148:	0800317d 	.word	0x0800317d
 800314c:	08003185 	.word	0x08003185
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003154:	3308      	adds	r3, #8
 8003156:	2101      	movs	r1, #1
 8003158:	4618      	mov	r0, r3
 800315a:	f000 ffc3 	bl	80040e4 <RCCEx_PLL2_Config>
 800315e:	4603      	mov	r3, r0
 8003160:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003164:	e00f      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800316a:	3328      	adds	r3, #40	@ 0x28
 800316c:	2101      	movs	r1, #1
 800316e:	4618      	mov	r0, r3
 8003170:	f001 f86a 	bl	8004248 <RCCEx_PLL3_Config>
 8003174:	4603      	mov	r3, r0
 8003176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800317a:	e004      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003182:	e000      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003184:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003186:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10a      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800318e:	4bbf      	ldr	r3, [pc, #764]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003192:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800319a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800319c:	4abb      	ldr	r2, [pc, #748]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800319e:	430b      	orrs	r3, r1
 80031a0:	6553      	str	r3, [r2, #84]	@ 0x54
 80031a2:	e003      	b.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80031ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b4:	f002 0302 	and.w	r3, r2, #2
 80031b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80031bc:	2300      	movs	r3, #0
 80031be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80031c2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80031c6:	460b      	mov	r3, r1
 80031c8:	4313      	orrs	r3, r2
 80031ca:	d041      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80031cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031d2:	2b05      	cmp	r3, #5
 80031d4:	d824      	bhi.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80031d6:	a201      	add	r2, pc, #4	@ (adr r2, 80031dc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80031d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031dc:	08003229 	.word	0x08003229
 80031e0:	080031f5 	.word	0x080031f5
 80031e4:	0800320b 	.word	0x0800320b
 80031e8:	08003229 	.word	0x08003229
 80031ec:	08003229 	.word	0x08003229
 80031f0:	08003229 	.word	0x08003229
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031f8:	3308      	adds	r3, #8
 80031fa:	2101      	movs	r1, #1
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 ff71 	bl	80040e4 <RCCEx_PLL2_Config>
 8003202:	4603      	mov	r3, r0
 8003204:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003208:	e00f      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800320a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800320e:	3328      	adds	r3, #40	@ 0x28
 8003210:	2101      	movs	r1, #1
 8003212:	4618      	mov	r0, r3
 8003214:	f001 f818 	bl	8004248 <RCCEx_PLL3_Config>
 8003218:	4603      	mov	r3, r0
 800321a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800321e:	e004      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003226:	e000      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800322a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10a      	bne.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003232:	4b96      	ldr	r3, [pc, #600]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003236:	f023 0107 	bic.w	r1, r3, #7
 800323a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800323e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003240:	4a92      	ldr	r2, [pc, #584]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003242:	430b      	orrs	r3, r1
 8003244:	6553      	str	r3, [r2, #84]	@ 0x54
 8003246:	e003      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003248:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800324c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003258:	f002 0304 	and.w	r3, r2, #4
 800325c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003260:	2300      	movs	r3, #0
 8003262:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003266:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800326a:	460b      	mov	r3, r1
 800326c:	4313      	orrs	r3, r2
 800326e:	d044      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003274:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003278:	2b05      	cmp	r3, #5
 800327a:	d825      	bhi.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800327c:	a201      	add	r2, pc, #4	@ (adr r2, 8003284 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800327e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003282:	bf00      	nop
 8003284:	080032d1 	.word	0x080032d1
 8003288:	0800329d 	.word	0x0800329d
 800328c:	080032b3 	.word	0x080032b3
 8003290:	080032d1 	.word	0x080032d1
 8003294:	080032d1 	.word	0x080032d1
 8003298:	080032d1 	.word	0x080032d1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800329c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032a0:	3308      	adds	r3, #8
 80032a2:	2101      	movs	r1, #1
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 ff1d 	bl	80040e4 <RCCEx_PLL2_Config>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80032b0:	e00f      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b6:	3328      	adds	r3, #40	@ 0x28
 80032b8:	2101      	movs	r1, #1
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 ffc4 	bl	8004248 <RCCEx_PLL3_Config>
 80032c0:	4603      	mov	r3, r0
 80032c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80032c6:	e004      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032ce:	e000      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80032d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10b      	bne.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032da:	4b6c      	ldr	r3, [pc, #432]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032de:	f023 0107 	bic.w	r1, r3, #7
 80032e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032ea:	4a68      	ldr	r2, [pc, #416]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032ec:	430b      	orrs	r3, r1
 80032ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80032f0:	e003      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003302:	f002 0320 	and.w	r3, r2, #32
 8003306:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800330a:	2300      	movs	r3, #0
 800330c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003310:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003314:	460b      	mov	r3, r1
 8003316:	4313      	orrs	r3, r2
 8003318:	d055      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800331a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800331e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003322:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003326:	d033      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003328:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800332c:	d82c      	bhi.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800332e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003332:	d02f      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003334:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003338:	d826      	bhi.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800333a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800333e:	d02b      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003340:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003344:	d820      	bhi.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003346:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800334a:	d012      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800334c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003350:	d81a      	bhi.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003352:	2b00      	cmp	r3, #0
 8003354:	d022      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003356:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800335a:	d115      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800335c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003360:	3308      	adds	r3, #8
 8003362:	2100      	movs	r1, #0
 8003364:	4618      	mov	r0, r3
 8003366:	f000 febd 	bl	80040e4 <RCCEx_PLL2_Config>
 800336a:	4603      	mov	r3, r0
 800336c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003370:	e015      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003376:	3328      	adds	r3, #40	@ 0x28
 8003378:	2102      	movs	r1, #2
 800337a:	4618      	mov	r0, r3
 800337c:	f000 ff64 	bl	8004248 <RCCEx_PLL3_Config>
 8003380:	4603      	mov	r3, r0
 8003382:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003386:	e00a      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800338e:	e006      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003390:	bf00      	nop
 8003392:	e004      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003394:	bf00      	nop
 8003396:	e002      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003398:	bf00      	nop
 800339a:	e000      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800339c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800339e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10b      	bne.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033a6:	4b39      	ldr	r3, [pc, #228]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033aa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80033ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b6:	4a35      	ldr	r2, [pc, #212]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033b8:	430b      	orrs	r3, r1
 80033ba:	6553      	str	r3, [r2, #84]	@ 0x54
 80033bc:	e003      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80033c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ce:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80033d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80033d6:	2300      	movs	r3, #0
 80033d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80033dc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80033e0:	460b      	mov	r3, r1
 80033e2:	4313      	orrs	r3, r2
 80033e4:	d058      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80033e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80033ee:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80033f2:	d033      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80033f4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80033f8:	d82c      	bhi.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80033fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033fe:	d02f      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003400:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003404:	d826      	bhi.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003406:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800340a:	d02b      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800340c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003410:	d820      	bhi.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003412:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003416:	d012      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003418:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800341c:	d81a      	bhi.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800341e:	2b00      	cmp	r3, #0
 8003420:	d022      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003422:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003426:	d115      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800342c:	3308      	adds	r3, #8
 800342e:	2100      	movs	r1, #0
 8003430:	4618      	mov	r0, r3
 8003432:	f000 fe57 	bl	80040e4 <RCCEx_PLL2_Config>
 8003436:	4603      	mov	r3, r0
 8003438:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800343c:	e015      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800343e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003442:	3328      	adds	r3, #40	@ 0x28
 8003444:	2102      	movs	r1, #2
 8003446:	4618      	mov	r0, r3
 8003448:	f000 fefe 	bl	8004248 <RCCEx_PLL3_Config>
 800344c:	4603      	mov	r3, r0
 800344e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003452:	e00a      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800345a:	e006      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800345c:	bf00      	nop
 800345e:	e004      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003460:	bf00      	nop
 8003462:	e002      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003464:	bf00      	nop
 8003466:	e000      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800346a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10e      	bne.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003472:	4b06      	ldr	r3, [pc, #24]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003476:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800347a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800347e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003482:	4a02      	ldr	r2, [pc, #8]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003484:	430b      	orrs	r3, r1
 8003486:	6593      	str	r3, [r2, #88]	@ 0x58
 8003488:	e006      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800348a:	bf00      	nop
 800348c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003490:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003494:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800349c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80034a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80034a8:	2300      	movs	r3, #0
 80034aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80034ae:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80034b2:	460b      	mov	r3, r1
 80034b4:	4313      	orrs	r3, r2
 80034b6:	d055      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80034b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80034c0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80034c4:	d033      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80034c6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80034ca:	d82c      	bhi.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80034cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034d0:	d02f      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80034d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034d6:	d826      	bhi.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80034d8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80034dc:	d02b      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80034de:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80034e2:	d820      	bhi.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80034e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034e8:	d012      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80034ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034ee:	d81a      	bhi.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d022      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80034f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034f8:	d115      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034fe:	3308      	adds	r3, #8
 8003500:	2100      	movs	r1, #0
 8003502:	4618      	mov	r0, r3
 8003504:	f000 fdee 	bl	80040e4 <RCCEx_PLL2_Config>
 8003508:	4603      	mov	r3, r0
 800350a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800350e:	e015      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003514:	3328      	adds	r3, #40	@ 0x28
 8003516:	2102      	movs	r1, #2
 8003518:	4618      	mov	r0, r3
 800351a:	f000 fe95 	bl	8004248 <RCCEx_PLL3_Config>
 800351e:	4603      	mov	r3, r0
 8003520:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003524:	e00a      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800352c:	e006      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800352e:	bf00      	nop
 8003530:	e004      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003532:	bf00      	nop
 8003534:	e002      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003536:	bf00      	nop
 8003538:	e000      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800353a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800353c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10b      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003544:	4ba1      	ldr	r3, [pc, #644]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003548:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800354c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003550:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003554:	4a9d      	ldr	r2, [pc, #628]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003556:	430b      	orrs	r3, r1
 8003558:	6593      	str	r3, [r2, #88]	@ 0x58
 800355a:	e003      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800355c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003560:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356c:	f002 0308 	and.w	r3, r2, #8
 8003570:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003574:	2300      	movs	r3, #0
 8003576:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800357a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800357e:	460b      	mov	r3, r1
 8003580:	4313      	orrs	r3, r2
 8003582:	d01e      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003588:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800358c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003590:	d10c      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003596:	3328      	adds	r3, #40	@ 0x28
 8003598:	2102      	movs	r1, #2
 800359a:	4618      	mov	r0, r3
 800359c:	f000 fe54 	bl	8004248 <RCCEx_PLL3_Config>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d002      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80035ac:	4b87      	ldr	r3, [pc, #540]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80035b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035bc:	4a83      	ldr	r2, [pc, #524]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035be:	430b      	orrs	r3, r1
 80035c0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ca:	f002 0310 	and.w	r3, r2, #16
 80035ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80035d2:	2300      	movs	r3, #0
 80035d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80035d8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80035dc:	460b      	mov	r3, r1
 80035de:	4313      	orrs	r3, r2
 80035e0:	d01e      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80035e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035ee:	d10c      	bne.n	800360a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80035f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f4:	3328      	adds	r3, #40	@ 0x28
 80035f6:	2102      	movs	r1, #2
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 fe25 	bl	8004248 <RCCEx_PLL3_Config>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800360a:	4b70      	ldr	r3, [pc, #448]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800360c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800360e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003616:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800361a:	4a6c      	ldr	r2, [pc, #432]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800361c:	430b      	orrs	r3, r1
 800361e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003628:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800362c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003630:	2300      	movs	r3, #0
 8003632:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003636:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800363a:	460b      	mov	r3, r1
 800363c:	4313      	orrs	r3, r2
 800363e:	d03e      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003644:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003648:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800364c:	d022      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800364e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003652:	d81b      	bhi.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003658:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800365c:	d00b      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800365e:	e015      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003664:	3308      	adds	r3, #8
 8003666:	2100      	movs	r1, #0
 8003668:	4618      	mov	r0, r3
 800366a:	f000 fd3b 	bl	80040e4 <RCCEx_PLL2_Config>
 800366e:	4603      	mov	r3, r0
 8003670:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003674:	e00f      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367a:	3328      	adds	r3, #40	@ 0x28
 800367c:	2102      	movs	r1, #2
 800367e:	4618      	mov	r0, r3
 8003680:	f000 fde2 	bl	8004248 <RCCEx_PLL3_Config>
 8003684:	4603      	mov	r3, r0
 8003686:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800368a:	e004      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003692:	e000      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003694:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003696:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10b      	bne.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800369e:	4b4b      	ldr	r3, [pc, #300]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80036a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80036ae:	4a47      	ldr	r2, [pc, #284]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036b0:	430b      	orrs	r3, r1
 80036b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80036b4:	e003      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80036ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 80036cc:	2300      	movs	r3, #0
 80036ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80036d0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80036d4:	460b      	mov	r3, r1
 80036d6:	4313      	orrs	r3, r2
 80036d8:	d03b      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80036da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80036e6:	d01f      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80036e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80036ec:	d818      	bhi.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80036ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036f2:	d003      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80036f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036f8:	d007      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80036fa:	e011      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036fc:	4b33      	ldr	r3, [pc, #204]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003700:	4a32      	ldr	r2, [pc, #200]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003702:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003706:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003708:	e00f      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800370a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800370e:	3328      	adds	r3, #40	@ 0x28
 8003710:	2101      	movs	r1, #1
 8003712:	4618      	mov	r0, r3
 8003714:	f000 fd98 	bl	8004248 <RCCEx_PLL3_Config>
 8003718:	4603      	mov	r3, r0
 800371a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800371e:	e004      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003726:	e000      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003728:	bf00      	nop
    }

    if (ret == HAL_OK)
 800372a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10b      	bne.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003732:	4b26      	ldr	r3, [pc, #152]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003736:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800373a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800373e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003742:	4a22      	ldr	r2, [pc, #136]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003744:	430b      	orrs	r3, r1
 8003746:	6553      	str	r3, [r2, #84]	@ 0x54
 8003748:	e003      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800374a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800374e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800375e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003760:	2300      	movs	r3, #0
 8003762:	677b      	str	r3, [r7, #116]	@ 0x74
 8003764:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003768:	460b      	mov	r3, r1
 800376a:	4313      	orrs	r3, r2
 800376c:	d034      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800376e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800377c:	d007      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800377e:	e011      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003780:	4b12      	ldr	r3, [pc, #72]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003784:	4a11      	ldr	r2, [pc, #68]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003786:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800378a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800378c:	e00e      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800378e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003792:	3308      	adds	r3, #8
 8003794:	2102      	movs	r1, #2
 8003796:	4618      	mov	r0, r3
 8003798:	f000 fca4 	bl	80040e4 <RCCEx_PLL2_Config>
 800379c:	4603      	mov	r3, r0
 800379e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80037a2:	e003      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10d      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80037b4:	4b05      	ldr	r3, [pc, #20]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037b8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80037bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037c2:	4a02      	ldr	r2, [pc, #8]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037c4:	430b      	orrs	r3, r1
 80037c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037c8:	e006      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80037ca:	bf00      	nop
 80037cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80037d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80037e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037e6:	2300      	movs	r3, #0
 80037e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80037ea:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80037ee:	460b      	mov	r3, r1
 80037f0:	4313      	orrs	r3, r2
 80037f2:	d00c      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80037f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f8:	3328      	adds	r3, #40	@ 0x28
 80037fa:	2102      	movs	r1, #2
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 fd23 	bl	8004248 <RCCEx_PLL3_Config>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800380e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003816:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800381a:	663b      	str	r3, [r7, #96]	@ 0x60
 800381c:	2300      	movs	r3, #0
 800381e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003820:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003824:	460b      	mov	r3, r1
 8003826:	4313      	orrs	r3, r2
 8003828:	d038      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800382a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800382e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003832:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003836:	d018      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003838:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800383c:	d811      	bhi.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800383e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003842:	d014      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003844:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003848:	d80b      	bhi.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800384a:	2b00      	cmp	r3, #0
 800384c:	d011      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800384e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003852:	d106      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003854:	4bc3      	ldr	r3, [pc, #780]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003858:	4ac2      	ldr	r2, [pc, #776]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800385a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800385e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003860:	e008      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003868:	e004      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800386a:	bf00      	nop
 800386c:	e002      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800386e:	bf00      	nop
 8003870:	e000      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003872:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003874:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10b      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800387c:	4bb9      	ldr	r3, [pc, #740]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800387e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003880:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003888:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800388c:	4ab5      	ldr	r2, [pc, #724]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800388e:	430b      	orrs	r3, r1
 8003890:	6553      	str	r3, [r2, #84]	@ 0x54
 8003892:	e003      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003894:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003898:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800389c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80038a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80038aa:	2300      	movs	r3, #0
 80038ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038ae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80038b2:	460b      	mov	r3, r1
 80038b4:	4313      	orrs	r3, r2
 80038b6:	d009      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038b8:	4baa      	ldr	r3, [pc, #680]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038bc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80038c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038c6:	4aa7      	ldr	r2, [pc, #668]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038c8:	430b      	orrs	r3, r1
 80038ca:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80038cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80038d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80038da:	2300      	movs	r3, #0
 80038dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80038de:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80038e2:	460b      	mov	r3, r1
 80038e4:	4313      	orrs	r3, r2
 80038e6:	d00a      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80038e8:	4b9e      	ldr	r3, [pc, #632]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80038f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80038f8:	4a9a      	ldr	r2, [pc, #616]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038fa:	430b      	orrs	r3, r1
 80038fc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003906:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800390a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800390c:	2300      	movs	r3, #0
 800390e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003910:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003914:	460b      	mov	r3, r1
 8003916:	4313      	orrs	r3, r2
 8003918:	d009      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800391a:	4b92      	ldr	r3, [pc, #584]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800391c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800391e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003926:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003928:	4a8e      	ldr	r2, [pc, #568]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800392a:	430b      	orrs	r3, r1
 800392c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800392e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003936:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800393a:	643b      	str	r3, [r7, #64]	@ 0x40
 800393c:	2300      	movs	r3, #0
 800393e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003940:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003944:	460b      	mov	r3, r1
 8003946:	4313      	orrs	r3, r2
 8003948:	d00e      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800394a:	4b86      	ldr	r3, [pc, #536]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	4a85      	ldr	r2, [pc, #532]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003950:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003954:	6113      	str	r3, [r2, #16]
 8003956:	4b83      	ldr	r3, [pc, #524]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003958:	6919      	ldr	r1, [r3, #16]
 800395a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800395e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003962:	4a80      	ldr	r2, [pc, #512]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003964:	430b      	orrs	r3, r1
 8003966:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800396c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003970:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003974:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003976:	2300      	movs	r3, #0
 8003978:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800397a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800397e:	460b      	mov	r3, r1
 8003980:	4313      	orrs	r3, r2
 8003982:	d009      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003984:	4b77      	ldr	r3, [pc, #476]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003988:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800398c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003992:	4a74      	ldr	r2, [pc, #464]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003994:	430b      	orrs	r3, r1
 8003996:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800399c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80039a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80039a6:	2300      	movs	r3, #0
 80039a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80039aa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80039ae:	460b      	mov	r3, r1
 80039b0:	4313      	orrs	r3, r2
 80039b2:	d00a      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80039b4:	4b6b      	ldr	r3, [pc, #428]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80039bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039c4:	4a67      	ldr	r2, [pc, #412]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039c6:	430b      	orrs	r3, r1
 80039c8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80039ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d2:	2100      	movs	r1, #0
 80039d4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039dc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80039e0:	460b      	mov	r3, r1
 80039e2:	4313      	orrs	r3, r2
 80039e4:	d011      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ea:	3308      	adds	r3, #8
 80039ec:	2100      	movs	r1, #0
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 fb78 	bl	80040e4 <RCCEx_PLL2_Config>
 80039f4:	4603      	mov	r3, r0
 80039f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80039fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a12:	2100      	movs	r1, #0
 8003a14:	6239      	str	r1, [r7, #32]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a1c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003a20:	460b      	mov	r3, r1
 8003a22:	4313      	orrs	r3, r2
 8003a24:	d011      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a2a:	3308      	adds	r3, #8
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fb58 	bl	80040e4 <RCCEx_PLL2_Config>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a52:	2100      	movs	r1, #0
 8003a54:	61b9      	str	r1, [r7, #24]
 8003a56:	f003 0304 	and.w	r3, r3, #4
 8003a5a:	61fb      	str	r3, [r7, #28]
 8003a5c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003a60:	460b      	mov	r3, r1
 8003a62:	4313      	orrs	r3, r2
 8003a64:	d011      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a6a:	3308      	adds	r3, #8
 8003a6c:	2102      	movs	r1, #2
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 fb38 	bl	80040e4 <RCCEx_PLL2_Config>
 8003a74:	4603      	mov	r3, r0
 8003a76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a92:	2100      	movs	r1, #0
 8003a94:	6139      	str	r1, [r7, #16]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	617b      	str	r3, [r7, #20]
 8003a9c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	d011      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aaa:	3328      	adds	r3, #40	@ 0x28
 8003aac:	2100      	movs	r1, #0
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 fbca 	bl	8004248 <RCCEx_PLL3_Config>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003aba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ac6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	f003 0310 	and.w	r3, r3, #16
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	d011      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aea:	3328      	adds	r3, #40	@ 0x28
 8003aec:	2101      	movs	r1, #1
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 fbaa 	bl	8004248 <RCCEx_PLL3_Config>
 8003af4:	4603      	mov	r3, r0
 8003af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003afa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b12:	2100      	movs	r1, #0
 8003b14:	6039      	str	r1, [r7, #0]
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	607b      	str	r3, [r7, #4]
 8003b1c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003b20:	460b      	mov	r3, r1
 8003b22:	4313      	orrs	r3, r2
 8003b24:	d011      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b2a:	3328      	adds	r3, #40	@ 0x28
 8003b2c:	2102      	movs	r1, #2
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 fb8a 	bl	8004248 <RCCEx_PLL3_Config>
 8003b34:	4603      	mov	r3, r0
 8003b36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003b4a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	e000      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b64:	58024400 	.word	0x58024400

08003b68 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003b6c:	f7fe fd96 	bl	800269c <HAL_RCC_GetHCLKFreq>
 8003b70:	4602      	mov	r2, r0
 8003b72:	4b06      	ldr	r3, [pc, #24]	@ (8003b8c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	091b      	lsrs	r3, r3, #4
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	4904      	ldr	r1, [pc, #16]	@ (8003b90 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003b7e:	5ccb      	ldrb	r3, [r1, r3]
 8003b80:	f003 031f 	and.w	r3, r3, #31
 8003b84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	58024400 	.word	0x58024400
 8003b90:	08006684 	.word	0x08006684

08003b94 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b089      	sub	sp, #36	@ 0x24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b9c:	4ba1      	ldr	r3, [pc, #644]	@ (8003e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba0:	f003 0303 	and.w	r3, r3, #3
 8003ba4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003ba6:	4b9f      	ldr	r3, [pc, #636]	@ (8003e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003baa:	0b1b      	lsrs	r3, r3, #12
 8003bac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bb0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003bb2:	4b9c      	ldr	r3, [pc, #624]	@ (8003e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb6:	091b      	lsrs	r3, r3, #4
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003bbe:	4b99      	ldr	r3, [pc, #612]	@ (8003e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc2:	08db      	lsrs	r3, r3, #3
 8003bc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	fb02 f303 	mul.w	r3, r2, r3
 8003bce:	ee07 3a90 	vmov	s15, r3
 8003bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 8111 	beq.w	8003e04 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	f000 8083 	beq.w	8003cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	f200 80a1 	bhi.w	8003d34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d003      	beq.n	8003c00 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d056      	beq.n	8003cac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003bfe:	e099      	b.n	8003d34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c00:	4b88      	ldr	r3, [pc, #544]	@ (8003e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0320 	and.w	r3, r3, #32
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d02d      	beq.n	8003c68 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c0c:	4b85      	ldr	r3, [pc, #532]	@ (8003e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	08db      	lsrs	r3, r3, #3
 8003c12:	f003 0303 	and.w	r3, r3, #3
 8003c16:	4a84      	ldr	r2, [pc, #528]	@ (8003e28 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003c18:	fa22 f303 	lsr.w	r3, r2, r3
 8003c1c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	ee07 3a90 	vmov	s15, r3
 8003c24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	ee07 3a90 	vmov	s15, r3
 8003c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c36:	4b7b      	ldr	r3, [pc, #492]	@ (8003e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c3e:	ee07 3a90 	vmov	s15, r3
 8003c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c46:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c4a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003e2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c62:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003c66:	e087      	b.n	8003d78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	ee07 3a90 	vmov	s15, r3
 8003c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c72:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003e30 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c7a:	4b6a      	ldr	r3, [pc, #424]	@ (8003e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c82:	ee07 3a90 	vmov	s15, r3
 8003c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c8e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003e2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ca6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003caa:	e065      	b.n	8003d78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	ee07 3a90 	vmov	s15, r3
 8003cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cb6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003e34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cbe:	4b59      	ldr	r3, [pc, #356]	@ (8003e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cc6:	ee07 3a90 	vmov	s15, r3
 8003cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cce:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cd2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003e2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cee:	e043      	b.n	8003d78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	ee07 3a90 	vmov	s15, r3
 8003cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cfa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003e38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d02:	4b48      	ldr	r3, [pc, #288]	@ (8003e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d0a:	ee07 3a90 	vmov	s15, r3
 8003d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d12:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d16:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003e2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d32:	e021      	b.n	8003d78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	ee07 3a90 	vmov	s15, r3
 8003d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d3e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003e34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d46:	4b37      	ldr	r3, [pc, #220]	@ (8003e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d4e:	ee07 3a90 	vmov	s15, r3
 8003d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d56:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d5a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003e2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d76:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003d78:	4b2a      	ldr	r3, [pc, #168]	@ (8003e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7c:	0a5b      	lsrs	r3, r3, #9
 8003d7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d82:	ee07 3a90 	vmov	s15, r3
 8003d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d92:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d9e:	ee17 2a90 	vmov	r2, s15
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003da6:	4b1f      	ldr	r3, [pc, #124]	@ (8003e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003daa:	0c1b      	lsrs	r3, r3, #16
 8003dac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003db0:	ee07 3a90 	vmov	s15, r3
 8003db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003db8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003dbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003dc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dcc:	ee17 2a90 	vmov	r2, s15
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003dd4:	4b13      	ldr	r3, [pc, #76]	@ (8003e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd8:	0e1b      	lsrs	r3, r3, #24
 8003dda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dde:	ee07 3a90 	vmov	s15, r3
 8003de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003de6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003dea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003dee:	edd7 6a07 	vldr	s13, [r7, #28]
 8003df2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003df6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dfa:	ee17 2a90 	vmov	r2, s15
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003e02:	e008      	b.n	8003e16 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	609a      	str	r2, [r3, #8]
}
 8003e16:	bf00      	nop
 8003e18:	3724      	adds	r7, #36	@ 0x24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	58024400 	.word	0x58024400
 8003e28:	03d09000 	.word	0x03d09000
 8003e2c:	46000000 	.word	0x46000000
 8003e30:	4c742400 	.word	0x4c742400
 8003e34:	4a742400 	.word	0x4a742400
 8003e38:	4af42400 	.word	0x4af42400

08003e3c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b089      	sub	sp, #36	@ 0x24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e44:	4ba1      	ldr	r3, [pc, #644]	@ (80040cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e48:	f003 0303 	and.w	r3, r3, #3
 8003e4c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003e4e:	4b9f      	ldr	r3, [pc, #636]	@ (80040cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e52:	0d1b      	lsrs	r3, r3, #20
 8003e54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e58:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003e5a:	4b9c      	ldr	r3, [pc, #624]	@ (80040cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e5e:	0a1b      	lsrs	r3, r3, #8
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003e66:	4b99      	ldr	r3, [pc, #612]	@ (80040cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e6a:	08db      	lsrs	r3, r3, #3
 8003e6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	fb02 f303 	mul.w	r3, r2, r3
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 8111 	beq.w	80040ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	f000 8083 	beq.w	8003f98 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	f200 80a1 	bhi.w	8003fdc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d056      	beq.n	8003f54 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003ea6:	e099      	b.n	8003fdc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ea8:	4b88      	ldr	r3, [pc, #544]	@ (80040cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d02d      	beq.n	8003f10 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003eb4:	4b85      	ldr	r3, [pc, #532]	@ (80040cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	08db      	lsrs	r3, r3, #3
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	4a84      	ldr	r2, [pc, #528]	@ (80040d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	ee07 3a90 	vmov	s15, r3
 8003ecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	ee07 3a90 	vmov	s15, r3
 8003ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ede:	4b7b      	ldr	r3, [pc, #492]	@ (80040cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ee6:	ee07 3a90 	vmov	s15, r3
 8003eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eee:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ef2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80040d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003efe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f0a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003f0e:	e087      	b.n	8004020 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	ee07 3a90 	vmov	s15, r3
 8003f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f1a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80040d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f22:	4b6a      	ldr	r3, [pc, #424]	@ (80040cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f2a:	ee07 3a90 	vmov	s15, r3
 8003f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f32:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f36:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80040d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f52:	e065      	b.n	8004020 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	ee07 3a90 	vmov	s15, r3
 8003f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f5e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80040dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f66:	4b59      	ldr	r3, [pc, #356]	@ (80040cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f6e:	ee07 3a90 	vmov	s15, r3
 8003f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f76:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f7a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80040d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f96:	e043      	b.n	8004020 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	ee07 3a90 	vmov	s15, r3
 8003f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fa2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80040e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003faa:	4b48      	ldr	r3, [pc, #288]	@ (80040cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb2:	ee07 3a90 	vmov	s15, r3
 8003fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fba:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fbe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80040d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fda:	e021      	b.n	8004020 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fe6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80040dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fee:	4b37      	ldr	r3, [pc, #220]	@ (80040cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff6:	ee07 3a90 	vmov	s15, r3
 8003ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ffe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004002:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80040d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800400a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800400e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800401a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800401e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004020:	4b2a      	ldr	r3, [pc, #168]	@ (80040cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004024:	0a5b      	lsrs	r3, r3, #9
 8004026:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800402a:	ee07 3a90 	vmov	s15, r3
 800402e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004032:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004036:	ee37 7a87 	vadd.f32	s14, s15, s14
 800403a:	edd7 6a07 	vldr	s13, [r7, #28]
 800403e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004046:	ee17 2a90 	vmov	r2, s15
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800404e:	4b1f      	ldr	r3, [pc, #124]	@ (80040cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004052:	0c1b      	lsrs	r3, r3, #16
 8004054:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004058:	ee07 3a90 	vmov	s15, r3
 800405c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004060:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004064:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004068:	edd7 6a07 	vldr	s13, [r7, #28]
 800406c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004070:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004074:	ee17 2a90 	vmov	r2, s15
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800407c:	4b13      	ldr	r3, [pc, #76]	@ (80040cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800407e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004080:	0e1b      	lsrs	r3, r3, #24
 8004082:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004086:	ee07 3a90 	vmov	s15, r3
 800408a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800408e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004092:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004096:	edd7 6a07 	vldr	s13, [r7, #28]
 800409a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800409e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040a2:	ee17 2a90 	vmov	r2, s15
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80040aa:	e008      	b.n	80040be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	609a      	str	r2, [r3, #8]
}
 80040be:	bf00      	nop
 80040c0:	3724      	adds	r7, #36	@ 0x24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	58024400 	.word	0x58024400
 80040d0:	03d09000 	.word	0x03d09000
 80040d4:	46000000 	.word	0x46000000
 80040d8:	4c742400 	.word	0x4c742400
 80040dc:	4a742400 	.word	0x4a742400
 80040e0:	4af42400 	.word	0x4af42400

080040e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80040f2:	4b53      	ldr	r3, [pc, #332]	@ (8004240 <RCCEx_PLL2_Config+0x15c>)
 80040f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	2b03      	cmp	r3, #3
 80040fc:	d101      	bne.n	8004102 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e099      	b.n	8004236 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004102:	4b4f      	ldr	r3, [pc, #316]	@ (8004240 <RCCEx_PLL2_Config+0x15c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a4e      	ldr	r2, [pc, #312]	@ (8004240 <RCCEx_PLL2_Config+0x15c>)
 8004108:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800410c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800410e:	f7fc ff75 	bl	8000ffc <HAL_GetTick>
 8004112:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004114:	e008      	b.n	8004128 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004116:	f7fc ff71 	bl	8000ffc <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d901      	bls.n	8004128 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e086      	b.n	8004236 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004128:	4b45      	ldr	r3, [pc, #276]	@ (8004240 <RCCEx_PLL2_Config+0x15c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1f0      	bne.n	8004116 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004134:	4b42      	ldr	r3, [pc, #264]	@ (8004240 <RCCEx_PLL2_Config+0x15c>)
 8004136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004138:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	031b      	lsls	r3, r3, #12
 8004142:	493f      	ldr	r1, [pc, #252]	@ (8004240 <RCCEx_PLL2_Config+0x15c>)
 8004144:	4313      	orrs	r3, r2
 8004146:	628b      	str	r3, [r1, #40]	@ 0x28
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	3b01      	subs	r3, #1
 800414e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	3b01      	subs	r3, #1
 8004158:	025b      	lsls	r3, r3, #9
 800415a:	b29b      	uxth	r3, r3
 800415c:	431a      	orrs	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	3b01      	subs	r3, #1
 8004164:	041b      	lsls	r3, r3, #16
 8004166:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	3b01      	subs	r3, #1
 8004172:	061b      	lsls	r3, r3, #24
 8004174:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004178:	4931      	ldr	r1, [pc, #196]	@ (8004240 <RCCEx_PLL2_Config+0x15c>)
 800417a:	4313      	orrs	r3, r2
 800417c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800417e:	4b30      	ldr	r3, [pc, #192]	@ (8004240 <RCCEx_PLL2_Config+0x15c>)
 8004180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004182:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	492d      	ldr	r1, [pc, #180]	@ (8004240 <RCCEx_PLL2_Config+0x15c>)
 800418c:	4313      	orrs	r3, r2
 800418e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004190:	4b2b      	ldr	r3, [pc, #172]	@ (8004240 <RCCEx_PLL2_Config+0x15c>)
 8004192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004194:	f023 0220 	bic.w	r2, r3, #32
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	4928      	ldr	r1, [pc, #160]	@ (8004240 <RCCEx_PLL2_Config+0x15c>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80041a2:	4b27      	ldr	r3, [pc, #156]	@ (8004240 <RCCEx_PLL2_Config+0x15c>)
 80041a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a6:	4a26      	ldr	r2, [pc, #152]	@ (8004240 <RCCEx_PLL2_Config+0x15c>)
 80041a8:	f023 0310 	bic.w	r3, r3, #16
 80041ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80041ae:	4b24      	ldr	r3, [pc, #144]	@ (8004240 <RCCEx_PLL2_Config+0x15c>)
 80041b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041b2:	4b24      	ldr	r3, [pc, #144]	@ (8004244 <RCCEx_PLL2_Config+0x160>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	69d2      	ldr	r2, [r2, #28]
 80041ba:	00d2      	lsls	r2, r2, #3
 80041bc:	4920      	ldr	r1, [pc, #128]	@ (8004240 <RCCEx_PLL2_Config+0x15c>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80041c2:	4b1f      	ldr	r3, [pc, #124]	@ (8004240 <RCCEx_PLL2_Config+0x15c>)
 80041c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c6:	4a1e      	ldr	r2, [pc, #120]	@ (8004240 <RCCEx_PLL2_Config+0x15c>)
 80041c8:	f043 0310 	orr.w	r3, r3, #16
 80041cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d106      	bne.n	80041e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80041d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004240 <RCCEx_PLL2_Config+0x15c>)
 80041d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d8:	4a19      	ldr	r2, [pc, #100]	@ (8004240 <RCCEx_PLL2_Config+0x15c>)
 80041da:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80041de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80041e0:	e00f      	b.n	8004202 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d106      	bne.n	80041f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80041e8:	4b15      	ldr	r3, [pc, #84]	@ (8004240 <RCCEx_PLL2_Config+0x15c>)
 80041ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ec:	4a14      	ldr	r2, [pc, #80]	@ (8004240 <RCCEx_PLL2_Config+0x15c>)
 80041ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80041f4:	e005      	b.n	8004202 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80041f6:	4b12      	ldr	r3, [pc, #72]	@ (8004240 <RCCEx_PLL2_Config+0x15c>)
 80041f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fa:	4a11      	ldr	r2, [pc, #68]	@ (8004240 <RCCEx_PLL2_Config+0x15c>)
 80041fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004200:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004202:	4b0f      	ldr	r3, [pc, #60]	@ (8004240 <RCCEx_PLL2_Config+0x15c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a0e      	ldr	r2, [pc, #56]	@ (8004240 <RCCEx_PLL2_Config+0x15c>)
 8004208:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800420c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800420e:	f7fc fef5 	bl	8000ffc <HAL_GetTick>
 8004212:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004214:	e008      	b.n	8004228 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004216:	f7fc fef1 	bl	8000ffc <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d901      	bls.n	8004228 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e006      	b.n	8004236 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004228:	4b05      	ldr	r3, [pc, #20]	@ (8004240 <RCCEx_PLL2_Config+0x15c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d0f0      	beq.n	8004216 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004234:	7bfb      	ldrb	r3, [r7, #15]
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	58024400 	.word	0x58024400
 8004244:	ffff0007 	.word	0xffff0007

08004248 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004252:	2300      	movs	r3, #0
 8004254:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004256:	4b53      	ldr	r3, [pc, #332]	@ (80043a4 <RCCEx_PLL3_Config+0x15c>)
 8004258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800425a:	f003 0303 	and.w	r3, r3, #3
 800425e:	2b03      	cmp	r3, #3
 8004260:	d101      	bne.n	8004266 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e099      	b.n	800439a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004266:	4b4f      	ldr	r3, [pc, #316]	@ (80043a4 <RCCEx_PLL3_Config+0x15c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a4e      	ldr	r2, [pc, #312]	@ (80043a4 <RCCEx_PLL3_Config+0x15c>)
 800426c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004270:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004272:	f7fc fec3 	bl	8000ffc <HAL_GetTick>
 8004276:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004278:	e008      	b.n	800428c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800427a:	f7fc febf 	bl	8000ffc <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d901      	bls.n	800428c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e086      	b.n	800439a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800428c:	4b45      	ldr	r3, [pc, #276]	@ (80043a4 <RCCEx_PLL3_Config+0x15c>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1f0      	bne.n	800427a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004298:	4b42      	ldr	r3, [pc, #264]	@ (80043a4 <RCCEx_PLL3_Config+0x15c>)
 800429a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	051b      	lsls	r3, r3, #20
 80042a6:	493f      	ldr	r1, [pc, #252]	@ (80043a4 <RCCEx_PLL3_Config+0x15c>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	628b      	str	r3, [r1, #40]	@ 0x28
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	3b01      	subs	r3, #1
 80042b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	025b      	lsls	r3, r3, #9
 80042be:	b29b      	uxth	r3, r3
 80042c0:	431a      	orrs	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	041b      	lsls	r3, r3, #16
 80042ca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	3b01      	subs	r3, #1
 80042d6:	061b      	lsls	r3, r3, #24
 80042d8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80042dc:	4931      	ldr	r1, [pc, #196]	@ (80043a4 <RCCEx_PLL3_Config+0x15c>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80042e2:	4b30      	ldr	r3, [pc, #192]	@ (80043a4 <RCCEx_PLL3_Config+0x15c>)
 80042e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	492d      	ldr	r1, [pc, #180]	@ (80043a4 <RCCEx_PLL3_Config+0x15c>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80042f4:	4b2b      	ldr	r3, [pc, #172]	@ (80043a4 <RCCEx_PLL3_Config+0x15c>)
 80042f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	4928      	ldr	r1, [pc, #160]	@ (80043a4 <RCCEx_PLL3_Config+0x15c>)
 8004302:	4313      	orrs	r3, r2
 8004304:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004306:	4b27      	ldr	r3, [pc, #156]	@ (80043a4 <RCCEx_PLL3_Config+0x15c>)
 8004308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800430a:	4a26      	ldr	r2, [pc, #152]	@ (80043a4 <RCCEx_PLL3_Config+0x15c>)
 800430c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004310:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004312:	4b24      	ldr	r3, [pc, #144]	@ (80043a4 <RCCEx_PLL3_Config+0x15c>)
 8004314:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004316:	4b24      	ldr	r3, [pc, #144]	@ (80043a8 <RCCEx_PLL3_Config+0x160>)
 8004318:	4013      	ands	r3, r2
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	69d2      	ldr	r2, [r2, #28]
 800431e:	00d2      	lsls	r2, r2, #3
 8004320:	4920      	ldr	r1, [pc, #128]	@ (80043a4 <RCCEx_PLL3_Config+0x15c>)
 8004322:	4313      	orrs	r3, r2
 8004324:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004326:	4b1f      	ldr	r3, [pc, #124]	@ (80043a4 <RCCEx_PLL3_Config+0x15c>)
 8004328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800432a:	4a1e      	ldr	r2, [pc, #120]	@ (80043a4 <RCCEx_PLL3_Config+0x15c>)
 800432c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004330:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d106      	bne.n	8004346 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004338:	4b1a      	ldr	r3, [pc, #104]	@ (80043a4 <RCCEx_PLL3_Config+0x15c>)
 800433a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800433c:	4a19      	ldr	r2, [pc, #100]	@ (80043a4 <RCCEx_PLL3_Config+0x15c>)
 800433e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004342:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004344:	e00f      	b.n	8004366 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d106      	bne.n	800435a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800434c:	4b15      	ldr	r3, [pc, #84]	@ (80043a4 <RCCEx_PLL3_Config+0x15c>)
 800434e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004350:	4a14      	ldr	r2, [pc, #80]	@ (80043a4 <RCCEx_PLL3_Config+0x15c>)
 8004352:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004356:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004358:	e005      	b.n	8004366 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800435a:	4b12      	ldr	r3, [pc, #72]	@ (80043a4 <RCCEx_PLL3_Config+0x15c>)
 800435c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800435e:	4a11      	ldr	r2, [pc, #68]	@ (80043a4 <RCCEx_PLL3_Config+0x15c>)
 8004360:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004364:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004366:	4b0f      	ldr	r3, [pc, #60]	@ (80043a4 <RCCEx_PLL3_Config+0x15c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a0e      	ldr	r2, [pc, #56]	@ (80043a4 <RCCEx_PLL3_Config+0x15c>)
 800436c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004370:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004372:	f7fc fe43 	bl	8000ffc <HAL_GetTick>
 8004376:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004378:	e008      	b.n	800438c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800437a:	f7fc fe3f 	bl	8000ffc <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d901      	bls.n	800438c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e006      	b.n	800439a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800438c:	4b05      	ldr	r3, [pc, #20]	@ (80043a4 <RCCEx_PLL3_Config+0x15c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0f0      	beq.n	800437a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004398:	7bfb      	ldrb	r3, [r7, #15]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	58024400 	.word	0x58024400
 80043a8:	ffff0007 	.word	0xffff0007

080043ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e042      	b.n	8004444 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d106      	bne.n	80043d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7fc fc25 	bl	8000c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2224      	movs	r2, #36	@ 0x24
 80043da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0201 	bic.w	r2, r2, #1
 80043ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d002      	beq.n	80043fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 fee6 	bl	80051c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 f97b 	bl	80046f8 <UART_SetConfig>
 8004402:	4603      	mov	r3, r0
 8004404:	2b01      	cmp	r3, #1
 8004406:	d101      	bne.n	800440c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e01b      	b.n	8004444 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800441a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689a      	ldr	r2, [r3, #8]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800442a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0201 	orr.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 ff65 	bl	800530c <UART_CheckIdleState>
 8004442:	4603      	mov	r3, r0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b08a      	sub	sp, #40	@ 0x28
 8004450:	af02      	add	r7, sp, #8
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	603b      	str	r3, [r7, #0]
 8004458:	4613      	mov	r3, r2
 800445a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004462:	2b20      	cmp	r3, #32
 8004464:	d17b      	bne.n	800455e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <HAL_UART_Transmit+0x26>
 800446c:	88fb      	ldrh	r3, [r7, #6]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e074      	b.n	8004560 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2221      	movs	r2, #33	@ 0x21
 8004482:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004486:	f7fc fdb9 	bl	8000ffc <HAL_GetTick>
 800448a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	88fa      	ldrh	r2, [r7, #6]
 8004490:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	88fa      	ldrh	r2, [r7, #6]
 8004498:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044a4:	d108      	bne.n	80044b8 <HAL_UART_Transmit+0x6c>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d104      	bne.n	80044b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	61bb      	str	r3, [r7, #24]
 80044b6:	e003      	b.n	80044c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044bc:	2300      	movs	r3, #0
 80044be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044c0:	e030      	b.n	8004524 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2200      	movs	r2, #0
 80044ca:	2180      	movs	r1, #128	@ 0x80
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 ffc7 	bl	8005460 <UART_WaitOnFlagUntilTimeout>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d005      	beq.n	80044e4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2220      	movs	r2, #32
 80044dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e03d      	b.n	8004560 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10b      	bne.n	8004502 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	881b      	ldrh	r3, [r3, #0]
 80044ee:	461a      	mov	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044f8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	3302      	adds	r3, #2
 80044fe:	61bb      	str	r3, [r7, #24]
 8004500:	e007      	b.n	8004512 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	781a      	ldrb	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	3301      	adds	r3, #1
 8004510:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004518:	b29b      	uxth	r3, r3
 800451a:	3b01      	subs	r3, #1
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800452a:	b29b      	uxth	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1c8      	bne.n	80044c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	9300      	str	r3, [sp, #0]
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	2200      	movs	r2, #0
 8004538:	2140      	movs	r1, #64	@ 0x40
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 ff90 	bl	8005460 <UART_WaitOnFlagUntilTimeout>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d005      	beq.n	8004552 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2220      	movs	r2, #32
 800454a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e006      	b.n	8004560 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2220      	movs	r2, #32
 8004556:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	e000      	b.n	8004560 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800455e:	2302      	movs	r3, #2
  }
}
 8004560:	4618      	mov	r0, r3
 8004562:	3720      	adds	r7, #32
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b08a      	sub	sp, #40	@ 0x28
 800456c:	af02      	add	r7, sp, #8
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	603b      	str	r3, [r7, #0]
 8004574:	4613      	mov	r3, r2
 8004576:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800457e:	2b20      	cmp	r3, #32
 8004580:	f040 80b5 	bne.w	80046ee <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <HAL_UART_Receive+0x28>
 800458a:	88fb      	ldrh	r3, [r7, #6]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e0ad      	b.n	80046f0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2222      	movs	r2, #34	@ 0x22
 80045a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045aa:	f7fc fd27 	bl	8000ffc <HAL_GetTick>
 80045ae:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	88fa      	ldrh	r2, [r7, #6]
 80045b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	88fa      	ldrh	r2, [r7, #6]
 80045bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045c8:	d10e      	bne.n	80045e8 <HAL_UART_Receive+0x80>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d105      	bne.n	80045de <HAL_UART_Receive+0x76>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80045d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80045dc:	e02d      	b.n	800463a <HAL_UART_Receive+0xd2>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	22ff      	movs	r2, #255	@ 0xff
 80045e2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80045e6:	e028      	b.n	800463a <HAL_UART_Receive+0xd2>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10d      	bne.n	800460c <HAL_UART_Receive+0xa4>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d104      	bne.n	8004602 <HAL_UART_Receive+0x9a>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	22ff      	movs	r2, #255	@ 0xff
 80045fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004600:	e01b      	b.n	800463a <HAL_UART_Receive+0xd2>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	227f      	movs	r2, #127	@ 0x7f
 8004606:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800460a:	e016      	b.n	800463a <HAL_UART_Receive+0xd2>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004614:	d10d      	bne.n	8004632 <HAL_UART_Receive+0xca>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d104      	bne.n	8004628 <HAL_UART_Receive+0xc0>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	227f      	movs	r2, #127	@ 0x7f
 8004622:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004626:	e008      	b.n	800463a <HAL_UART_Receive+0xd2>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	223f      	movs	r2, #63	@ 0x3f
 800462c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004630:	e003      	b.n	800463a <HAL_UART_Receive+0xd2>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004640:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800464a:	d108      	bne.n	800465e <HAL_UART_Receive+0xf6>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d104      	bne.n	800465e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004654:	2300      	movs	r3, #0
 8004656:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	61bb      	str	r3, [r7, #24]
 800465c:	e003      	b.n	8004666 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004662:	2300      	movs	r3, #0
 8004664:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004666:	e036      	b.n	80046d6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	2200      	movs	r2, #0
 8004670:	2120      	movs	r1, #32
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 fef4 	bl	8005460 <UART_WaitOnFlagUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d005      	beq.n	800468a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2220      	movs	r2, #32
 8004682:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e032      	b.n	80046f0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10c      	bne.n	80046aa <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004696:	b29a      	uxth	r2, r3
 8004698:	8a7b      	ldrh	r3, [r7, #18]
 800469a:	4013      	ands	r3, r2
 800469c:	b29a      	uxth	r2, r3
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	3302      	adds	r3, #2
 80046a6:	61bb      	str	r3, [r7, #24]
 80046a8:	e00c      	b.n	80046c4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	8a7b      	ldrh	r3, [r7, #18]
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	4013      	ands	r3, r2
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	3301      	adds	r3, #1
 80046c2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80046dc:	b29b      	uxth	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1c2      	bne.n	8004668 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2220      	movs	r2, #32
 80046e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80046ea:	2300      	movs	r3, #0
 80046ec:	e000      	b.n	80046f0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80046ee:	2302      	movs	r3, #2
  }
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3720      	adds	r7, #32
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046fc:	b092      	sub	sp, #72	@ 0x48
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	431a      	orrs	r2, r3
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	431a      	orrs	r2, r3
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	4313      	orrs	r3, r2
 800471e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	4bbe      	ldr	r3, [pc, #760]	@ (8004a20 <UART_SetConfig+0x328>)
 8004728:	4013      	ands	r3, r2
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	6812      	ldr	r2, [r2, #0]
 800472e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004730:	430b      	orrs	r3, r1
 8004732:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4ab3      	ldr	r2, [pc, #716]	@ (8004a24 <UART_SetConfig+0x32c>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d004      	beq.n	8004764 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004760:	4313      	orrs	r3, r2
 8004762:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	4baf      	ldr	r3, [pc, #700]	@ (8004a28 <UART_SetConfig+0x330>)
 800476c:	4013      	ands	r3, r2
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	6812      	ldr	r2, [r2, #0]
 8004772:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004774:	430b      	orrs	r3, r1
 8004776:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800477e:	f023 010f 	bic.w	r1, r3, #15
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4aa6      	ldr	r2, [pc, #664]	@ (8004a2c <UART_SetConfig+0x334>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d177      	bne.n	8004888 <UART_SetConfig+0x190>
 8004798:	4ba5      	ldr	r3, [pc, #660]	@ (8004a30 <UART_SetConfig+0x338>)
 800479a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800479c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047a0:	2b28      	cmp	r3, #40	@ 0x28
 80047a2:	d86d      	bhi.n	8004880 <UART_SetConfig+0x188>
 80047a4:	a201      	add	r2, pc, #4	@ (adr r2, 80047ac <UART_SetConfig+0xb4>)
 80047a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047aa:	bf00      	nop
 80047ac:	08004851 	.word	0x08004851
 80047b0:	08004881 	.word	0x08004881
 80047b4:	08004881 	.word	0x08004881
 80047b8:	08004881 	.word	0x08004881
 80047bc:	08004881 	.word	0x08004881
 80047c0:	08004881 	.word	0x08004881
 80047c4:	08004881 	.word	0x08004881
 80047c8:	08004881 	.word	0x08004881
 80047cc:	08004859 	.word	0x08004859
 80047d0:	08004881 	.word	0x08004881
 80047d4:	08004881 	.word	0x08004881
 80047d8:	08004881 	.word	0x08004881
 80047dc:	08004881 	.word	0x08004881
 80047e0:	08004881 	.word	0x08004881
 80047e4:	08004881 	.word	0x08004881
 80047e8:	08004881 	.word	0x08004881
 80047ec:	08004861 	.word	0x08004861
 80047f0:	08004881 	.word	0x08004881
 80047f4:	08004881 	.word	0x08004881
 80047f8:	08004881 	.word	0x08004881
 80047fc:	08004881 	.word	0x08004881
 8004800:	08004881 	.word	0x08004881
 8004804:	08004881 	.word	0x08004881
 8004808:	08004881 	.word	0x08004881
 800480c:	08004869 	.word	0x08004869
 8004810:	08004881 	.word	0x08004881
 8004814:	08004881 	.word	0x08004881
 8004818:	08004881 	.word	0x08004881
 800481c:	08004881 	.word	0x08004881
 8004820:	08004881 	.word	0x08004881
 8004824:	08004881 	.word	0x08004881
 8004828:	08004881 	.word	0x08004881
 800482c:	08004871 	.word	0x08004871
 8004830:	08004881 	.word	0x08004881
 8004834:	08004881 	.word	0x08004881
 8004838:	08004881 	.word	0x08004881
 800483c:	08004881 	.word	0x08004881
 8004840:	08004881 	.word	0x08004881
 8004844:	08004881 	.word	0x08004881
 8004848:	08004881 	.word	0x08004881
 800484c:	08004879 	.word	0x08004879
 8004850:	2301      	movs	r3, #1
 8004852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004856:	e222      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004858:	2304      	movs	r3, #4
 800485a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800485e:	e21e      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004860:	2308      	movs	r3, #8
 8004862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004866:	e21a      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004868:	2310      	movs	r3, #16
 800486a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800486e:	e216      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004870:	2320      	movs	r3, #32
 8004872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004876:	e212      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004878:	2340      	movs	r3, #64	@ 0x40
 800487a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800487e:	e20e      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004880:	2380      	movs	r3, #128	@ 0x80
 8004882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004886:	e20a      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a69      	ldr	r2, [pc, #420]	@ (8004a34 <UART_SetConfig+0x33c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d130      	bne.n	80048f4 <UART_SetConfig+0x1fc>
 8004892:	4b67      	ldr	r3, [pc, #412]	@ (8004a30 <UART_SetConfig+0x338>)
 8004894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004896:	f003 0307 	and.w	r3, r3, #7
 800489a:	2b05      	cmp	r3, #5
 800489c:	d826      	bhi.n	80048ec <UART_SetConfig+0x1f4>
 800489e:	a201      	add	r2, pc, #4	@ (adr r2, 80048a4 <UART_SetConfig+0x1ac>)
 80048a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a4:	080048bd 	.word	0x080048bd
 80048a8:	080048c5 	.word	0x080048c5
 80048ac:	080048cd 	.word	0x080048cd
 80048b0:	080048d5 	.word	0x080048d5
 80048b4:	080048dd 	.word	0x080048dd
 80048b8:	080048e5 	.word	0x080048e5
 80048bc:	2300      	movs	r3, #0
 80048be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048c2:	e1ec      	b.n	8004c9e <UART_SetConfig+0x5a6>
 80048c4:	2304      	movs	r3, #4
 80048c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048ca:	e1e8      	b.n	8004c9e <UART_SetConfig+0x5a6>
 80048cc:	2308      	movs	r3, #8
 80048ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048d2:	e1e4      	b.n	8004c9e <UART_SetConfig+0x5a6>
 80048d4:	2310      	movs	r3, #16
 80048d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048da:	e1e0      	b.n	8004c9e <UART_SetConfig+0x5a6>
 80048dc:	2320      	movs	r3, #32
 80048de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048e2:	e1dc      	b.n	8004c9e <UART_SetConfig+0x5a6>
 80048e4:	2340      	movs	r3, #64	@ 0x40
 80048e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048ea:	e1d8      	b.n	8004c9e <UART_SetConfig+0x5a6>
 80048ec:	2380      	movs	r3, #128	@ 0x80
 80048ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048f2:	e1d4      	b.n	8004c9e <UART_SetConfig+0x5a6>
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a4f      	ldr	r2, [pc, #316]	@ (8004a38 <UART_SetConfig+0x340>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d130      	bne.n	8004960 <UART_SetConfig+0x268>
 80048fe:	4b4c      	ldr	r3, [pc, #304]	@ (8004a30 <UART_SetConfig+0x338>)
 8004900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	2b05      	cmp	r3, #5
 8004908:	d826      	bhi.n	8004958 <UART_SetConfig+0x260>
 800490a:	a201      	add	r2, pc, #4	@ (adr r2, 8004910 <UART_SetConfig+0x218>)
 800490c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004910:	08004929 	.word	0x08004929
 8004914:	08004931 	.word	0x08004931
 8004918:	08004939 	.word	0x08004939
 800491c:	08004941 	.word	0x08004941
 8004920:	08004949 	.word	0x08004949
 8004924:	08004951 	.word	0x08004951
 8004928:	2300      	movs	r3, #0
 800492a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800492e:	e1b6      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004930:	2304      	movs	r3, #4
 8004932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004936:	e1b2      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004938:	2308      	movs	r3, #8
 800493a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800493e:	e1ae      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004940:	2310      	movs	r3, #16
 8004942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004946:	e1aa      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004948:	2320      	movs	r3, #32
 800494a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800494e:	e1a6      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004950:	2340      	movs	r3, #64	@ 0x40
 8004952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004956:	e1a2      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004958:	2380      	movs	r3, #128	@ 0x80
 800495a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800495e:	e19e      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a35      	ldr	r2, [pc, #212]	@ (8004a3c <UART_SetConfig+0x344>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d130      	bne.n	80049cc <UART_SetConfig+0x2d4>
 800496a:	4b31      	ldr	r3, [pc, #196]	@ (8004a30 <UART_SetConfig+0x338>)
 800496c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800496e:	f003 0307 	and.w	r3, r3, #7
 8004972:	2b05      	cmp	r3, #5
 8004974:	d826      	bhi.n	80049c4 <UART_SetConfig+0x2cc>
 8004976:	a201      	add	r2, pc, #4	@ (adr r2, 800497c <UART_SetConfig+0x284>)
 8004978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497c:	08004995 	.word	0x08004995
 8004980:	0800499d 	.word	0x0800499d
 8004984:	080049a5 	.word	0x080049a5
 8004988:	080049ad 	.word	0x080049ad
 800498c:	080049b5 	.word	0x080049b5
 8004990:	080049bd 	.word	0x080049bd
 8004994:	2300      	movs	r3, #0
 8004996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800499a:	e180      	b.n	8004c9e <UART_SetConfig+0x5a6>
 800499c:	2304      	movs	r3, #4
 800499e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049a2:	e17c      	b.n	8004c9e <UART_SetConfig+0x5a6>
 80049a4:	2308      	movs	r3, #8
 80049a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049aa:	e178      	b.n	8004c9e <UART_SetConfig+0x5a6>
 80049ac:	2310      	movs	r3, #16
 80049ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049b2:	e174      	b.n	8004c9e <UART_SetConfig+0x5a6>
 80049b4:	2320      	movs	r3, #32
 80049b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ba:	e170      	b.n	8004c9e <UART_SetConfig+0x5a6>
 80049bc:	2340      	movs	r3, #64	@ 0x40
 80049be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049c2:	e16c      	b.n	8004c9e <UART_SetConfig+0x5a6>
 80049c4:	2380      	movs	r3, #128	@ 0x80
 80049c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ca:	e168      	b.n	8004c9e <UART_SetConfig+0x5a6>
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004a40 <UART_SetConfig+0x348>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d142      	bne.n	8004a5c <UART_SetConfig+0x364>
 80049d6:	4b16      	ldr	r3, [pc, #88]	@ (8004a30 <UART_SetConfig+0x338>)
 80049d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049da:	f003 0307 	and.w	r3, r3, #7
 80049de:	2b05      	cmp	r3, #5
 80049e0:	d838      	bhi.n	8004a54 <UART_SetConfig+0x35c>
 80049e2:	a201      	add	r2, pc, #4	@ (adr r2, 80049e8 <UART_SetConfig+0x2f0>)
 80049e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e8:	08004a01 	.word	0x08004a01
 80049ec:	08004a09 	.word	0x08004a09
 80049f0:	08004a11 	.word	0x08004a11
 80049f4:	08004a19 	.word	0x08004a19
 80049f8:	08004a45 	.word	0x08004a45
 80049fc:	08004a4d 	.word	0x08004a4d
 8004a00:	2300      	movs	r3, #0
 8004a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a06:	e14a      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004a08:	2304      	movs	r3, #4
 8004a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a0e:	e146      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004a10:	2308      	movs	r3, #8
 8004a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a16:	e142      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004a18:	2310      	movs	r3, #16
 8004a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a1e:	e13e      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004a20:	cfff69f3 	.word	0xcfff69f3
 8004a24:	58000c00 	.word	0x58000c00
 8004a28:	11fff4ff 	.word	0x11fff4ff
 8004a2c:	40011000 	.word	0x40011000
 8004a30:	58024400 	.word	0x58024400
 8004a34:	40004400 	.word	0x40004400
 8004a38:	40004800 	.word	0x40004800
 8004a3c:	40004c00 	.word	0x40004c00
 8004a40:	40005000 	.word	0x40005000
 8004a44:	2320      	movs	r3, #32
 8004a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a4a:	e128      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004a4c:	2340      	movs	r3, #64	@ 0x40
 8004a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a52:	e124      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004a54:	2380      	movs	r3, #128	@ 0x80
 8004a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a5a:	e120      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4acb      	ldr	r2, [pc, #812]	@ (8004d90 <UART_SetConfig+0x698>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d176      	bne.n	8004b54 <UART_SetConfig+0x45c>
 8004a66:	4bcb      	ldr	r3, [pc, #812]	@ (8004d94 <UART_SetConfig+0x69c>)
 8004a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a6e:	2b28      	cmp	r3, #40	@ 0x28
 8004a70:	d86c      	bhi.n	8004b4c <UART_SetConfig+0x454>
 8004a72:	a201      	add	r2, pc, #4	@ (adr r2, 8004a78 <UART_SetConfig+0x380>)
 8004a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a78:	08004b1d 	.word	0x08004b1d
 8004a7c:	08004b4d 	.word	0x08004b4d
 8004a80:	08004b4d 	.word	0x08004b4d
 8004a84:	08004b4d 	.word	0x08004b4d
 8004a88:	08004b4d 	.word	0x08004b4d
 8004a8c:	08004b4d 	.word	0x08004b4d
 8004a90:	08004b4d 	.word	0x08004b4d
 8004a94:	08004b4d 	.word	0x08004b4d
 8004a98:	08004b25 	.word	0x08004b25
 8004a9c:	08004b4d 	.word	0x08004b4d
 8004aa0:	08004b4d 	.word	0x08004b4d
 8004aa4:	08004b4d 	.word	0x08004b4d
 8004aa8:	08004b4d 	.word	0x08004b4d
 8004aac:	08004b4d 	.word	0x08004b4d
 8004ab0:	08004b4d 	.word	0x08004b4d
 8004ab4:	08004b4d 	.word	0x08004b4d
 8004ab8:	08004b2d 	.word	0x08004b2d
 8004abc:	08004b4d 	.word	0x08004b4d
 8004ac0:	08004b4d 	.word	0x08004b4d
 8004ac4:	08004b4d 	.word	0x08004b4d
 8004ac8:	08004b4d 	.word	0x08004b4d
 8004acc:	08004b4d 	.word	0x08004b4d
 8004ad0:	08004b4d 	.word	0x08004b4d
 8004ad4:	08004b4d 	.word	0x08004b4d
 8004ad8:	08004b35 	.word	0x08004b35
 8004adc:	08004b4d 	.word	0x08004b4d
 8004ae0:	08004b4d 	.word	0x08004b4d
 8004ae4:	08004b4d 	.word	0x08004b4d
 8004ae8:	08004b4d 	.word	0x08004b4d
 8004aec:	08004b4d 	.word	0x08004b4d
 8004af0:	08004b4d 	.word	0x08004b4d
 8004af4:	08004b4d 	.word	0x08004b4d
 8004af8:	08004b3d 	.word	0x08004b3d
 8004afc:	08004b4d 	.word	0x08004b4d
 8004b00:	08004b4d 	.word	0x08004b4d
 8004b04:	08004b4d 	.word	0x08004b4d
 8004b08:	08004b4d 	.word	0x08004b4d
 8004b0c:	08004b4d 	.word	0x08004b4d
 8004b10:	08004b4d 	.word	0x08004b4d
 8004b14:	08004b4d 	.word	0x08004b4d
 8004b18:	08004b45 	.word	0x08004b45
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b22:	e0bc      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004b24:	2304      	movs	r3, #4
 8004b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b2a:	e0b8      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004b2c:	2308      	movs	r3, #8
 8004b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b32:	e0b4      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004b34:	2310      	movs	r3, #16
 8004b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b3a:	e0b0      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004b3c:	2320      	movs	r3, #32
 8004b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b42:	e0ac      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004b44:	2340      	movs	r3, #64	@ 0x40
 8004b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b4a:	e0a8      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004b4c:	2380      	movs	r3, #128	@ 0x80
 8004b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b52:	e0a4      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a8f      	ldr	r2, [pc, #572]	@ (8004d98 <UART_SetConfig+0x6a0>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d130      	bne.n	8004bc0 <UART_SetConfig+0x4c8>
 8004b5e:	4b8d      	ldr	r3, [pc, #564]	@ (8004d94 <UART_SetConfig+0x69c>)
 8004b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	2b05      	cmp	r3, #5
 8004b68:	d826      	bhi.n	8004bb8 <UART_SetConfig+0x4c0>
 8004b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b70 <UART_SetConfig+0x478>)
 8004b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b70:	08004b89 	.word	0x08004b89
 8004b74:	08004b91 	.word	0x08004b91
 8004b78:	08004b99 	.word	0x08004b99
 8004b7c:	08004ba1 	.word	0x08004ba1
 8004b80:	08004ba9 	.word	0x08004ba9
 8004b84:	08004bb1 	.word	0x08004bb1
 8004b88:	2300      	movs	r3, #0
 8004b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b8e:	e086      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004b90:	2304      	movs	r3, #4
 8004b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b96:	e082      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004b98:	2308      	movs	r3, #8
 8004b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b9e:	e07e      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004ba0:	2310      	movs	r3, #16
 8004ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ba6:	e07a      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004ba8:	2320      	movs	r3, #32
 8004baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bae:	e076      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004bb0:	2340      	movs	r3, #64	@ 0x40
 8004bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bb6:	e072      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004bb8:	2380      	movs	r3, #128	@ 0x80
 8004bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bbe:	e06e      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a75      	ldr	r2, [pc, #468]	@ (8004d9c <UART_SetConfig+0x6a4>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d130      	bne.n	8004c2c <UART_SetConfig+0x534>
 8004bca:	4b72      	ldr	r3, [pc, #456]	@ (8004d94 <UART_SetConfig+0x69c>)
 8004bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bce:	f003 0307 	and.w	r3, r3, #7
 8004bd2:	2b05      	cmp	r3, #5
 8004bd4:	d826      	bhi.n	8004c24 <UART_SetConfig+0x52c>
 8004bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8004bdc <UART_SetConfig+0x4e4>)
 8004bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bdc:	08004bf5 	.word	0x08004bf5
 8004be0:	08004bfd 	.word	0x08004bfd
 8004be4:	08004c05 	.word	0x08004c05
 8004be8:	08004c0d 	.word	0x08004c0d
 8004bec:	08004c15 	.word	0x08004c15
 8004bf0:	08004c1d 	.word	0x08004c1d
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bfa:	e050      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004bfc:	2304      	movs	r3, #4
 8004bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c02:	e04c      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004c04:	2308      	movs	r3, #8
 8004c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c0a:	e048      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004c0c:	2310      	movs	r3, #16
 8004c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c12:	e044      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004c14:	2320      	movs	r3, #32
 8004c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c1a:	e040      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004c1c:	2340      	movs	r3, #64	@ 0x40
 8004c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c22:	e03c      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004c24:	2380      	movs	r3, #128	@ 0x80
 8004c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c2a:	e038      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a5b      	ldr	r2, [pc, #364]	@ (8004da0 <UART_SetConfig+0x6a8>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d130      	bne.n	8004c98 <UART_SetConfig+0x5a0>
 8004c36:	4b57      	ldr	r3, [pc, #348]	@ (8004d94 <UART_SetConfig+0x69c>)
 8004c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c3a:	f003 0307 	and.w	r3, r3, #7
 8004c3e:	2b05      	cmp	r3, #5
 8004c40:	d826      	bhi.n	8004c90 <UART_SetConfig+0x598>
 8004c42:	a201      	add	r2, pc, #4	@ (adr r2, 8004c48 <UART_SetConfig+0x550>)
 8004c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c48:	08004c61 	.word	0x08004c61
 8004c4c:	08004c69 	.word	0x08004c69
 8004c50:	08004c71 	.word	0x08004c71
 8004c54:	08004c79 	.word	0x08004c79
 8004c58:	08004c81 	.word	0x08004c81
 8004c5c:	08004c89 	.word	0x08004c89
 8004c60:	2302      	movs	r3, #2
 8004c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c66:	e01a      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004c68:	2304      	movs	r3, #4
 8004c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c6e:	e016      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004c70:	2308      	movs	r3, #8
 8004c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c76:	e012      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004c78:	2310      	movs	r3, #16
 8004c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c7e:	e00e      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004c80:	2320      	movs	r3, #32
 8004c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c86:	e00a      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004c88:	2340      	movs	r3, #64	@ 0x40
 8004c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c8e:	e006      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004c90:	2380      	movs	r3, #128	@ 0x80
 8004c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c96:	e002      	b.n	8004c9e <UART_SetConfig+0x5a6>
 8004c98:	2380      	movs	r3, #128	@ 0x80
 8004c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a3f      	ldr	r2, [pc, #252]	@ (8004da0 <UART_SetConfig+0x6a8>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	f040 80f8 	bne.w	8004e9a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004caa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004cae:	2b20      	cmp	r3, #32
 8004cb0:	dc46      	bgt.n	8004d40 <UART_SetConfig+0x648>
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	f2c0 8082 	blt.w	8004dbc <UART_SetConfig+0x6c4>
 8004cb8:	3b02      	subs	r3, #2
 8004cba:	2b1e      	cmp	r3, #30
 8004cbc:	d87e      	bhi.n	8004dbc <UART_SetConfig+0x6c4>
 8004cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8004cc4 <UART_SetConfig+0x5cc>)
 8004cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc4:	08004d47 	.word	0x08004d47
 8004cc8:	08004dbd 	.word	0x08004dbd
 8004ccc:	08004d4f 	.word	0x08004d4f
 8004cd0:	08004dbd 	.word	0x08004dbd
 8004cd4:	08004dbd 	.word	0x08004dbd
 8004cd8:	08004dbd 	.word	0x08004dbd
 8004cdc:	08004d5f 	.word	0x08004d5f
 8004ce0:	08004dbd 	.word	0x08004dbd
 8004ce4:	08004dbd 	.word	0x08004dbd
 8004ce8:	08004dbd 	.word	0x08004dbd
 8004cec:	08004dbd 	.word	0x08004dbd
 8004cf0:	08004dbd 	.word	0x08004dbd
 8004cf4:	08004dbd 	.word	0x08004dbd
 8004cf8:	08004dbd 	.word	0x08004dbd
 8004cfc:	08004d6f 	.word	0x08004d6f
 8004d00:	08004dbd 	.word	0x08004dbd
 8004d04:	08004dbd 	.word	0x08004dbd
 8004d08:	08004dbd 	.word	0x08004dbd
 8004d0c:	08004dbd 	.word	0x08004dbd
 8004d10:	08004dbd 	.word	0x08004dbd
 8004d14:	08004dbd 	.word	0x08004dbd
 8004d18:	08004dbd 	.word	0x08004dbd
 8004d1c:	08004dbd 	.word	0x08004dbd
 8004d20:	08004dbd 	.word	0x08004dbd
 8004d24:	08004dbd 	.word	0x08004dbd
 8004d28:	08004dbd 	.word	0x08004dbd
 8004d2c:	08004dbd 	.word	0x08004dbd
 8004d30:	08004dbd 	.word	0x08004dbd
 8004d34:	08004dbd 	.word	0x08004dbd
 8004d38:	08004dbd 	.word	0x08004dbd
 8004d3c:	08004daf 	.word	0x08004daf
 8004d40:	2b40      	cmp	r3, #64	@ 0x40
 8004d42:	d037      	beq.n	8004db4 <UART_SetConfig+0x6bc>
 8004d44:	e03a      	b.n	8004dbc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004d46:	f7fe ff0f 	bl	8003b68 <HAL_RCCEx_GetD3PCLK1Freq>
 8004d4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004d4c:	e03c      	b.n	8004dc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fe ff1e 	bl	8003b94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d5c:	e034      	b.n	8004dc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d5e:	f107 0318 	add.w	r3, r7, #24
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7ff f86a 	bl	8003e3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d6c:	e02c      	b.n	8004dc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d6e:	4b09      	ldr	r3, [pc, #36]	@ (8004d94 <UART_SetConfig+0x69c>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0320 	and.w	r3, r3, #32
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d016      	beq.n	8004da8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004d7a:	4b06      	ldr	r3, [pc, #24]	@ (8004d94 <UART_SetConfig+0x69c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	08db      	lsrs	r3, r3, #3
 8004d80:	f003 0303 	and.w	r3, r3, #3
 8004d84:	4a07      	ldr	r2, [pc, #28]	@ (8004da4 <UART_SetConfig+0x6ac>)
 8004d86:	fa22 f303 	lsr.w	r3, r2, r3
 8004d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004d8c:	e01c      	b.n	8004dc8 <UART_SetConfig+0x6d0>
 8004d8e:	bf00      	nop
 8004d90:	40011400 	.word	0x40011400
 8004d94:	58024400 	.word	0x58024400
 8004d98:	40007800 	.word	0x40007800
 8004d9c:	40007c00 	.word	0x40007c00
 8004da0:	58000c00 	.word	0x58000c00
 8004da4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004da8:	4b9d      	ldr	r3, [pc, #628]	@ (8005020 <UART_SetConfig+0x928>)
 8004daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004dac:	e00c      	b.n	8004dc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004dae:	4b9d      	ldr	r3, [pc, #628]	@ (8005024 <UART_SetConfig+0x92c>)
 8004db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004db2:	e009      	b.n	8004dc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004db4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004dba:	e005      	b.n	8004dc8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004dc6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004dc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f000 81de 	beq.w	800518c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd4:	4a94      	ldr	r2, [pc, #592]	@ (8005028 <UART_SetConfig+0x930>)
 8004dd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dde:	fbb3 f3f2 	udiv	r3, r3, r2
 8004de2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	4613      	mov	r3, r2
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	4413      	add	r3, r2
 8004dee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d305      	bcc.n	8004e00 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004dfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d903      	bls.n	8004e08 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004e06:	e1c1      	b.n	800518c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	60bb      	str	r3, [r7, #8]
 8004e0e:	60fa      	str	r2, [r7, #12]
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e14:	4a84      	ldr	r2, [pc, #528]	@ (8005028 <UART_SetConfig+0x930>)
 8004e16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	603b      	str	r3, [r7, #0]
 8004e20:	607a      	str	r2, [r7, #4]
 8004e22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e2a:	f7fb faa9 	bl	8000380 <__aeabi_uldivmod>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	4610      	mov	r0, r2
 8004e34:	4619      	mov	r1, r3
 8004e36:	f04f 0200 	mov.w	r2, #0
 8004e3a:	f04f 0300 	mov.w	r3, #0
 8004e3e:	020b      	lsls	r3, r1, #8
 8004e40:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e44:	0202      	lsls	r2, r0, #8
 8004e46:	6979      	ldr	r1, [r7, #20]
 8004e48:	6849      	ldr	r1, [r1, #4]
 8004e4a:	0849      	lsrs	r1, r1, #1
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	460c      	mov	r4, r1
 8004e50:	4605      	mov	r5, r0
 8004e52:	eb12 0804 	adds.w	r8, r2, r4
 8004e56:	eb43 0905 	adc.w	r9, r3, r5
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	469a      	mov	sl, r3
 8004e62:	4693      	mov	fp, r2
 8004e64:	4652      	mov	r2, sl
 8004e66:	465b      	mov	r3, fp
 8004e68:	4640      	mov	r0, r8
 8004e6a:	4649      	mov	r1, r9
 8004e6c:	f7fb fa88 	bl	8000380 <__aeabi_uldivmod>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4613      	mov	r3, r2
 8004e76:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e7e:	d308      	bcc.n	8004e92 <UART_SetConfig+0x79a>
 8004e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e86:	d204      	bcs.n	8004e92 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e8e:	60da      	str	r2, [r3, #12]
 8004e90:	e17c      	b.n	800518c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004e98:	e178      	b.n	800518c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ea2:	f040 80c5 	bne.w	8005030 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004ea6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004eaa:	2b20      	cmp	r3, #32
 8004eac:	dc48      	bgt.n	8004f40 <UART_SetConfig+0x848>
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	db7b      	blt.n	8004faa <UART_SetConfig+0x8b2>
 8004eb2:	2b20      	cmp	r3, #32
 8004eb4:	d879      	bhi.n	8004faa <UART_SetConfig+0x8b2>
 8004eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8004ebc <UART_SetConfig+0x7c4>)
 8004eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ebc:	08004f47 	.word	0x08004f47
 8004ec0:	08004f4f 	.word	0x08004f4f
 8004ec4:	08004fab 	.word	0x08004fab
 8004ec8:	08004fab 	.word	0x08004fab
 8004ecc:	08004f57 	.word	0x08004f57
 8004ed0:	08004fab 	.word	0x08004fab
 8004ed4:	08004fab 	.word	0x08004fab
 8004ed8:	08004fab 	.word	0x08004fab
 8004edc:	08004f67 	.word	0x08004f67
 8004ee0:	08004fab 	.word	0x08004fab
 8004ee4:	08004fab 	.word	0x08004fab
 8004ee8:	08004fab 	.word	0x08004fab
 8004eec:	08004fab 	.word	0x08004fab
 8004ef0:	08004fab 	.word	0x08004fab
 8004ef4:	08004fab 	.word	0x08004fab
 8004ef8:	08004fab 	.word	0x08004fab
 8004efc:	08004f77 	.word	0x08004f77
 8004f00:	08004fab 	.word	0x08004fab
 8004f04:	08004fab 	.word	0x08004fab
 8004f08:	08004fab 	.word	0x08004fab
 8004f0c:	08004fab 	.word	0x08004fab
 8004f10:	08004fab 	.word	0x08004fab
 8004f14:	08004fab 	.word	0x08004fab
 8004f18:	08004fab 	.word	0x08004fab
 8004f1c:	08004fab 	.word	0x08004fab
 8004f20:	08004fab 	.word	0x08004fab
 8004f24:	08004fab 	.word	0x08004fab
 8004f28:	08004fab 	.word	0x08004fab
 8004f2c:	08004fab 	.word	0x08004fab
 8004f30:	08004fab 	.word	0x08004fab
 8004f34:	08004fab 	.word	0x08004fab
 8004f38:	08004fab 	.word	0x08004fab
 8004f3c:	08004f9d 	.word	0x08004f9d
 8004f40:	2b40      	cmp	r3, #64	@ 0x40
 8004f42:	d02e      	beq.n	8004fa2 <UART_SetConfig+0x8aa>
 8004f44:	e031      	b.n	8004faa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f46:	f7fd fbd9 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
 8004f4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004f4c:	e033      	b.n	8004fb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f4e:	f7fd fbeb 	bl	8002728 <HAL_RCC_GetPCLK2Freq>
 8004f52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004f54:	e02f      	b.n	8004fb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7fe fe1a 	bl	8003b94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f64:	e027      	b.n	8004fb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f66:	f107 0318 	add.w	r3, r7, #24
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fe ff66 	bl	8003e3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f74:	e01f      	b.n	8004fb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f76:	4b2d      	ldr	r3, [pc, #180]	@ (800502c <UART_SetConfig+0x934>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0320 	and.w	r3, r3, #32
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d009      	beq.n	8004f96 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004f82:	4b2a      	ldr	r3, [pc, #168]	@ (800502c <UART_SetConfig+0x934>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	08db      	lsrs	r3, r3, #3
 8004f88:	f003 0303 	and.w	r3, r3, #3
 8004f8c:	4a24      	ldr	r2, [pc, #144]	@ (8005020 <UART_SetConfig+0x928>)
 8004f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f94:	e00f      	b.n	8004fb6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004f96:	4b22      	ldr	r3, [pc, #136]	@ (8005020 <UART_SetConfig+0x928>)
 8004f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f9a:	e00c      	b.n	8004fb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004f9c:	4b21      	ldr	r3, [pc, #132]	@ (8005024 <UART_SetConfig+0x92c>)
 8004f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fa0:	e009      	b.n	8004fb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fa8:	e005      	b.n	8004fb6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004fb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f000 80e7 	beq.w	800518c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc2:	4a19      	ldr	r2, [pc, #100]	@ (8005028 <UART_SetConfig+0x930>)
 8004fc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fc8:	461a      	mov	r2, r3
 8004fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fd0:	005a      	lsls	r2, r3, #1
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	085b      	lsrs	r3, r3, #1
 8004fd8:	441a      	add	r2, r3
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fe6:	2b0f      	cmp	r3, #15
 8004fe8:	d916      	bls.n	8005018 <UART_SetConfig+0x920>
 8004fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ff0:	d212      	bcs.n	8005018 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	f023 030f 	bic.w	r3, r3, #15
 8004ffa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ffe:	085b      	lsrs	r3, r3, #1
 8005000:	b29b      	uxth	r3, r3
 8005002:	f003 0307 	and.w	r3, r3, #7
 8005006:	b29a      	uxth	r2, r3
 8005008:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800500a:	4313      	orrs	r3, r2
 800500c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005014:	60da      	str	r2, [r3, #12]
 8005016:	e0b9      	b.n	800518c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800501e:	e0b5      	b.n	800518c <UART_SetConfig+0xa94>
 8005020:	03d09000 	.word	0x03d09000
 8005024:	003d0900 	.word	0x003d0900
 8005028:	08006694 	.word	0x08006694
 800502c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005030:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005034:	2b20      	cmp	r3, #32
 8005036:	dc49      	bgt.n	80050cc <UART_SetConfig+0x9d4>
 8005038:	2b00      	cmp	r3, #0
 800503a:	db7c      	blt.n	8005136 <UART_SetConfig+0xa3e>
 800503c:	2b20      	cmp	r3, #32
 800503e:	d87a      	bhi.n	8005136 <UART_SetConfig+0xa3e>
 8005040:	a201      	add	r2, pc, #4	@ (adr r2, 8005048 <UART_SetConfig+0x950>)
 8005042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005046:	bf00      	nop
 8005048:	080050d3 	.word	0x080050d3
 800504c:	080050db 	.word	0x080050db
 8005050:	08005137 	.word	0x08005137
 8005054:	08005137 	.word	0x08005137
 8005058:	080050e3 	.word	0x080050e3
 800505c:	08005137 	.word	0x08005137
 8005060:	08005137 	.word	0x08005137
 8005064:	08005137 	.word	0x08005137
 8005068:	080050f3 	.word	0x080050f3
 800506c:	08005137 	.word	0x08005137
 8005070:	08005137 	.word	0x08005137
 8005074:	08005137 	.word	0x08005137
 8005078:	08005137 	.word	0x08005137
 800507c:	08005137 	.word	0x08005137
 8005080:	08005137 	.word	0x08005137
 8005084:	08005137 	.word	0x08005137
 8005088:	08005103 	.word	0x08005103
 800508c:	08005137 	.word	0x08005137
 8005090:	08005137 	.word	0x08005137
 8005094:	08005137 	.word	0x08005137
 8005098:	08005137 	.word	0x08005137
 800509c:	08005137 	.word	0x08005137
 80050a0:	08005137 	.word	0x08005137
 80050a4:	08005137 	.word	0x08005137
 80050a8:	08005137 	.word	0x08005137
 80050ac:	08005137 	.word	0x08005137
 80050b0:	08005137 	.word	0x08005137
 80050b4:	08005137 	.word	0x08005137
 80050b8:	08005137 	.word	0x08005137
 80050bc:	08005137 	.word	0x08005137
 80050c0:	08005137 	.word	0x08005137
 80050c4:	08005137 	.word	0x08005137
 80050c8:	08005129 	.word	0x08005129
 80050cc:	2b40      	cmp	r3, #64	@ 0x40
 80050ce:	d02e      	beq.n	800512e <UART_SetConfig+0xa36>
 80050d0:	e031      	b.n	8005136 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050d2:	f7fd fb13 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
 80050d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80050d8:	e033      	b.n	8005142 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050da:	f7fd fb25 	bl	8002728 <HAL_RCC_GetPCLK2Freq>
 80050de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80050e0:	e02f      	b.n	8005142 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fe fd54 	bl	8003b94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80050ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050f0:	e027      	b.n	8005142 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050f2:	f107 0318 	add.w	r3, r7, #24
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fe fea0 	bl	8003e3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005100:	e01f      	b.n	8005142 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005102:	4b2d      	ldr	r3, [pc, #180]	@ (80051b8 <UART_SetConfig+0xac0>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0320 	and.w	r3, r3, #32
 800510a:	2b00      	cmp	r3, #0
 800510c:	d009      	beq.n	8005122 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800510e:	4b2a      	ldr	r3, [pc, #168]	@ (80051b8 <UART_SetConfig+0xac0>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	08db      	lsrs	r3, r3, #3
 8005114:	f003 0303 	and.w	r3, r3, #3
 8005118:	4a28      	ldr	r2, [pc, #160]	@ (80051bc <UART_SetConfig+0xac4>)
 800511a:	fa22 f303 	lsr.w	r3, r2, r3
 800511e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005120:	e00f      	b.n	8005142 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005122:	4b26      	ldr	r3, [pc, #152]	@ (80051bc <UART_SetConfig+0xac4>)
 8005124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005126:	e00c      	b.n	8005142 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005128:	4b25      	ldr	r3, [pc, #148]	@ (80051c0 <UART_SetConfig+0xac8>)
 800512a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800512c:	e009      	b.n	8005142 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800512e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005134:	e005      	b.n	8005142 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005136:	2300      	movs	r3, #0
 8005138:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005140:	bf00      	nop
    }

    if (pclk != 0U)
 8005142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005144:	2b00      	cmp	r3, #0
 8005146:	d021      	beq.n	800518c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514c:	4a1d      	ldr	r2, [pc, #116]	@ (80051c4 <UART_SetConfig+0xacc>)
 800514e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005152:	461a      	mov	r2, r3
 8005154:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005156:	fbb3 f2f2 	udiv	r2, r3, r2
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	085b      	lsrs	r3, r3, #1
 8005160:	441a      	add	r2, r3
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	fbb2 f3f3 	udiv	r3, r2, r3
 800516a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800516c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800516e:	2b0f      	cmp	r3, #15
 8005170:	d909      	bls.n	8005186 <UART_SetConfig+0xa8e>
 8005172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005178:	d205      	bcs.n	8005186 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800517a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800517c:	b29a      	uxth	r2, r3
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	60da      	str	r2, [r3, #12]
 8005184:	e002      	b.n	800518c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	2201      	movs	r2, #1
 8005190:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	2201      	movs	r2, #1
 8005198:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	2200      	movs	r2, #0
 80051a0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2200      	movs	r2, #0
 80051a6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80051a8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3748      	adds	r7, #72	@ 0x48
 80051b0:	46bd      	mov	sp, r7
 80051b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051b6:	bf00      	nop
 80051b8:	58024400 	.word	0x58024400
 80051bc:	03d09000 	.word	0x03d09000
 80051c0:	003d0900 	.word	0x003d0900
 80051c4:	08006694 	.word	0x08006694

080051c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d4:	f003 0308 	and.w	r3, r3, #8
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00a      	beq.n	80051f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800523a:	f003 0304 	and.w	r3, r3, #4
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00a      	beq.n	8005258 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	430a      	orrs	r2, r1
 8005256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800525c:	f003 0310 	and.w	r3, r3, #16
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00a      	beq.n	800527a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800527e:	f003 0320 	and.w	r3, r3, #32
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00a      	beq.n	800529c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d01a      	beq.n	80052de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052c6:	d10a      	bne.n	80052de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	605a      	str	r2, [r3, #4]
  }
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b098      	sub	sp, #96	@ 0x60
 8005310:	af02      	add	r7, sp, #8
 8005312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800531c:	f7fb fe6e 	bl	8000ffc <HAL_GetTick>
 8005320:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0308 	and.w	r3, r3, #8
 800532c:	2b08      	cmp	r3, #8
 800532e:	d12f      	bne.n	8005390 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005330:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005338:	2200      	movs	r2, #0
 800533a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f88e 	bl	8005460 <UART_WaitOnFlagUntilTimeout>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d022      	beq.n	8005390 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005352:	e853 3f00 	ldrex	r3, [r3]
 8005356:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800535a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800535e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	461a      	mov	r2, r3
 8005366:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005368:	647b      	str	r3, [r7, #68]	@ 0x44
 800536a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800536e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005370:	e841 2300 	strex	r3, r2, [r1]
 8005374:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1e6      	bne.n	800534a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2220      	movs	r2, #32
 8005380:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e063      	b.n	8005458 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0304 	and.w	r3, r3, #4
 800539a:	2b04      	cmp	r3, #4
 800539c:	d149      	bne.n	8005432 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800539e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053a6:	2200      	movs	r2, #0
 80053a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f857 	bl	8005460 <UART_WaitOnFlagUntilTimeout>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d03c      	beq.n	8005432 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c0:	e853 3f00 	ldrex	r3, [r3]
 80053c4:	623b      	str	r3, [r7, #32]
   return(result);
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	461a      	mov	r2, r3
 80053d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80053d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053de:	e841 2300 	strex	r3, r2, [r1]
 80053e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1e6      	bne.n	80053b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	3308      	adds	r3, #8
 80053f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	e853 3f00 	ldrex	r3, [r3]
 80053f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f023 0301 	bic.w	r3, r3, #1
 8005400:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3308      	adds	r3, #8
 8005408:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800540a:	61fa      	str	r2, [r7, #28]
 800540c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540e:	69b9      	ldr	r1, [r7, #24]
 8005410:	69fa      	ldr	r2, [r7, #28]
 8005412:	e841 2300 	strex	r3, r2, [r1]
 8005416:	617b      	str	r3, [r7, #20]
   return(result);
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1e5      	bne.n	80053ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2220      	movs	r2, #32
 8005422:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e012      	b.n	8005458 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2220      	movs	r2, #32
 8005436:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2220      	movs	r2, #32
 800543e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3758      	adds	r7, #88	@ 0x58
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	603b      	str	r3, [r7, #0]
 800546c:	4613      	mov	r3, r2
 800546e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005470:	e04f      	b.n	8005512 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005478:	d04b      	beq.n	8005512 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800547a:	f7fb fdbf 	bl	8000ffc <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	69ba      	ldr	r2, [r7, #24]
 8005486:	429a      	cmp	r2, r3
 8005488:	d302      	bcc.n	8005490 <UART_WaitOnFlagUntilTimeout+0x30>
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d101      	bne.n	8005494 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e04e      	b.n	8005532 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0304 	and.w	r3, r3, #4
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d037      	beq.n	8005512 <UART_WaitOnFlagUntilTimeout+0xb2>
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	2b80      	cmp	r3, #128	@ 0x80
 80054a6:	d034      	beq.n	8005512 <UART_WaitOnFlagUntilTimeout+0xb2>
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2b40      	cmp	r3, #64	@ 0x40
 80054ac:	d031      	beq.n	8005512 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69db      	ldr	r3, [r3, #28]
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d110      	bne.n	80054de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2208      	movs	r2, #8
 80054c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f000 f839 	bl	800553c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2208      	movs	r2, #8
 80054ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e029      	b.n	8005532 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	69db      	ldr	r3, [r3, #28]
 80054e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054ec:	d111      	bne.n	8005512 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 f81f 	bl	800553c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2220      	movs	r2, #32
 8005502:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e00f      	b.n	8005532 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69da      	ldr	r2, [r3, #28]
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	4013      	ands	r3, r2
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	429a      	cmp	r2, r3
 8005520:	bf0c      	ite	eq
 8005522:	2301      	moveq	r3, #1
 8005524:	2300      	movne	r3, #0
 8005526:	b2db      	uxtb	r3, r3
 8005528:	461a      	mov	r2, r3
 800552a:	79fb      	ldrb	r3, [r7, #7]
 800552c:	429a      	cmp	r2, r3
 800552e:	d0a0      	beq.n	8005472 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
	...

0800553c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800553c:	b480      	push	{r7}
 800553e:	b095      	sub	sp, #84	@ 0x54
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800554c:	e853 3f00 	ldrex	r3, [r3]
 8005550:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005554:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005558:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	461a      	mov	r2, r3
 8005560:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005562:	643b      	str	r3, [r7, #64]	@ 0x40
 8005564:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005566:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005568:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800556a:	e841 2300 	strex	r3, r2, [r1]
 800556e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1e6      	bne.n	8005544 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	3308      	adds	r3, #8
 800557c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557e:	6a3b      	ldr	r3, [r7, #32]
 8005580:	e853 3f00 	ldrex	r3, [r3]
 8005584:	61fb      	str	r3, [r7, #28]
   return(result);
 8005586:	69fa      	ldr	r2, [r7, #28]
 8005588:	4b1e      	ldr	r3, [pc, #120]	@ (8005604 <UART_EndRxTransfer+0xc8>)
 800558a:	4013      	ands	r3, r2
 800558c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3308      	adds	r3, #8
 8005594:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005596:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005598:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800559c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800559e:	e841 2300 	strex	r3, r2, [r1]
 80055a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1e5      	bne.n	8005576 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d118      	bne.n	80055e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	e853 3f00 	ldrex	r3, [r3]
 80055be:	60bb      	str	r3, [r7, #8]
   return(result);
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	f023 0310 	bic.w	r3, r3, #16
 80055c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	461a      	mov	r2, r3
 80055ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055d0:	61bb      	str	r3, [r7, #24]
 80055d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d4:	6979      	ldr	r1, [r7, #20]
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	e841 2300 	strex	r3, r2, [r1]
 80055dc:	613b      	str	r3, [r7, #16]
   return(result);
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1e6      	bne.n	80055b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80055f8:	bf00      	nop
 80055fa:	3754      	adds	r7, #84	@ 0x54
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr
 8005604:	effffffe 	.word	0xeffffffe

08005608 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005616:	2b01      	cmp	r3, #1
 8005618:	d101      	bne.n	800561e <HAL_UARTEx_DisableFifoMode+0x16>
 800561a:	2302      	movs	r3, #2
 800561c:	e027      	b.n	800566e <HAL_UARTEx_DisableFifoMode+0x66>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2224      	movs	r2, #36	@ 0x24
 800562a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 0201 	bic.w	r2, r2, #1
 8005644:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800564c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2220      	movs	r2, #32
 8005660:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b084      	sub	sp, #16
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
 8005682:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800568a:	2b01      	cmp	r3, #1
 800568c:	d101      	bne.n	8005692 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800568e:	2302      	movs	r3, #2
 8005690:	e02d      	b.n	80056ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2224      	movs	r2, #36	@ 0x24
 800569e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 0201 	bic.w	r2, r2, #1
 80056b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f850 	bl	8005774 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2220      	movs	r2, #32
 80056e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b084      	sub	sp, #16
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005706:	2b01      	cmp	r3, #1
 8005708:	d101      	bne.n	800570e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800570a:	2302      	movs	r3, #2
 800570c:	e02d      	b.n	800576a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2224      	movs	r2, #36	@ 0x24
 800571a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 0201 	bic.w	r2, r2, #1
 8005734:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f812 	bl	8005774 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2220      	movs	r2, #32
 800575c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
	...

08005774 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005780:	2b00      	cmp	r3, #0
 8005782:	d108      	bne.n	8005796 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005794:	e031      	b.n	80057fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005796:	2310      	movs	r3, #16
 8005798:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800579a:	2310      	movs	r3, #16
 800579c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	0e5b      	lsrs	r3, r3, #25
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	f003 0307 	and.w	r3, r3, #7
 80057ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	0f5b      	lsrs	r3, r3, #29
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	f003 0307 	and.w	r3, r3, #7
 80057bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057be:	7bbb      	ldrb	r3, [r7, #14]
 80057c0:	7b3a      	ldrb	r2, [r7, #12]
 80057c2:	4911      	ldr	r1, [pc, #68]	@ (8005808 <UARTEx_SetNbDataToProcess+0x94>)
 80057c4:	5c8a      	ldrb	r2, [r1, r2]
 80057c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80057ca:	7b3a      	ldrb	r2, [r7, #12]
 80057cc:	490f      	ldr	r1, [pc, #60]	@ (800580c <UARTEx_SetNbDataToProcess+0x98>)
 80057ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
 80057de:	7b7a      	ldrb	r2, [r7, #13]
 80057e0:	4909      	ldr	r1, [pc, #36]	@ (8005808 <UARTEx_SetNbDataToProcess+0x94>)
 80057e2:	5c8a      	ldrb	r2, [r1, r2]
 80057e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80057e8:	7b7a      	ldrb	r2, [r7, #13]
 80057ea:	4908      	ldr	r1, [pc, #32]	@ (800580c <UARTEx_SetNbDataToProcess+0x98>)
 80057ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80057fa:	bf00      	nop
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	080066ac 	.word	0x080066ac
 800580c:	080066b4 	.word	0x080066b4

08005810 <std>:
 8005810:	2300      	movs	r3, #0
 8005812:	b510      	push	{r4, lr}
 8005814:	4604      	mov	r4, r0
 8005816:	e9c0 3300 	strd	r3, r3, [r0]
 800581a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800581e:	6083      	str	r3, [r0, #8]
 8005820:	8181      	strh	r1, [r0, #12]
 8005822:	6643      	str	r3, [r0, #100]	@ 0x64
 8005824:	81c2      	strh	r2, [r0, #14]
 8005826:	6183      	str	r3, [r0, #24]
 8005828:	4619      	mov	r1, r3
 800582a:	2208      	movs	r2, #8
 800582c:	305c      	adds	r0, #92	@ 0x5c
 800582e:	f000 f906 	bl	8005a3e <memset>
 8005832:	4b0d      	ldr	r3, [pc, #52]	@ (8005868 <std+0x58>)
 8005834:	6263      	str	r3, [r4, #36]	@ 0x24
 8005836:	4b0d      	ldr	r3, [pc, #52]	@ (800586c <std+0x5c>)
 8005838:	62a3      	str	r3, [r4, #40]	@ 0x28
 800583a:	4b0d      	ldr	r3, [pc, #52]	@ (8005870 <std+0x60>)
 800583c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800583e:	4b0d      	ldr	r3, [pc, #52]	@ (8005874 <std+0x64>)
 8005840:	6323      	str	r3, [r4, #48]	@ 0x30
 8005842:	4b0d      	ldr	r3, [pc, #52]	@ (8005878 <std+0x68>)
 8005844:	6224      	str	r4, [r4, #32]
 8005846:	429c      	cmp	r4, r3
 8005848:	d006      	beq.n	8005858 <std+0x48>
 800584a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800584e:	4294      	cmp	r4, r2
 8005850:	d002      	beq.n	8005858 <std+0x48>
 8005852:	33d0      	adds	r3, #208	@ 0xd0
 8005854:	429c      	cmp	r4, r3
 8005856:	d105      	bne.n	8005864 <std+0x54>
 8005858:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800585c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005860:	f000 b966 	b.w	8005b30 <__retarget_lock_init_recursive>
 8005864:	bd10      	pop	{r4, pc}
 8005866:	bf00      	nop
 8005868:	080059b9 	.word	0x080059b9
 800586c:	080059db 	.word	0x080059db
 8005870:	08005a13 	.word	0x08005a13
 8005874:	08005a37 	.word	0x08005a37
 8005878:	24000124 	.word	0x24000124

0800587c <stdio_exit_handler>:
 800587c:	4a02      	ldr	r2, [pc, #8]	@ (8005888 <stdio_exit_handler+0xc>)
 800587e:	4903      	ldr	r1, [pc, #12]	@ (800588c <stdio_exit_handler+0x10>)
 8005880:	4803      	ldr	r0, [pc, #12]	@ (8005890 <stdio_exit_handler+0x14>)
 8005882:	f000 b869 	b.w	8005958 <_fwalk_sglue>
 8005886:	bf00      	nop
 8005888:	24000010 	.word	0x24000010
 800588c:	080063cd 	.word	0x080063cd
 8005890:	24000020 	.word	0x24000020

08005894 <cleanup_stdio>:
 8005894:	6841      	ldr	r1, [r0, #4]
 8005896:	4b0c      	ldr	r3, [pc, #48]	@ (80058c8 <cleanup_stdio+0x34>)
 8005898:	4299      	cmp	r1, r3
 800589a:	b510      	push	{r4, lr}
 800589c:	4604      	mov	r4, r0
 800589e:	d001      	beq.n	80058a4 <cleanup_stdio+0x10>
 80058a0:	f000 fd94 	bl	80063cc <_fflush_r>
 80058a4:	68a1      	ldr	r1, [r4, #8]
 80058a6:	4b09      	ldr	r3, [pc, #36]	@ (80058cc <cleanup_stdio+0x38>)
 80058a8:	4299      	cmp	r1, r3
 80058aa:	d002      	beq.n	80058b2 <cleanup_stdio+0x1e>
 80058ac:	4620      	mov	r0, r4
 80058ae:	f000 fd8d 	bl	80063cc <_fflush_r>
 80058b2:	68e1      	ldr	r1, [r4, #12]
 80058b4:	4b06      	ldr	r3, [pc, #24]	@ (80058d0 <cleanup_stdio+0x3c>)
 80058b6:	4299      	cmp	r1, r3
 80058b8:	d004      	beq.n	80058c4 <cleanup_stdio+0x30>
 80058ba:	4620      	mov	r0, r4
 80058bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058c0:	f000 bd84 	b.w	80063cc <_fflush_r>
 80058c4:	bd10      	pop	{r4, pc}
 80058c6:	bf00      	nop
 80058c8:	24000124 	.word	0x24000124
 80058cc:	2400018c 	.word	0x2400018c
 80058d0:	240001f4 	.word	0x240001f4

080058d4 <global_stdio_init.part.0>:
 80058d4:	b510      	push	{r4, lr}
 80058d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005904 <global_stdio_init.part.0+0x30>)
 80058d8:	4c0b      	ldr	r4, [pc, #44]	@ (8005908 <global_stdio_init.part.0+0x34>)
 80058da:	4a0c      	ldr	r2, [pc, #48]	@ (800590c <global_stdio_init.part.0+0x38>)
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	4620      	mov	r0, r4
 80058e0:	2200      	movs	r2, #0
 80058e2:	2104      	movs	r1, #4
 80058e4:	f7ff ff94 	bl	8005810 <std>
 80058e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80058ec:	2201      	movs	r2, #1
 80058ee:	2109      	movs	r1, #9
 80058f0:	f7ff ff8e 	bl	8005810 <std>
 80058f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80058f8:	2202      	movs	r2, #2
 80058fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058fe:	2112      	movs	r1, #18
 8005900:	f7ff bf86 	b.w	8005810 <std>
 8005904:	2400025c 	.word	0x2400025c
 8005908:	24000124 	.word	0x24000124
 800590c:	0800587d 	.word	0x0800587d

08005910 <__sfp_lock_acquire>:
 8005910:	4801      	ldr	r0, [pc, #4]	@ (8005918 <__sfp_lock_acquire+0x8>)
 8005912:	f000 b90e 	b.w	8005b32 <__retarget_lock_acquire_recursive>
 8005916:	bf00      	nop
 8005918:	24000265 	.word	0x24000265

0800591c <__sfp_lock_release>:
 800591c:	4801      	ldr	r0, [pc, #4]	@ (8005924 <__sfp_lock_release+0x8>)
 800591e:	f000 b909 	b.w	8005b34 <__retarget_lock_release_recursive>
 8005922:	bf00      	nop
 8005924:	24000265 	.word	0x24000265

08005928 <__sinit>:
 8005928:	b510      	push	{r4, lr}
 800592a:	4604      	mov	r4, r0
 800592c:	f7ff fff0 	bl	8005910 <__sfp_lock_acquire>
 8005930:	6a23      	ldr	r3, [r4, #32]
 8005932:	b11b      	cbz	r3, 800593c <__sinit+0x14>
 8005934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005938:	f7ff bff0 	b.w	800591c <__sfp_lock_release>
 800593c:	4b04      	ldr	r3, [pc, #16]	@ (8005950 <__sinit+0x28>)
 800593e:	6223      	str	r3, [r4, #32]
 8005940:	4b04      	ldr	r3, [pc, #16]	@ (8005954 <__sinit+0x2c>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1f5      	bne.n	8005934 <__sinit+0xc>
 8005948:	f7ff ffc4 	bl	80058d4 <global_stdio_init.part.0>
 800594c:	e7f2      	b.n	8005934 <__sinit+0xc>
 800594e:	bf00      	nop
 8005950:	08005895 	.word	0x08005895
 8005954:	2400025c 	.word	0x2400025c

08005958 <_fwalk_sglue>:
 8005958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800595c:	4607      	mov	r7, r0
 800595e:	4688      	mov	r8, r1
 8005960:	4614      	mov	r4, r2
 8005962:	2600      	movs	r6, #0
 8005964:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005968:	f1b9 0901 	subs.w	r9, r9, #1
 800596c:	d505      	bpl.n	800597a <_fwalk_sglue+0x22>
 800596e:	6824      	ldr	r4, [r4, #0]
 8005970:	2c00      	cmp	r4, #0
 8005972:	d1f7      	bne.n	8005964 <_fwalk_sglue+0xc>
 8005974:	4630      	mov	r0, r6
 8005976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800597a:	89ab      	ldrh	r3, [r5, #12]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d907      	bls.n	8005990 <_fwalk_sglue+0x38>
 8005980:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005984:	3301      	adds	r3, #1
 8005986:	d003      	beq.n	8005990 <_fwalk_sglue+0x38>
 8005988:	4629      	mov	r1, r5
 800598a:	4638      	mov	r0, r7
 800598c:	47c0      	blx	r8
 800598e:	4306      	orrs	r6, r0
 8005990:	3568      	adds	r5, #104	@ 0x68
 8005992:	e7e9      	b.n	8005968 <_fwalk_sglue+0x10>

08005994 <iprintf>:
 8005994:	b40f      	push	{r0, r1, r2, r3}
 8005996:	b507      	push	{r0, r1, r2, lr}
 8005998:	4906      	ldr	r1, [pc, #24]	@ (80059b4 <iprintf+0x20>)
 800599a:	ab04      	add	r3, sp, #16
 800599c:	6808      	ldr	r0, [r1, #0]
 800599e:	f853 2b04 	ldr.w	r2, [r3], #4
 80059a2:	6881      	ldr	r1, [r0, #8]
 80059a4:	9301      	str	r3, [sp, #4]
 80059a6:	f000 f9e9 	bl	8005d7c <_vfiprintf_r>
 80059aa:	b003      	add	sp, #12
 80059ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80059b0:	b004      	add	sp, #16
 80059b2:	4770      	bx	lr
 80059b4:	2400001c 	.word	0x2400001c

080059b8 <__sread>:
 80059b8:	b510      	push	{r4, lr}
 80059ba:	460c      	mov	r4, r1
 80059bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059c0:	f000 f868 	bl	8005a94 <_read_r>
 80059c4:	2800      	cmp	r0, #0
 80059c6:	bfab      	itete	ge
 80059c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80059ca:	89a3      	ldrhlt	r3, [r4, #12]
 80059cc:	181b      	addge	r3, r3, r0
 80059ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80059d2:	bfac      	ite	ge
 80059d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80059d6:	81a3      	strhlt	r3, [r4, #12]
 80059d8:	bd10      	pop	{r4, pc}

080059da <__swrite>:
 80059da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059de:	461f      	mov	r7, r3
 80059e0:	898b      	ldrh	r3, [r1, #12]
 80059e2:	05db      	lsls	r3, r3, #23
 80059e4:	4605      	mov	r5, r0
 80059e6:	460c      	mov	r4, r1
 80059e8:	4616      	mov	r6, r2
 80059ea:	d505      	bpl.n	80059f8 <__swrite+0x1e>
 80059ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059f0:	2302      	movs	r3, #2
 80059f2:	2200      	movs	r2, #0
 80059f4:	f000 f83c 	bl	8005a70 <_lseek_r>
 80059f8:	89a3      	ldrh	r3, [r4, #12]
 80059fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a02:	81a3      	strh	r3, [r4, #12]
 8005a04:	4632      	mov	r2, r6
 8005a06:	463b      	mov	r3, r7
 8005a08:	4628      	mov	r0, r5
 8005a0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a0e:	f000 b853 	b.w	8005ab8 <_write_r>

08005a12 <__sseek>:
 8005a12:	b510      	push	{r4, lr}
 8005a14:	460c      	mov	r4, r1
 8005a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a1a:	f000 f829 	bl	8005a70 <_lseek_r>
 8005a1e:	1c43      	adds	r3, r0, #1
 8005a20:	89a3      	ldrh	r3, [r4, #12]
 8005a22:	bf15      	itete	ne
 8005a24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a2e:	81a3      	strheq	r3, [r4, #12]
 8005a30:	bf18      	it	ne
 8005a32:	81a3      	strhne	r3, [r4, #12]
 8005a34:	bd10      	pop	{r4, pc}

08005a36 <__sclose>:
 8005a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a3a:	f000 b809 	b.w	8005a50 <_close_r>

08005a3e <memset>:
 8005a3e:	4402      	add	r2, r0
 8005a40:	4603      	mov	r3, r0
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d100      	bne.n	8005a48 <memset+0xa>
 8005a46:	4770      	bx	lr
 8005a48:	f803 1b01 	strb.w	r1, [r3], #1
 8005a4c:	e7f9      	b.n	8005a42 <memset+0x4>
	...

08005a50 <_close_r>:
 8005a50:	b538      	push	{r3, r4, r5, lr}
 8005a52:	4d06      	ldr	r5, [pc, #24]	@ (8005a6c <_close_r+0x1c>)
 8005a54:	2300      	movs	r3, #0
 8005a56:	4604      	mov	r4, r0
 8005a58:	4608      	mov	r0, r1
 8005a5a:	602b      	str	r3, [r5, #0]
 8005a5c:	f7fb f9b2 	bl	8000dc4 <_close>
 8005a60:	1c43      	adds	r3, r0, #1
 8005a62:	d102      	bne.n	8005a6a <_close_r+0x1a>
 8005a64:	682b      	ldr	r3, [r5, #0]
 8005a66:	b103      	cbz	r3, 8005a6a <_close_r+0x1a>
 8005a68:	6023      	str	r3, [r4, #0]
 8005a6a:	bd38      	pop	{r3, r4, r5, pc}
 8005a6c:	24000260 	.word	0x24000260

08005a70 <_lseek_r>:
 8005a70:	b538      	push	{r3, r4, r5, lr}
 8005a72:	4d07      	ldr	r5, [pc, #28]	@ (8005a90 <_lseek_r+0x20>)
 8005a74:	4604      	mov	r4, r0
 8005a76:	4608      	mov	r0, r1
 8005a78:	4611      	mov	r1, r2
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	602a      	str	r2, [r5, #0]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	f7fb f9c7 	bl	8000e12 <_lseek>
 8005a84:	1c43      	adds	r3, r0, #1
 8005a86:	d102      	bne.n	8005a8e <_lseek_r+0x1e>
 8005a88:	682b      	ldr	r3, [r5, #0]
 8005a8a:	b103      	cbz	r3, 8005a8e <_lseek_r+0x1e>
 8005a8c:	6023      	str	r3, [r4, #0]
 8005a8e:	bd38      	pop	{r3, r4, r5, pc}
 8005a90:	24000260 	.word	0x24000260

08005a94 <_read_r>:
 8005a94:	b538      	push	{r3, r4, r5, lr}
 8005a96:	4d07      	ldr	r5, [pc, #28]	@ (8005ab4 <_read_r+0x20>)
 8005a98:	4604      	mov	r4, r0
 8005a9a:	4608      	mov	r0, r1
 8005a9c:	4611      	mov	r1, r2
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	602a      	str	r2, [r5, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	f7fb f955 	bl	8000d52 <_read>
 8005aa8:	1c43      	adds	r3, r0, #1
 8005aaa:	d102      	bne.n	8005ab2 <_read_r+0x1e>
 8005aac:	682b      	ldr	r3, [r5, #0]
 8005aae:	b103      	cbz	r3, 8005ab2 <_read_r+0x1e>
 8005ab0:	6023      	str	r3, [r4, #0]
 8005ab2:	bd38      	pop	{r3, r4, r5, pc}
 8005ab4:	24000260 	.word	0x24000260

08005ab8 <_write_r>:
 8005ab8:	b538      	push	{r3, r4, r5, lr}
 8005aba:	4d07      	ldr	r5, [pc, #28]	@ (8005ad8 <_write_r+0x20>)
 8005abc:	4604      	mov	r4, r0
 8005abe:	4608      	mov	r0, r1
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	602a      	str	r2, [r5, #0]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	f7fb f960 	bl	8000d8c <_write>
 8005acc:	1c43      	adds	r3, r0, #1
 8005ace:	d102      	bne.n	8005ad6 <_write_r+0x1e>
 8005ad0:	682b      	ldr	r3, [r5, #0]
 8005ad2:	b103      	cbz	r3, 8005ad6 <_write_r+0x1e>
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	bd38      	pop	{r3, r4, r5, pc}
 8005ad8:	24000260 	.word	0x24000260

08005adc <__errno>:
 8005adc:	4b01      	ldr	r3, [pc, #4]	@ (8005ae4 <__errno+0x8>)
 8005ade:	6818      	ldr	r0, [r3, #0]
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	2400001c 	.word	0x2400001c

08005ae8 <__libc_init_array>:
 8005ae8:	b570      	push	{r4, r5, r6, lr}
 8005aea:	4d0d      	ldr	r5, [pc, #52]	@ (8005b20 <__libc_init_array+0x38>)
 8005aec:	4c0d      	ldr	r4, [pc, #52]	@ (8005b24 <__libc_init_array+0x3c>)
 8005aee:	1b64      	subs	r4, r4, r5
 8005af0:	10a4      	asrs	r4, r4, #2
 8005af2:	2600      	movs	r6, #0
 8005af4:	42a6      	cmp	r6, r4
 8005af6:	d109      	bne.n	8005b0c <__libc_init_array+0x24>
 8005af8:	4d0b      	ldr	r5, [pc, #44]	@ (8005b28 <__libc_init_array+0x40>)
 8005afa:	4c0c      	ldr	r4, [pc, #48]	@ (8005b2c <__libc_init_array+0x44>)
 8005afc:	f000 fdb6 	bl	800666c <_init>
 8005b00:	1b64      	subs	r4, r4, r5
 8005b02:	10a4      	asrs	r4, r4, #2
 8005b04:	2600      	movs	r6, #0
 8005b06:	42a6      	cmp	r6, r4
 8005b08:	d105      	bne.n	8005b16 <__libc_init_array+0x2e>
 8005b0a:	bd70      	pop	{r4, r5, r6, pc}
 8005b0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b10:	4798      	blx	r3
 8005b12:	3601      	adds	r6, #1
 8005b14:	e7ee      	b.n	8005af4 <__libc_init_array+0xc>
 8005b16:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b1a:	4798      	blx	r3
 8005b1c:	3601      	adds	r6, #1
 8005b1e:	e7f2      	b.n	8005b06 <__libc_init_array+0x1e>
 8005b20:	080066f8 	.word	0x080066f8
 8005b24:	080066f8 	.word	0x080066f8
 8005b28:	080066f8 	.word	0x080066f8
 8005b2c:	080066fc 	.word	0x080066fc

08005b30 <__retarget_lock_init_recursive>:
 8005b30:	4770      	bx	lr

08005b32 <__retarget_lock_acquire_recursive>:
 8005b32:	4770      	bx	lr

08005b34 <__retarget_lock_release_recursive>:
 8005b34:	4770      	bx	lr
	...

08005b38 <_free_r>:
 8005b38:	b538      	push	{r3, r4, r5, lr}
 8005b3a:	4605      	mov	r5, r0
 8005b3c:	2900      	cmp	r1, #0
 8005b3e:	d041      	beq.n	8005bc4 <_free_r+0x8c>
 8005b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b44:	1f0c      	subs	r4, r1, #4
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	bfb8      	it	lt
 8005b4a:	18e4      	addlt	r4, r4, r3
 8005b4c:	f000 f8e0 	bl	8005d10 <__malloc_lock>
 8005b50:	4a1d      	ldr	r2, [pc, #116]	@ (8005bc8 <_free_r+0x90>)
 8005b52:	6813      	ldr	r3, [r2, #0]
 8005b54:	b933      	cbnz	r3, 8005b64 <_free_r+0x2c>
 8005b56:	6063      	str	r3, [r4, #4]
 8005b58:	6014      	str	r4, [r2, #0]
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b60:	f000 b8dc 	b.w	8005d1c <__malloc_unlock>
 8005b64:	42a3      	cmp	r3, r4
 8005b66:	d908      	bls.n	8005b7a <_free_r+0x42>
 8005b68:	6820      	ldr	r0, [r4, #0]
 8005b6a:	1821      	adds	r1, r4, r0
 8005b6c:	428b      	cmp	r3, r1
 8005b6e:	bf01      	itttt	eq
 8005b70:	6819      	ldreq	r1, [r3, #0]
 8005b72:	685b      	ldreq	r3, [r3, #4]
 8005b74:	1809      	addeq	r1, r1, r0
 8005b76:	6021      	streq	r1, [r4, #0]
 8005b78:	e7ed      	b.n	8005b56 <_free_r+0x1e>
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	b10b      	cbz	r3, 8005b84 <_free_r+0x4c>
 8005b80:	42a3      	cmp	r3, r4
 8005b82:	d9fa      	bls.n	8005b7a <_free_r+0x42>
 8005b84:	6811      	ldr	r1, [r2, #0]
 8005b86:	1850      	adds	r0, r2, r1
 8005b88:	42a0      	cmp	r0, r4
 8005b8a:	d10b      	bne.n	8005ba4 <_free_r+0x6c>
 8005b8c:	6820      	ldr	r0, [r4, #0]
 8005b8e:	4401      	add	r1, r0
 8005b90:	1850      	adds	r0, r2, r1
 8005b92:	4283      	cmp	r3, r0
 8005b94:	6011      	str	r1, [r2, #0]
 8005b96:	d1e0      	bne.n	8005b5a <_free_r+0x22>
 8005b98:	6818      	ldr	r0, [r3, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	6053      	str	r3, [r2, #4]
 8005b9e:	4408      	add	r0, r1
 8005ba0:	6010      	str	r0, [r2, #0]
 8005ba2:	e7da      	b.n	8005b5a <_free_r+0x22>
 8005ba4:	d902      	bls.n	8005bac <_free_r+0x74>
 8005ba6:	230c      	movs	r3, #12
 8005ba8:	602b      	str	r3, [r5, #0]
 8005baa:	e7d6      	b.n	8005b5a <_free_r+0x22>
 8005bac:	6820      	ldr	r0, [r4, #0]
 8005bae:	1821      	adds	r1, r4, r0
 8005bb0:	428b      	cmp	r3, r1
 8005bb2:	bf04      	itt	eq
 8005bb4:	6819      	ldreq	r1, [r3, #0]
 8005bb6:	685b      	ldreq	r3, [r3, #4]
 8005bb8:	6063      	str	r3, [r4, #4]
 8005bba:	bf04      	itt	eq
 8005bbc:	1809      	addeq	r1, r1, r0
 8005bbe:	6021      	streq	r1, [r4, #0]
 8005bc0:	6054      	str	r4, [r2, #4]
 8005bc2:	e7ca      	b.n	8005b5a <_free_r+0x22>
 8005bc4:	bd38      	pop	{r3, r4, r5, pc}
 8005bc6:	bf00      	nop
 8005bc8:	2400026c 	.word	0x2400026c

08005bcc <sbrk_aligned>:
 8005bcc:	b570      	push	{r4, r5, r6, lr}
 8005bce:	4e0f      	ldr	r6, [pc, #60]	@ (8005c0c <sbrk_aligned+0x40>)
 8005bd0:	460c      	mov	r4, r1
 8005bd2:	6831      	ldr	r1, [r6, #0]
 8005bd4:	4605      	mov	r5, r0
 8005bd6:	b911      	cbnz	r1, 8005bde <sbrk_aligned+0x12>
 8005bd8:	f000 fcb4 	bl	8006544 <_sbrk_r>
 8005bdc:	6030      	str	r0, [r6, #0]
 8005bde:	4621      	mov	r1, r4
 8005be0:	4628      	mov	r0, r5
 8005be2:	f000 fcaf 	bl	8006544 <_sbrk_r>
 8005be6:	1c43      	adds	r3, r0, #1
 8005be8:	d103      	bne.n	8005bf2 <sbrk_aligned+0x26>
 8005bea:	f04f 34ff 	mov.w	r4, #4294967295
 8005bee:	4620      	mov	r0, r4
 8005bf0:	bd70      	pop	{r4, r5, r6, pc}
 8005bf2:	1cc4      	adds	r4, r0, #3
 8005bf4:	f024 0403 	bic.w	r4, r4, #3
 8005bf8:	42a0      	cmp	r0, r4
 8005bfa:	d0f8      	beq.n	8005bee <sbrk_aligned+0x22>
 8005bfc:	1a21      	subs	r1, r4, r0
 8005bfe:	4628      	mov	r0, r5
 8005c00:	f000 fca0 	bl	8006544 <_sbrk_r>
 8005c04:	3001      	adds	r0, #1
 8005c06:	d1f2      	bne.n	8005bee <sbrk_aligned+0x22>
 8005c08:	e7ef      	b.n	8005bea <sbrk_aligned+0x1e>
 8005c0a:	bf00      	nop
 8005c0c:	24000268 	.word	0x24000268

08005c10 <_malloc_r>:
 8005c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c14:	1ccd      	adds	r5, r1, #3
 8005c16:	f025 0503 	bic.w	r5, r5, #3
 8005c1a:	3508      	adds	r5, #8
 8005c1c:	2d0c      	cmp	r5, #12
 8005c1e:	bf38      	it	cc
 8005c20:	250c      	movcc	r5, #12
 8005c22:	2d00      	cmp	r5, #0
 8005c24:	4606      	mov	r6, r0
 8005c26:	db01      	blt.n	8005c2c <_malloc_r+0x1c>
 8005c28:	42a9      	cmp	r1, r5
 8005c2a:	d904      	bls.n	8005c36 <_malloc_r+0x26>
 8005c2c:	230c      	movs	r3, #12
 8005c2e:	6033      	str	r3, [r6, #0]
 8005c30:	2000      	movs	r0, #0
 8005c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d0c <_malloc_r+0xfc>
 8005c3a:	f000 f869 	bl	8005d10 <__malloc_lock>
 8005c3e:	f8d8 3000 	ldr.w	r3, [r8]
 8005c42:	461c      	mov	r4, r3
 8005c44:	bb44      	cbnz	r4, 8005c98 <_malloc_r+0x88>
 8005c46:	4629      	mov	r1, r5
 8005c48:	4630      	mov	r0, r6
 8005c4a:	f7ff ffbf 	bl	8005bcc <sbrk_aligned>
 8005c4e:	1c43      	adds	r3, r0, #1
 8005c50:	4604      	mov	r4, r0
 8005c52:	d158      	bne.n	8005d06 <_malloc_r+0xf6>
 8005c54:	f8d8 4000 	ldr.w	r4, [r8]
 8005c58:	4627      	mov	r7, r4
 8005c5a:	2f00      	cmp	r7, #0
 8005c5c:	d143      	bne.n	8005ce6 <_malloc_r+0xd6>
 8005c5e:	2c00      	cmp	r4, #0
 8005c60:	d04b      	beq.n	8005cfa <_malloc_r+0xea>
 8005c62:	6823      	ldr	r3, [r4, #0]
 8005c64:	4639      	mov	r1, r7
 8005c66:	4630      	mov	r0, r6
 8005c68:	eb04 0903 	add.w	r9, r4, r3
 8005c6c:	f000 fc6a 	bl	8006544 <_sbrk_r>
 8005c70:	4581      	cmp	r9, r0
 8005c72:	d142      	bne.n	8005cfa <_malloc_r+0xea>
 8005c74:	6821      	ldr	r1, [r4, #0]
 8005c76:	1a6d      	subs	r5, r5, r1
 8005c78:	4629      	mov	r1, r5
 8005c7a:	4630      	mov	r0, r6
 8005c7c:	f7ff ffa6 	bl	8005bcc <sbrk_aligned>
 8005c80:	3001      	adds	r0, #1
 8005c82:	d03a      	beq.n	8005cfa <_malloc_r+0xea>
 8005c84:	6823      	ldr	r3, [r4, #0]
 8005c86:	442b      	add	r3, r5
 8005c88:	6023      	str	r3, [r4, #0]
 8005c8a:	f8d8 3000 	ldr.w	r3, [r8]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	bb62      	cbnz	r2, 8005cec <_malloc_r+0xdc>
 8005c92:	f8c8 7000 	str.w	r7, [r8]
 8005c96:	e00f      	b.n	8005cb8 <_malloc_r+0xa8>
 8005c98:	6822      	ldr	r2, [r4, #0]
 8005c9a:	1b52      	subs	r2, r2, r5
 8005c9c:	d420      	bmi.n	8005ce0 <_malloc_r+0xd0>
 8005c9e:	2a0b      	cmp	r2, #11
 8005ca0:	d917      	bls.n	8005cd2 <_malloc_r+0xc2>
 8005ca2:	1961      	adds	r1, r4, r5
 8005ca4:	42a3      	cmp	r3, r4
 8005ca6:	6025      	str	r5, [r4, #0]
 8005ca8:	bf18      	it	ne
 8005caa:	6059      	strne	r1, [r3, #4]
 8005cac:	6863      	ldr	r3, [r4, #4]
 8005cae:	bf08      	it	eq
 8005cb0:	f8c8 1000 	streq.w	r1, [r8]
 8005cb4:	5162      	str	r2, [r4, r5]
 8005cb6:	604b      	str	r3, [r1, #4]
 8005cb8:	4630      	mov	r0, r6
 8005cba:	f000 f82f 	bl	8005d1c <__malloc_unlock>
 8005cbe:	f104 000b 	add.w	r0, r4, #11
 8005cc2:	1d23      	adds	r3, r4, #4
 8005cc4:	f020 0007 	bic.w	r0, r0, #7
 8005cc8:	1ac2      	subs	r2, r0, r3
 8005cca:	bf1c      	itt	ne
 8005ccc:	1a1b      	subne	r3, r3, r0
 8005cce:	50a3      	strne	r3, [r4, r2]
 8005cd0:	e7af      	b.n	8005c32 <_malloc_r+0x22>
 8005cd2:	6862      	ldr	r2, [r4, #4]
 8005cd4:	42a3      	cmp	r3, r4
 8005cd6:	bf0c      	ite	eq
 8005cd8:	f8c8 2000 	streq.w	r2, [r8]
 8005cdc:	605a      	strne	r2, [r3, #4]
 8005cde:	e7eb      	b.n	8005cb8 <_malloc_r+0xa8>
 8005ce0:	4623      	mov	r3, r4
 8005ce2:	6864      	ldr	r4, [r4, #4]
 8005ce4:	e7ae      	b.n	8005c44 <_malloc_r+0x34>
 8005ce6:	463c      	mov	r4, r7
 8005ce8:	687f      	ldr	r7, [r7, #4]
 8005cea:	e7b6      	b.n	8005c5a <_malloc_r+0x4a>
 8005cec:	461a      	mov	r2, r3
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	42a3      	cmp	r3, r4
 8005cf2:	d1fb      	bne.n	8005cec <_malloc_r+0xdc>
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	6053      	str	r3, [r2, #4]
 8005cf8:	e7de      	b.n	8005cb8 <_malloc_r+0xa8>
 8005cfa:	230c      	movs	r3, #12
 8005cfc:	6033      	str	r3, [r6, #0]
 8005cfe:	4630      	mov	r0, r6
 8005d00:	f000 f80c 	bl	8005d1c <__malloc_unlock>
 8005d04:	e794      	b.n	8005c30 <_malloc_r+0x20>
 8005d06:	6005      	str	r5, [r0, #0]
 8005d08:	e7d6      	b.n	8005cb8 <_malloc_r+0xa8>
 8005d0a:	bf00      	nop
 8005d0c:	2400026c 	.word	0x2400026c

08005d10 <__malloc_lock>:
 8005d10:	4801      	ldr	r0, [pc, #4]	@ (8005d18 <__malloc_lock+0x8>)
 8005d12:	f7ff bf0e 	b.w	8005b32 <__retarget_lock_acquire_recursive>
 8005d16:	bf00      	nop
 8005d18:	24000264 	.word	0x24000264

08005d1c <__malloc_unlock>:
 8005d1c:	4801      	ldr	r0, [pc, #4]	@ (8005d24 <__malloc_unlock+0x8>)
 8005d1e:	f7ff bf09 	b.w	8005b34 <__retarget_lock_release_recursive>
 8005d22:	bf00      	nop
 8005d24:	24000264 	.word	0x24000264

08005d28 <__sfputc_r>:
 8005d28:	6893      	ldr	r3, [r2, #8]
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	b410      	push	{r4}
 8005d30:	6093      	str	r3, [r2, #8]
 8005d32:	da08      	bge.n	8005d46 <__sfputc_r+0x1e>
 8005d34:	6994      	ldr	r4, [r2, #24]
 8005d36:	42a3      	cmp	r3, r4
 8005d38:	db01      	blt.n	8005d3e <__sfputc_r+0x16>
 8005d3a:	290a      	cmp	r1, #10
 8005d3c:	d103      	bne.n	8005d46 <__sfputc_r+0x1e>
 8005d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d42:	f000 bb6b 	b.w	800641c <__swbuf_r>
 8005d46:	6813      	ldr	r3, [r2, #0]
 8005d48:	1c58      	adds	r0, r3, #1
 8005d4a:	6010      	str	r0, [r2, #0]
 8005d4c:	7019      	strb	r1, [r3, #0]
 8005d4e:	4608      	mov	r0, r1
 8005d50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <__sfputs_r>:
 8005d56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d58:	4606      	mov	r6, r0
 8005d5a:	460f      	mov	r7, r1
 8005d5c:	4614      	mov	r4, r2
 8005d5e:	18d5      	adds	r5, r2, r3
 8005d60:	42ac      	cmp	r4, r5
 8005d62:	d101      	bne.n	8005d68 <__sfputs_r+0x12>
 8005d64:	2000      	movs	r0, #0
 8005d66:	e007      	b.n	8005d78 <__sfputs_r+0x22>
 8005d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d6c:	463a      	mov	r2, r7
 8005d6e:	4630      	mov	r0, r6
 8005d70:	f7ff ffda 	bl	8005d28 <__sfputc_r>
 8005d74:	1c43      	adds	r3, r0, #1
 8005d76:	d1f3      	bne.n	8005d60 <__sfputs_r+0xa>
 8005d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d7c <_vfiprintf_r>:
 8005d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d80:	460d      	mov	r5, r1
 8005d82:	b09d      	sub	sp, #116	@ 0x74
 8005d84:	4614      	mov	r4, r2
 8005d86:	4698      	mov	r8, r3
 8005d88:	4606      	mov	r6, r0
 8005d8a:	b118      	cbz	r0, 8005d94 <_vfiprintf_r+0x18>
 8005d8c:	6a03      	ldr	r3, [r0, #32]
 8005d8e:	b90b      	cbnz	r3, 8005d94 <_vfiprintf_r+0x18>
 8005d90:	f7ff fdca 	bl	8005928 <__sinit>
 8005d94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d96:	07d9      	lsls	r1, r3, #31
 8005d98:	d405      	bmi.n	8005da6 <_vfiprintf_r+0x2a>
 8005d9a:	89ab      	ldrh	r3, [r5, #12]
 8005d9c:	059a      	lsls	r2, r3, #22
 8005d9e:	d402      	bmi.n	8005da6 <_vfiprintf_r+0x2a>
 8005da0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005da2:	f7ff fec6 	bl	8005b32 <__retarget_lock_acquire_recursive>
 8005da6:	89ab      	ldrh	r3, [r5, #12]
 8005da8:	071b      	lsls	r3, r3, #28
 8005daa:	d501      	bpl.n	8005db0 <_vfiprintf_r+0x34>
 8005dac:	692b      	ldr	r3, [r5, #16]
 8005dae:	b99b      	cbnz	r3, 8005dd8 <_vfiprintf_r+0x5c>
 8005db0:	4629      	mov	r1, r5
 8005db2:	4630      	mov	r0, r6
 8005db4:	f000 fb70 	bl	8006498 <__swsetup_r>
 8005db8:	b170      	cbz	r0, 8005dd8 <_vfiprintf_r+0x5c>
 8005dba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005dbc:	07dc      	lsls	r4, r3, #31
 8005dbe:	d504      	bpl.n	8005dca <_vfiprintf_r+0x4e>
 8005dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc4:	b01d      	add	sp, #116	@ 0x74
 8005dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dca:	89ab      	ldrh	r3, [r5, #12]
 8005dcc:	0598      	lsls	r0, r3, #22
 8005dce:	d4f7      	bmi.n	8005dc0 <_vfiprintf_r+0x44>
 8005dd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005dd2:	f7ff feaf 	bl	8005b34 <__retarget_lock_release_recursive>
 8005dd6:	e7f3      	b.n	8005dc0 <_vfiprintf_r+0x44>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ddc:	2320      	movs	r3, #32
 8005dde:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005de2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005de6:	2330      	movs	r3, #48	@ 0x30
 8005de8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005f98 <_vfiprintf_r+0x21c>
 8005dec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005df0:	f04f 0901 	mov.w	r9, #1
 8005df4:	4623      	mov	r3, r4
 8005df6:	469a      	mov	sl, r3
 8005df8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dfc:	b10a      	cbz	r2, 8005e02 <_vfiprintf_r+0x86>
 8005dfe:	2a25      	cmp	r2, #37	@ 0x25
 8005e00:	d1f9      	bne.n	8005df6 <_vfiprintf_r+0x7a>
 8005e02:	ebba 0b04 	subs.w	fp, sl, r4
 8005e06:	d00b      	beq.n	8005e20 <_vfiprintf_r+0xa4>
 8005e08:	465b      	mov	r3, fp
 8005e0a:	4622      	mov	r2, r4
 8005e0c:	4629      	mov	r1, r5
 8005e0e:	4630      	mov	r0, r6
 8005e10:	f7ff ffa1 	bl	8005d56 <__sfputs_r>
 8005e14:	3001      	adds	r0, #1
 8005e16:	f000 80a7 	beq.w	8005f68 <_vfiprintf_r+0x1ec>
 8005e1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e1c:	445a      	add	r2, fp
 8005e1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e20:	f89a 3000 	ldrb.w	r3, [sl]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 809f 	beq.w	8005f68 <_vfiprintf_r+0x1ec>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e34:	f10a 0a01 	add.w	sl, sl, #1
 8005e38:	9304      	str	r3, [sp, #16]
 8005e3a:	9307      	str	r3, [sp, #28]
 8005e3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e40:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e42:	4654      	mov	r4, sl
 8005e44:	2205      	movs	r2, #5
 8005e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e4a:	4853      	ldr	r0, [pc, #332]	@ (8005f98 <_vfiprintf_r+0x21c>)
 8005e4c:	f7fa fa48 	bl	80002e0 <memchr>
 8005e50:	9a04      	ldr	r2, [sp, #16]
 8005e52:	b9d8      	cbnz	r0, 8005e8c <_vfiprintf_r+0x110>
 8005e54:	06d1      	lsls	r1, r2, #27
 8005e56:	bf44      	itt	mi
 8005e58:	2320      	movmi	r3, #32
 8005e5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e5e:	0713      	lsls	r3, r2, #28
 8005e60:	bf44      	itt	mi
 8005e62:	232b      	movmi	r3, #43	@ 0x2b
 8005e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e68:	f89a 3000 	ldrb.w	r3, [sl]
 8005e6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e6e:	d015      	beq.n	8005e9c <_vfiprintf_r+0x120>
 8005e70:	9a07      	ldr	r2, [sp, #28]
 8005e72:	4654      	mov	r4, sl
 8005e74:	2000      	movs	r0, #0
 8005e76:	f04f 0c0a 	mov.w	ip, #10
 8005e7a:	4621      	mov	r1, r4
 8005e7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e80:	3b30      	subs	r3, #48	@ 0x30
 8005e82:	2b09      	cmp	r3, #9
 8005e84:	d94b      	bls.n	8005f1e <_vfiprintf_r+0x1a2>
 8005e86:	b1b0      	cbz	r0, 8005eb6 <_vfiprintf_r+0x13a>
 8005e88:	9207      	str	r2, [sp, #28]
 8005e8a:	e014      	b.n	8005eb6 <_vfiprintf_r+0x13a>
 8005e8c:	eba0 0308 	sub.w	r3, r0, r8
 8005e90:	fa09 f303 	lsl.w	r3, r9, r3
 8005e94:	4313      	orrs	r3, r2
 8005e96:	9304      	str	r3, [sp, #16]
 8005e98:	46a2      	mov	sl, r4
 8005e9a:	e7d2      	b.n	8005e42 <_vfiprintf_r+0xc6>
 8005e9c:	9b03      	ldr	r3, [sp, #12]
 8005e9e:	1d19      	adds	r1, r3, #4
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	9103      	str	r1, [sp, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	bfbb      	ittet	lt
 8005ea8:	425b      	neglt	r3, r3
 8005eaa:	f042 0202 	orrlt.w	r2, r2, #2
 8005eae:	9307      	strge	r3, [sp, #28]
 8005eb0:	9307      	strlt	r3, [sp, #28]
 8005eb2:	bfb8      	it	lt
 8005eb4:	9204      	strlt	r2, [sp, #16]
 8005eb6:	7823      	ldrb	r3, [r4, #0]
 8005eb8:	2b2e      	cmp	r3, #46	@ 0x2e
 8005eba:	d10a      	bne.n	8005ed2 <_vfiprintf_r+0x156>
 8005ebc:	7863      	ldrb	r3, [r4, #1]
 8005ebe:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ec0:	d132      	bne.n	8005f28 <_vfiprintf_r+0x1ac>
 8005ec2:	9b03      	ldr	r3, [sp, #12]
 8005ec4:	1d1a      	adds	r2, r3, #4
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	9203      	str	r2, [sp, #12]
 8005eca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ece:	3402      	adds	r4, #2
 8005ed0:	9305      	str	r3, [sp, #20]
 8005ed2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005fa8 <_vfiprintf_r+0x22c>
 8005ed6:	7821      	ldrb	r1, [r4, #0]
 8005ed8:	2203      	movs	r2, #3
 8005eda:	4650      	mov	r0, sl
 8005edc:	f7fa fa00 	bl	80002e0 <memchr>
 8005ee0:	b138      	cbz	r0, 8005ef2 <_vfiprintf_r+0x176>
 8005ee2:	9b04      	ldr	r3, [sp, #16]
 8005ee4:	eba0 000a 	sub.w	r0, r0, sl
 8005ee8:	2240      	movs	r2, #64	@ 0x40
 8005eea:	4082      	lsls	r2, r0
 8005eec:	4313      	orrs	r3, r2
 8005eee:	3401      	adds	r4, #1
 8005ef0:	9304      	str	r3, [sp, #16]
 8005ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ef6:	4829      	ldr	r0, [pc, #164]	@ (8005f9c <_vfiprintf_r+0x220>)
 8005ef8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005efc:	2206      	movs	r2, #6
 8005efe:	f7fa f9ef 	bl	80002e0 <memchr>
 8005f02:	2800      	cmp	r0, #0
 8005f04:	d03f      	beq.n	8005f86 <_vfiprintf_r+0x20a>
 8005f06:	4b26      	ldr	r3, [pc, #152]	@ (8005fa0 <_vfiprintf_r+0x224>)
 8005f08:	bb1b      	cbnz	r3, 8005f52 <_vfiprintf_r+0x1d6>
 8005f0a:	9b03      	ldr	r3, [sp, #12]
 8005f0c:	3307      	adds	r3, #7
 8005f0e:	f023 0307 	bic.w	r3, r3, #7
 8005f12:	3308      	adds	r3, #8
 8005f14:	9303      	str	r3, [sp, #12]
 8005f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f18:	443b      	add	r3, r7
 8005f1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f1c:	e76a      	b.n	8005df4 <_vfiprintf_r+0x78>
 8005f1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f22:	460c      	mov	r4, r1
 8005f24:	2001      	movs	r0, #1
 8005f26:	e7a8      	b.n	8005e7a <_vfiprintf_r+0xfe>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	3401      	adds	r4, #1
 8005f2c:	9305      	str	r3, [sp, #20]
 8005f2e:	4619      	mov	r1, r3
 8005f30:	f04f 0c0a 	mov.w	ip, #10
 8005f34:	4620      	mov	r0, r4
 8005f36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f3a:	3a30      	subs	r2, #48	@ 0x30
 8005f3c:	2a09      	cmp	r2, #9
 8005f3e:	d903      	bls.n	8005f48 <_vfiprintf_r+0x1cc>
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d0c6      	beq.n	8005ed2 <_vfiprintf_r+0x156>
 8005f44:	9105      	str	r1, [sp, #20]
 8005f46:	e7c4      	b.n	8005ed2 <_vfiprintf_r+0x156>
 8005f48:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f4c:	4604      	mov	r4, r0
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e7f0      	b.n	8005f34 <_vfiprintf_r+0x1b8>
 8005f52:	ab03      	add	r3, sp, #12
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	462a      	mov	r2, r5
 8005f58:	4b12      	ldr	r3, [pc, #72]	@ (8005fa4 <_vfiprintf_r+0x228>)
 8005f5a:	a904      	add	r1, sp, #16
 8005f5c:	4630      	mov	r0, r6
 8005f5e:	f3af 8000 	nop.w
 8005f62:	4607      	mov	r7, r0
 8005f64:	1c78      	adds	r0, r7, #1
 8005f66:	d1d6      	bne.n	8005f16 <_vfiprintf_r+0x19a>
 8005f68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f6a:	07d9      	lsls	r1, r3, #31
 8005f6c:	d405      	bmi.n	8005f7a <_vfiprintf_r+0x1fe>
 8005f6e:	89ab      	ldrh	r3, [r5, #12]
 8005f70:	059a      	lsls	r2, r3, #22
 8005f72:	d402      	bmi.n	8005f7a <_vfiprintf_r+0x1fe>
 8005f74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f76:	f7ff fddd 	bl	8005b34 <__retarget_lock_release_recursive>
 8005f7a:	89ab      	ldrh	r3, [r5, #12]
 8005f7c:	065b      	lsls	r3, r3, #25
 8005f7e:	f53f af1f 	bmi.w	8005dc0 <_vfiprintf_r+0x44>
 8005f82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f84:	e71e      	b.n	8005dc4 <_vfiprintf_r+0x48>
 8005f86:	ab03      	add	r3, sp, #12
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	462a      	mov	r2, r5
 8005f8c:	4b05      	ldr	r3, [pc, #20]	@ (8005fa4 <_vfiprintf_r+0x228>)
 8005f8e:	a904      	add	r1, sp, #16
 8005f90:	4630      	mov	r0, r6
 8005f92:	f000 f879 	bl	8006088 <_printf_i>
 8005f96:	e7e4      	b.n	8005f62 <_vfiprintf_r+0x1e6>
 8005f98:	080066bc 	.word	0x080066bc
 8005f9c:	080066c6 	.word	0x080066c6
 8005fa0:	00000000 	.word	0x00000000
 8005fa4:	08005d57 	.word	0x08005d57
 8005fa8:	080066c2 	.word	0x080066c2

08005fac <_printf_common>:
 8005fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fb0:	4616      	mov	r6, r2
 8005fb2:	4698      	mov	r8, r3
 8005fb4:	688a      	ldr	r2, [r1, #8]
 8005fb6:	690b      	ldr	r3, [r1, #16]
 8005fb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	bfb8      	it	lt
 8005fc0:	4613      	movlt	r3, r2
 8005fc2:	6033      	str	r3, [r6, #0]
 8005fc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fc8:	4607      	mov	r7, r0
 8005fca:	460c      	mov	r4, r1
 8005fcc:	b10a      	cbz	r2, 8005fd2 <_printf_common+0x26>
 8005fce:	3301      	adds	r3, #1
 8005fd0:	6033      	str	r3, [r6, #0]
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	0699      	lsls	r1, r3, #26
 8005fd6:	bf42      	ittt	mi
 8005fd8:	6833      	ldrmi	r3, [r6, #0]
 8005fda:	3302      	addmi	r3, #2
 8005fdc:	6033      	strmi	r3, [r6, #0]
 8005fde:	6825      	ldr	r5, [r4, #0]
 8005fe0:	f015 0506 	ands.w	r5, r5, #6
 8005fe4:	d106      	bne.n	8005ff4 <_printf_common+0x48>
 8005fe6:	f104 0a19 	add.w	sl, r4, #25
 8005fea:	68e3      	ldr	r3, [r4, #12]
 8005fec:	6832      	ldr	r2, [r6, #0]
 8005fee:	1a9b      	subs	r3, r3, r2
 8005ff0:	42ab      	cmp	r3, r5
 8005ff2:	dc26      	bgt.n	8006042 <_printf_common+0x96>
 8005ff4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ff8:	6822      	ldr	r2, [r4, #0]
 8005ffa:	3b00      	subs	r3, #0
 8005ffc:	bf18      	it	ne
 8005ffe:	2301      	movne	r3, #1
 8006000:	0692      	lsls	r2, r2, #26
 8006002:	d42b      	bmi.n	800605c <_printf_common+0xb0>
 8006004:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006008:	4641      	mov	r1, r8
 800600a:	4638      	mov	r0, r7
 800600c:	47c8      	blx	r9
 800600e:	3001      	adds	r0, #1
 8006010:	d01e      	beq.n	8006050 <_printf_common+0xa4>
 8006012:	6823      	ldr	r3, [r4, #0]
 8006014:	6922      	ldr	r2, [r4, #16]
 8006016:	f003 0306 	and.w	r3, r3, #6
 800601a:	2b04      	cmp	r3, #4
 800601c:	bf02      	ittt	eq
 800601e:	68e5      	ldreq	r5, [r4, #12]
 8006020:	6833      	ldreq	r3, [r6, #0]
 8006022:	1aed      	subeq	r5, r5, r3
 8006024:	68a3      	ldr	r3, [r4, #8]
 8006026:	bf0c      	ite	eq
 8006028:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800602c:	2500      	movne	r5, #0
 800602e:	4293      	cmp	r3, r2
 8006030:	bfc4      	itt	gt
 8006032:	1a9b      	subgt	r3, r3, r2
 8006034:	18ed      	addgt	r5, r5, r3
 8006036:	2600      	movs	r6, #0
 8006038:	341a      	adds	r4, #26
 800603a:	42b5      	cmp	r5, r6
 800603c:	d11a      	bne.n	8006074 <_printf_common+0xc8>
 800603e:	2000      	movs	r0, #0
 8006040:	e008      	b.n	8006054 <_printf_common+0xa8>
 8006042:	2301      	movs	r3, #1
 8006044:	4652      	mov	r2, sl
 8006046:	4641      	mov	r1, r8
 8006048:	4638      	mov	r0, r7
 800604a:	47c8      	blx	r9
 800604c:	3001      	adds	r0, #1
 800604e:	d103      	bne.n	8006058 <_printf_common+0xac>
 8006050:	f04f 30ff 	mov.w	r0, #4294967295
 8006054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006058:	3501      	adds	r5, #1
 800605a:	e7c6      	b.n	8005fea <_printf_common+0x3e>
 800605c:	18e1      	adds	r1, r4, r3
 800605e:	1c5a      	adds	r2, r3, #1
 8006060:	2030      	movs	r0, #48	@ 0x30
 8006062:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006066:	4422      	add	r2, r4
 8006068:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800606c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006070:	3302      	adds	r3, #2
 8006072:	e7c7      	b.n	8006004 <_printf_common+0x58>
 8006074:	2301      	movs	r3, #1
 8006076:	4622      	mov	r2, r4
 8006078:	4641      	mov	r1, r8
 800607a:	4638      	mov	r0, r7
 800607c:	47c8      	blx	r9
 800607e:	3001      	adds	r0, #1
 8006080:	d0e6      	beq.n	8006050 <_printf_common+0xa4>
 8006082:	3601      	adds	r6, #1
 8006084:	e7d9      	b.n	800603a <_printf_common+0x8e>
	...

08006088 <_printf_i>:
 8006088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800608c:	7e0f      	ldrb	r7, [r1, #24]
 800608e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006090:	2f78      	cmp	r7, #120	@ 0x78
 8006092:	4691      	mov	r9, r2
 8006094:	4680      	mov	r8, r0
 8006096:	460c      	mov	r4, r1
 8006098:	469a      	mov	sl, r3
 800609a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800609e:	d807      	bhi.n	80060b0 <_printf_i+0x28>
 80060a0:	2f62      	cmp	r7, #98	@ 0x62
 80060a2:	d80a      	bhi.n	80060ba <_printf_i+0x32>
 80060a4:	2f00      	cmp	r7, #0
 80060a6:	f000 80d1 	beq.w	800624c <_printf_i+0x1c4>
 80060aa:	2f58      	cmp	r7, #88	@ 0x58
 80060ac:	f000 80b8 	beq.w	8006220 <_printf_i+0x198>
 80060b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060b8:	e03a      	b.n	8006130 <_printf_i+0xa8>
 80060ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060be:	2b15      	cmp	r3, #21
 80060c0:	d8f6      	bhi.n	80060b0 <_printf_i+0x28>
 80060c2:	a101      	add	r1, pc, #4	@ (adr r1, 80060c8 <_printf_i+0x40>)
 80060c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060c8:	08006121 	.word	0x08006121
 80060cc:	08006135 	.word	0x08006135
 80060d0:	080060b1 	.word	0x080060b1
 80060d4:	080060b1 	.word	0x080060b1
 80060d8:	080060b1 	.word	0x080060b1
 80060dc:	080060b1 	.word	0x080060b1
 80060e0:	08006135 	.word	0x08006135
 80060e4:	080060b1 	.word	0x080060b1
 80060e8:	080060b1 	.word	0x080060b1
 80060ec:	080060b1 	.word	0x080060b1
 80060f0:	080060b1 	.word	0x080060b1
 80060f4:	08006233 	.word	0x08006233
 80060f8:	0800615f 	.word	0x0800615f
 80060fc:	080061ed 	.word	0x080061ed
 8006100:	080060b1 	.word	0x080060b1
 8006104:	080060b1 	.word	0x080060b1
 8006108:	08006255 	.word	0x08006255
 800610c:	080060b1 	.word	0x080060b1
 8006110:	0800615f 	.word	0x0800615f
 8006114:	080060b1 	.word	0x080060b1
 8006118:	080060b1 	.word	0x080060b1
 800611c:	080061f5 	.word	0x080061f5
 8006120:	6833      	ldr	r3, [r6, #0]
 8006122:	1d1a      	adds	r2, r3, #4
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	6032      	str	r2, [r6, #0]
 8006128:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800612c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006130:	2301      	movs	r3, #1
 8006132:	e09c      	b.n	800626e <_printf_i+0x1e6>
 8006134:	6833      	ldr	r3, [r6, #0]
 8006136:	6820      	ldr	r0, [r4, #0]
 8006138:	1d19      	adds	r1, r3, #4
 800613a:	6031      	str	r1, [r6, #0]
 800613c:	0606      	lsls	r6, r0, #24
 800613e:	d501      	bpl.n	8006144 <_printf_i+0xbc>
 8006140:	681d      	ldr	r5, [r3, #0]
 8006142:	e003      	b.n	800614c <_printf_i+0xc4>
 8006144:	0645      	lsls	r5, r0, #25
 8006146:	d5fb      	bpl.n	8006140 <_printf_i+0xb8>
 8006148:	f9b3 5000 	ldrsh.w	r5, [r3]
 800614c:	2d00      	cmp	r5, #0
 800614e:	da03      	bge.n	8006158 <_printf_i+0xd0>
 8006150:	232d      	movs	r3, #45	@ 0x2d
 8006152:	426d      	negs	r5, r5
 8006154:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006158:	4858      	ldr	r0, [pc, #352]	@ (80062bc <_printf_i+0x234>)
 800615a:	230a      	movs	r3, #10
 800615c:	e011      	b.n	8006182 <_printf_i+0xfa>
 800615e:	6821      	ldr	r1, [r4, #0]
 8006160:	6833      	ldr	r3, [r6, #0]
 8006162:	0608      	lsls	r0, r1, #24
 8006164:	f853 5b04 	ldr.w	r5, [r3], #4
 8006168:	d402      	bmi.n	8006170 <_printf_i+0xe8>
 800616a:	0649      	lsls	r1, r1, #25
 800616c:	bf48      	it	mi
 800616e:	b2ad      	uxthmi	r5, r5
 8006170:	2f6f      	cmp	r7, #111	@ 0x6f
 8006172:	4852      	ldr	r0, [pc, #328]	@ (80062bc <_printf_i+0x234>)
 8006174:	6033      	str	r3, [r6, #0]
 8006176:	bf14      	ite	ne
 8006178:	230a      	movne	r3, #10
 800617a:	2308      	moveq	r3, #8
 800617c:	2100      	movs	r1, #0
 800617e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006182:	6866      	ldr	r6, [r4, #4]
 8006184:	60a6      	str	r6, [r4, #8]
 8006186:	2e00      	cmp	r6, #0
 8006188:	db05      	blt.n	8006196 <_printf_i+0x10e>
 800618a:	6821      	ldr	r1, [r4, #0]
 800618c:	432e      	orrs	r6, r5
 800618e:	f021 0104 	bic.w	r1, r1, #4
 8006192:	6021      	str	r1, [r4, #0]
 8006194:	d04b      	beq.n	800622e <_printf_i+0x1a6>
 8006196:	4616      	mov	r6, r2
 8006198:	fbb5 f1f3 	udiv	r1, r5, r3
 800619c:	fb03 5711 	mls	r7, r3, r1, r5
 80061a0:	5dc7      	ldrb	r7, [r0, r7]
 80061a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061a6:	462f      	mov	r7, r5
 80061a8:	42bb      	cmp	r3, r7
 80061aa:	460d      	mov	r5, r1
 80061ac:	d9f4      	bls.n	8006198 <_printf_i+0x110>
 80061ae:	2b08      	cmp	r3, #8
 80061b0:	d10b      	bne.n	80061ca <_printf_i+0x142>
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	07df      	lsls	r7, r3, #31
 80061b6:	d508      	bpl.n	80061ca <_printf_i+0x142>
 80061b8:	6923      	ldr	r3, [r4, #16]
 80061ba:	6861      	ldr	r1, [r4, #4]
 80061bc:	4299      	cmp	r1, r3
 80061be:	bfde      	ittt	le
 80061c0:	2330      	movle	r3, #48	@ 0x30
 80061c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061ca:	1b92      	subs	r2, r2, r6
 80061cc:	6122      	str	r2, [r4, #16]
 80061ce:	f8cd a000 	str.w	sl, [sp]
 80061d2:	464b      	mov	r3, r9
 80061d4:	aa03      	add	r2, sp, #12
 80061d6:	4621      	mov	r1, r4
 80061d8:	4640      	mov	r0, r8
 80061da:	f7ff fee7 	bl	8005fac <_printf_common>
 80061de:	3001      	adds	r0, #1
 80061e0:	d14a      	bne.n	8006278 <_printf_i+0x1f0>
 80061e2:	f04f 30ff 	mov.w	r0, #4294967295
 80061e6:	b004      	add	sp, #16
 80061e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061ec:	6823      	ldr	r3, [r4, #0]
 80061ee:	f043 0320 	orr.w	r3, r3, #32
 80061f2:	6023      	str	r3, [r4, #0]
 80061f4:	4832      	ldr	r0, [pc, #200]	@ (80062c0 <_printf_i+0x238>)
 80061f6:	2778      	movs	r7, #120	@ 0x78
 80061f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	6831      	ldr	r1, [r6, #0]
 8006200:	061f      	lsls	r7, r3, #24
 8006202:	f851 5b04 	ldr.w	r5, [r1], #4
 8006206:	d402      	bmi.n	800620e <_printf_i+0x186>
 8006208:	065f      	lsls	r7, r3, #25
 800620a:	bf48      	it	mi
 800620c:	b2ad      	uxthmi	r5, r5
 800620e:	6031      	str	r1, [r6, #0]
 8006210:	07d9      	lsls	r1, r3, #31
 8006212:	bf44      	itt	mi
 8006214:	f043 0320 	orrmi.w	r3, r3, #32
 8006218:	6023      	strmi	r3, [r4, #0]
 800621a:	b11d      	cbz	r5, 8006224 <_printf_i+0x19c>
 800621c:	2310      	movs	r3, #16
 800621e:	e7ad      	b.n	800617c <_printf_i+0xf4>
 8006220:	4826      	ldr	r0, [pc, #152]	@ (80062bc <_printf_i+0x234>)
 8006222:	e7e9      	b.n	80061f8 <_printf_i+0x170>
 8006224:	6823      	ldr	r3, [r4, #0]
 8006226:	f023 0320 	bic.w	r3, r3, #32
 800622a:	6023      	str	r3, [r4, #0]
 800622c:	e7f6      	b.n	800621c <_printf_i+0x194>
 800622e:	4616      	mov	r6, r2
 8006230:	e7bd      	b.n	80061ae <_printf_i+0x126>
 8006232:	6833      	ldr	r3, [r6, #0]
 8006234:	6825      	ldr	r5, [r4, #0]
 8006236:	6961      	ldr	r1, [r4, #20]
 8006238:	1d18      	adds	r0, r3, #4
 800623a:	6030      	str	r0, [r6, #0]
 800623c:	062e      	lsls	r6, r5, #24
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	d501      	bpl.n	8006246 <_printf_i+0x1be>
 8006242:	6019      	str	r1, [r3, #0]
 8006244:	e002      	b.n	800624c <_printf_i+0x1c4>
 8006246:	0668      	lsls	r0, r5, #25
 8006248:	d5fb      	bpl.n	8006242 <_printf_i+0x1ba>
 800624a:	8019      	strh	r1, [r3, #0]
 800624c:	2300      	movs	r3, #0
 800624e:	6123      	str	r3, [r4, #16]
 8006250:	4616      	mov	r6, r2
 8006252:	e7bc      	b.n	80061ce <_printf_i+0x146>
 8006254:	6833      	ldr	r3, [r6, #0]
 8006256:	1d1a      	adds	r2, r3, #4
 8006258:	6032      	str	r2, [r6, #0]
 800625a:	681e      	ldr	r6, [r3, #0]
 800625c:	6862      	ldr	r2, [r4, #4]
 800625e:	2100      	movs	r1, #0
 8006260:	4630      	mov	r0, r6
 8006262:	f7fa f83d 	bl	80002e0 <memchr>
 8006266:	b108      	cbz	r0, 800626c <_printf_i+0x1e4>
 8006268:	1b80      	subs	r0, r0, r6
 800626a:	6060      	str	r0, [r4, #4]
 800626c:	6863      	ldr	r3, [r4, #4]
 800626e:	6123      	str	r3, [r4, #16]
 8006270:	2300      	movs	r3, #0
 8006272:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006276:	e7aa      	b.n	80061ce <_printf_i+0x146>
 8006278:	6923      	ldr	r3, [r4, #16]
 800627a:	4632      	mov	r2, r6
 800627c:	4649      	mov	r1, r9
 800627e:	4640      	mov	r0, r8
 8006280:	47d0      	blx	sl
 8006282:	3001      	adds	r0, #1
 8006284:	d0ad      	beq.n	80061e2 <_printf_i+0x15a>
 8006286:	6823      	ldr	r3, [r4, #0]
 8006288:	079b      	lsls	r3, r3, #30
 800628a:	d413      	bmi.n	80062b4 <_printf_i+0x22c>
 800628c:	68e0      	ldr	r0, [r4, #12]
 800628e:	9b03      	ldr	r3, [sp, #12]
 8006290:	4298      	cmp	r0, r3
 8006292:	bfb8      	it	lt
 8006294:	4618      	movlt	r0, r3
 8006296:	e7a6      	b.n	80061e6 <_printf_i+0x15e>
 8006298:	2301      	movs	r3, #1
 800629a:	4632      	mov	r2, r6
 800629c:	4649      	mov	r1, r9
 800629e:	4640      	mov	r0, r8
 80062a0:	47d0      	blx	sl
 80062a2:	3001      	adds	r0, #1
 80062a4:	d09d      	beq.n	80061e2 <_printf_i+0x15a>
 80062a6:	3501      	adds	r5, #1
 80062a8:	68e3      	ldr	r3, [r4, #12]
 80062aa:	9903      	ldr	r1, [sp, #12]
 80062ac:	1a5b      	subs	r3, r3, r1
 80062ae:	42ab      	cmp	r3, r5
 80062b0:	dcf2      	bgt.n	8006298 <_printf_i+0x210>
 80062b2:	e7eb      	b.n	800628c <_printf_i+0x204>
 80062b4:	2500      	movs	r5, #0
 80062b6:	f104 0619 	add.w	r6, r4, #25
 80062ba:	e7f5      	b.n	80062a8 <_printf_i+0x220>
 80062bc:	080066cd 	.word	0x080066cd
 80062c0:	080066de 	.word	0x080066de

080062c4 <__sflush_r>:
 80062c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062cc:	0716      	lsls	r6, r2, #28
 80062ce:	4605      	mov	r5, r0
 80062d0:	460c      	mov	r4, r1
 80062d2:	d454      	bmi.n	800637e <__sflush_r+0xba>
 80062d4:	684b      	ldr	r3, [r1, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	dc02      	bgt.n	80062e0 <__sflush_r+0x1c>
 80062da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80062dc:	2b00      	cmp	r3, #0
 80062de:	dd48      	ble.n	8006372 <__sflush_r+0xae>
 80062e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062e2:	2e00      	cmp	r6, #0
 80062e4:	d045      	beq.n	8006372 <__sflush_r+0xae>
 80062e6:	2300      	movs	r3, #0
 80062e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80062ec:	682f      	ldr	r7, [r5, #0]
 80062ee:	6a21      	ldr	r1, [r4, #32]
 80062f0:	602b      	str	r3, [r5, #0]
 80062f2:	d030      	beq.n	8006356 <__sflush_r+0x92>
 80062f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80062f6:	89a3      	ldrh	r3, [r4, #12]
 80062f8:	0759      	lsls	r1, r3, #29
 80062fa:	d505      	bpl.n	8006308 <__sflush_r+0x44>
 80062fc:	6863      	ldr	r3, [r4, #4]
 80062fe:	1ad2      	subs	r2, r2, r3
 8006300:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006302:	b10b      	cbz	r3, 8006308 <__sflush_r+0x44>
 8006304:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006306:	1ad2      	subs	r2, r2, r3
 8006308:	2300      	movs	r3, #0
 800630a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800630c:	6a21      	ldr	r1, [r4, #32]
 800630e:	4628      	mov	r0, r5
 8006310:	47b0      	blx	r6
 8006312:	1c43      	adds	r3, r0, #1
 8006314:	89a3      	ldrh	r3, [r4, #12]
 8006316:	d106      	bne.n	8006326 <__sflush_r+0x62>
 8006318:	6829      	ldr	r1, [r5, #0]
 800631a:	291d      	cmp	r1, #29
 800631c:	d82b      	bhi.n	8006376 <__sflush_r+0xb2>
 800631e:	4a2a      	ldr	r2, [pc, #168]	@ (80063c8 <__sflush_r+0x104>)
 8006320:	40ca      	lsrs	r2, r1
 8006322:	07d6      	lsls	r6, r2, #31
 8006324:	d527      	bpl.n	8006376 <__sflush_r+0xb2>
 8006326:	2200      	movs	r2, #0
 8006328:	6062      	str	r2, [r4, #4]
 800632a:	04d9      	lsls	r1, r3, #19
 800632c:	6922      	ldr	r2, [r4, #16]
 800632e:	6022      	str	r2, [r4, #0]
 8006330:	d504      	bpl.n	800633c <__sflush_r+0x78>
 8006332:	1c42      	adds	r2, r0, #1
 8006334:	d101      	bne.n	800633a <__sflush_r+0x76>
 8006336:	682b      	ldr	r3, [r5, #0]
 8006338:	b903      	cbnz	r3, 800633c <__sflush_r+0x78>
 800633a:	6560      	str	r0, [r4, #84]	@ 0x54
 800633c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800633e:	602f      	str	r7, [r5, #0]
 8006340:	b1b9      	cbz	r1, 8006372 <__sflush_r+0xae>
 8006342:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006346:	4299      	cmp	r1, r3
 8006348:	d002      	beq.n	8006350 <__sflush_r+0x8c>
 800634a:	4628      	mov	r0, r5
 800634c:	f7ff fbf4 	bl	8005b38 <_free_r>
 8006350:	2300      	movs	r3, #0
 8006352:	6363      	str	r3, [r4, #52]	@ 0x34
 8006354:	e00d      	b.n	8006372 <__sflush_r+0xae>
 8006356:	2301      	movs	r3, #1
 8006358:	4628      	mov	r0, r5
 800635a:	47b0      	blx	r6
 800635c:	4602      	mov	r2, r0
 800635e:	1c50      	adds	r0, r2, #1
 8006360:	d1c9      	bne.n	80062f6 <__sflush_r+0x32>
 8006362:	682b      	ldr	r3, [r5, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d0c6      	beq.n	80062f6 <__sflush_r+0x32>
 8006368:	2b1d      	cmp	r3, #29
 800636a:	d001      	beq.n	8006370 <__sflush_r+0xac>
 800636c:	2b16      	cmp	r3, #22
 800636e:	d11e      	bne.n	80063ae <__sflush_r+0xea>
 8006370:	602f      	str	r7, [r5, #0]
 8006372:	2000      	movs	r0, #0
 8006374:	e022      	b.n	80063bc <__sflush_r+0xf8>
 8006376:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800637a:	b21b      	sxth	r3, r3
 800637c:	e01b      	b.n	80063b6 <__sflush_r+0xf2>
 800637e:	690f      	ldr	r7, [r1, #16]
 8006380:	2f00      	cmp	r7, #0
 8006382:	d0f6      	beq.n	8006372 <__sflush_r+0xae>
 8006384:	0793      	lsls	r3, r2, #30
 8006386:	680e      	ldr	r6, [r1, #0]
 8006388:	bf08      	it	eq
 800638a:	694b      	ldreq	r3, [r1, #20]
 800638c:	600f      	str	r7, [r1, #0]
 800638e:	bf18      	it	ne
 8006390:	2300      	movne	r3, #0
 8006392:	eba6 0807 	sub.w	r8, r6, r7
 8006396:	608b      	str	r3, [r1, #8]
 8006398:	f1b8 0f00 	cmp.w	r8, #0
 800639c:	dde9      	ble.n	8006372 <__sflush_r+0xae>
 800639e:	6a21      	ldr	r1, [r4, #32]
 80063a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80063a2:	4643      	mov	r3, r8
 80063a4:	463a      	mov	r2, r7
 80063a6:	4628      	mov	r0, r5
 80063a8:	47b0      	blx	r6
 80063aa:	2800      	cmp	r0, #0
 80063ac:	dc08      	bgt.n	80063c0 <__sflush_r+0xfc>
 80063ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063b6:	81a3      	strh	r3, [r4, #12]
 80063b8:	f04f 30ff 	mov.w	r0, #4294967295
 80063bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063c0:	4407      	add	r7, r0
 80063c2:	eba8 0800 	sub.w	r8, r8, r0
 80063c6:	e7e7      	b.n	8006398 <__sflush_r+0xd4>
 80063c8:	20400001 	.word	0x20400001

080063cc <_fflush_r>:
 80063cc:	b538      	push	{r3, r4, r5, lr}
 80063ce:	690b      	ldr	r3, [r1, #16]
 80063d0:	4605      	mov	r5, r0
 80063d2:	460c      	mov	r4, r1
 80063d4:	b913      	cbnz	r3, 80063dc <_fflush_r+0x10>
 80063d6:	2500      	movs	r5, #0
 80063d8:	4628      	mov	r0, r5
 80063da:	bd38      	pop	{r3, r4, r5, pc}
 80063dc:	b118      	cbz	r0, 80063e6 <_fflush_r+0x1a>
 80063de:	6a03      	ldr	r3, [r0, #32]
 80063e0:	b90b      	cbnz	r3, 80063e6 <_fflush_r+0x1a>
 80063e2:	f7ff faa1 	bl	8005928 <__sinit>
 80063e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d0f3      	beq.n	80063d6 <_fflush_r+0xa>
 80063ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80063f0:	07d0      	lsls	r0, r2, #31
 80063f2:	d404      	bmi.n	80063fe <_fflush_r+0x32>
 80063f4:	0599      	lsls	r1, r3, #22
 80063f6:	d402      	bmi.n	80063fe <_fflush_r+0x32>
 80063f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063fa:	f7ff fb9a 	bl	8005b32 <__retarget_lock_acquire_recursive>
 80063fe:	4628      	mov	r0, r5
 8006400:	4621      	mov	r1, r4
 8006402:	f7ff ff5f 	bl	80062c4 <__sflush_r>
 8006406:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006408:	07da      	lsls	r2, r3, #31
 800640a:	4605      	mov	r5, r0
 800640c:	d4e4      	bmi.n	80063d8 <_fflush_r+0xc>
 800640e:	89a3      	ldrh	r3, [r4, #12]
 8006410:	059b      	lsls	r3, r3, #22
 8006412:	d4e1      	bmi.n	80063d8 <_fflush_r+0xc>
 8006414:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006416:	f7ff fb8d 	bl	8005b34 <__retarget_lock_release_recursive>
 800641a:	e7dd      	b.n	80063d8 <_fflush_r+0xc>

0800641c <__swbuf_r>:
 800641c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800641e:	460e      	mov	r6, r1
 8006420:	4614      	mov	r4, r2
 8006422:	4605      	mov	r5, r0
 8006424:	b118      	cbz	r0, 800642e <__swbuf_r+0x12>
 8006426:	6a03      	ldr	r3, [r0, #32]
 8006428:	b90b      	cbnz	r3, 800642e <__swbuf_r+0x12>
 800642a:	f7ff fa7d 	bl	8005928 <__sinit>
 800642e:	69a3      	ldr	r3, [r4, #24]
 8006430:	60a3      	str	r3, [r4, #8]
 8006432:	89a3      	ldrh	r3, [r4, #12]
 8006434:	071a      	lsls	r2, r3, #28
 8006436:	d501      	bpl.n	800643c <__swbuf_r+0x20>
 8006438:	6923      	ldr	r3, [r4, #16]
 800643a:	b943      	cbnz	r3, 800644e <__swbuf_r+0x32>
 800643c:	4621      	mov	r1, r4
 800643e:	4628      	mov	r0, r5
 8006440:	f000 f82a 	bl	8006498 <__swsetup_r>
 8006444:	b118      	cbz	r0, 800644e <__swbuf_r+0x32>
 8006446:	f04f 37ff 	mov.w	r7, #4294967295
 800644a:	4638      	mov	r0, r7
 800644c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800644e:	6823      	ldr	r3, [r4, #0]
 8006450:	6922      	ldr	r2, [r4, #16]
 8006452:	1a98      	subs	r0, r3, r2
 8006454:	6963      	ldr	r3, [r4, #20]
 8006456:	b2f6      	uxtb	r6, r6
 8006458:	4283      	cmp	r3, r0
 800645a:	4637      	mov	r7, r6
 800645c:	dc05      	bgt.n	800646a <__swbuf_r+0x4e>
 800645e:	4621      	mov	r1, r4
 8006460:	4628      	mov	r0, r5
 8006462:	f7ff ffb3 	bl	80063cc <_fflush_r>
 8006466:	2800      	cmp	r0, #0
 8006468:	d1ed      	bne.n	8006446 <__swbuf_r+0x2a>
 800646a:	68a3      	ldr	r3, [r4, #8]
 800646c:	3b01      	subs	r3, #1
 800646e:	60a3      	str	r3, [r4, #8]
 8006470:	6823      	ldr	r3, [r4, #0]
 8006472:	1c5a      	adds	r2, r3, #1
 8006474:	6022      	str	r2, [r4, #0]
 8006476:	701e      	strb	r6, [r3, #0]
 8006478:	6962      	ldr	r2, [r4, #20]
 800647a:	1c43      	adds	r3, r0, #1
 800647c:	429a      	cmp	r2, r3
 800647e:	d004      	beq.n	800648a <__swbuf_r+0x6e>
 8006480:	89a3      	ldrh	r3, [r4, #12]
 8006482:	07db      	lsls	r3, r3, #31
 8006484:	d5e1      	bpl.n	800644a <__swbuf_r+0x2e>
 8006486:	2e0a      	cmp	r6, #10
 8006488:	d1df      	bne.n	800644a <__swbuf_r+0x2e>
 800648a:	4621      	mov	r1, r4
 800648c:	4628      	mov	r0, r5
 800648e:	f7ff ff9d 	bl	80063cc <_fflush_r>
 8006492:	2800      	cmp	r0, #0
 8006494:	d0d9      	beq.n	800644a <__swbuf_r+0x2e>
 8006496:	e7d6      	b.n	8006446 <__swbuf_r+0x2a>

08006498 <__swsetup_r>:
 8006498:	b538      	push	{r3, r4, r5, lr}
 800649a:	4b29      	ldr	r3, [pc, #164]	@ (8006540 <__swsetup_r+0xa8>)
 800649c:	4605      	mov	r5, r0
 800649e:	6818      	ldr	r0, [r3, #0]
 80064a0:	460c      	mov	r4, r1
 80064a2:	b118      	cbz	r0, 80064ac <__swsetup_r+0x14>
 80064a4:	6a03      	ldr	r3, [r0, #32]
 80064a6:	b90b      	cbnz	r3, 80064ac <__swsetup_r+0x14>
 80064a8:	f7ff fa3e 	bl	8005928 <__sinit>
 80064ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064b0:	0719      	lsls	r1, r3, #28
 80064b2:	d422      	bmi.n	80064fa <__swsetup_r+0x62>
 80064b4:	06da      	lsls	r2, r3, #27
 80064b6:	d407      	bmi.n	80064c8 <__swsetup_r+0x30>
 80064b8:	2209      	movs	r2, #9
 80064ba:	602a      	str	r2, [r5, #0]
 80064bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064c0:	81a3      	strh	r3, [r4, #12]
 80064c2:	f04f 30ff 	mov.w	r0, #4294967295
 80064c6:	e033      	b.n	8006530 <__swsetup_r+0x98>
 80064c8:	0758      	lsls	r0, r3, #29
 80064ca:	d512      	bpl.n	80064f2 <__swsetup_r+0x5a>
 80064cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064ce:	b141      	cbz	r1, 80064e2 <__swsetup_r+0x4a>
 80064d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064d4:	4299      	cmp	r1, r3
 80064d6:	d002      	beq.n	80064de <__swsetup_r+0x46>
 80064d8:	4628      	mov	r0, r5
 80064da:	f7ff fb2d 	bl	8005b38 <_free_r>
 80064de:	2300      	movs	r3, #0
 80064e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80064e2:	89a3      	ldrh	r3, [r4, #12]
 80064e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80064e8:	81a3      	strh	r3, [r4, #12]
 80064ea:	2300      	movs	r3, #0
 80064ec:	6063      	str	r3, [r4, #4]
 80064ee:	6923      	ldr	r3, [r4, #16]
 80064f0:	6023      	str	r3, [r4, #0]
 80064f2:	89a3      	ldrh	r3, [r4, #12]
 80064f4:	f043 0308 	orr.w	r3, r3, #8
 80064f8:	81a3      	strh	r3, [r4, #12]
 80064fa:	6923      	ldr	r3, [r4, #16]
 80064fc:	b94b      	cbnz	r3, 8006512 <__swsetup_r+0x7a>
 80064fe:	89a3      	ldrh	r3, [r4, #12]
 8006500:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006504:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006508:	d003      	beq.n	8006512 <__swsetup_r+0x7a>
 800650a:	4621      	mov	r1, r4
 800650c:	4628      	mov	r0, r5
 800650e:	f000 f84f 	bl	80065b0 <__smakebuf_r>
 8006512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006516:	f013 0201 	ands.w	r2, r3, #1
 800651a:	d00a      	beq.n	8006532 <__swsetup_r+0x9a>
 800651c:	2200      	movs	r2, #0
 800651e:	60a2      	str	r2, [r4, #8]
 8006520:	6962      	ldr	r2, [r4, #20]
 8006522:	4252      	negs	r2, r2
 8006524:	61a2      	str	r2, [r4, #24]
 8006526:	6922      	ldr	r2, [r4, #16]
 8006528:	b942      	cbnz	r2, 800653c <__swsetup_r+0xa4>
 800652a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800652e:	d1c5      	bne.n	80064bc <__swsetup_r+0x24>
 8006530:	bd38      	pop	{r3, r4, r5, pc}
 8006532:	0799      	lsls	r1, r3, #30
 8006534:	bf58      	it	pl
 8006536:	6962      	ldrpl	r2, [r4, #20]
 8006538:	60a2      	str	r2, [r4, #8]
 800653a:	e7f4      	b.n	8006526 <__swsetup_r+0x8e>
 800653c:	2000      	movs	r0, #0
 800653e:	e7f7      	b.n	8006530 <__swsetup_r+0x98>
 8006540:	2400001c 	.word	0x2400001c

08006544 <_sbrk_r>:
 8006544:	b538      	push	{r3, r4, r5, lr}
 8006546:	4d06      	ldr	r5, [pc, #24]	@ (8006560 <_sbrk_r+0x1c>)
 8006548:	2300      	movs	r3, #0
 800654a:	4604      	mov	r4, r0
 800654c:	4608      	mov	r0, r1
 800654e:	602b      	str	r3, [r5, #0]
 8006550:	f7fa fc6c 	bl	8000e2c <_sbrk>
 8006554:	1c43      	adds	r3, r0, #1
 8006556:	d102      	bne.n	800655e <_sbrk_r+0x1a>
 8006558:	682b      	ldr	r3, [r5, #0]
 800655a:	b103      	cbz	r3, 800655e <_sbrk_r+0x1a>
 800655c:	6023      	str	r3, [r4, #0]
 800655e:	bd38      	pop	{r3, r4, r5, pc}
 8006560:	24000260 	.word	0x24000260

08006564 <__swhatbuf_r>:
 8006564:	b570      	push	{r4, r5, r6, lr}
 8006566:	460c      	mov	r4, r1
 8006568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800656c:	2900      	cmp	r1, #0
 800656e:	b096      	sub	sp, #88	@ 0x58
 8006570:	4615      	mov	r5, r2
 8006572:	461e      	mov	r6, r3
 8006574:	da0d      	bge.n	8006592 <__swhatbuf_r+0x2e>
 8006576:	89a3      	ldrh	r3, [r4, #12]
 8006578:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800657c:	f04f 0100 	mov.w	r1, #0
 8006580:	bf14      	ite	ne
 8006582:	2340      	movne	r3, #64	@ 0x40
 8006584:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006588:	2000      	movs	r0, #0
 800658a:	6031      	str	r1, [r6, #0]
 800658c:	602b      	str	r3, [r5, #0]
 800658e:	b016      	add	sp, #88	@ 0x58
 8006590:	bd70      	pop	{r4, r5, r6, pc}
 8006592:	466a      	mov	r2, sp
 8006594:	f000 f848 	bl	8006628 <_fstat_r>
 8006598:	2800      	cmp	r0, #0
 800659a:	dbec      	blt.n	8006576 <__swhatbuf_r+0x12>
 800659c:	9901      	ldr	r1, [sp, #4]
 800659e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80065a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80065a6:	4259      	negs	r1, r3
 80065a8:	4159      	adcs	r1, r3
 80065aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065ae:	e7eb      	b.n	8006588 <__swhatbuf_r+0x24>

080065b0 <__smakebuf_r>:
 80065b0:	898b      	ldrh	r3, [r1, #12]
 80065b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065b4:	079d      	lsls	r5, r3, #30
 80065b6:	4606      	mov	r6, r0
 80065b8:	460c      	mov	r4, r1
 80065ba:	d507      	bpl.n	80065cc <__smakebuf_r+0x1c>
 80065bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80065c0:	6023      	str	r3, [r4, #0]
 80065c2:	6123      	str	r3, [r4, #16]
 80065c4:	2301      	movs	r3, #1
 80065c6:	6163      	str	r3, [r4, #20]
 80065c8:	b003      	add	sp, #12
 80065ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065cc:	ab01      	add	r3, sp, #4
 80065ce:	466a      	mov	r2, sp
 80065d0:	f7ff ffc8 	bl	8006564 <__swhatbuf_r>
 80065d4:	9f00      	ldr	r7, [sp, #0]
 80065d6:	4605      	mov	r5, r0
 80065d8:	4639      	mov	r1, r7
 80065da:	4630      	mov	r0, r6
 80065dc:	f7ff fb18 	bl	8005c10 <_malloc_r>
 80065e0:	b948      	cbnz	r0, 80065f6 <__smakebuf_r+0x46>
 80065e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065e6:	059a      	lsls	r2, r3, #22
 80065e8:	d4ee      	bmi.n	80065c8 <__smakebuf_r+0x18>
 80065ea:	f023 0303 	bic.w	r3, r3, #3
 80065ee:	f043 0302 	orr.w	r3, r3, #2
 80065f2:	81a3      	strh	r3, [r4, #12]
 80065f4:	e7e2      	b.n	80065bc <__smakebuf_r+0xc>
 80065f6:	89a3      	ldrh	r3, [r4, #12]
 80065f8:	6020      	str	r0, [r4, #0]
 80065fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065fe:	81a3      	strh	r3, [r4, #12]
 8006600:	9b01      	ldr	r3, [sp, #4]
 8006602:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006606:	b15b      	cbz	r3, 8006620 <__smakebuf_r+0x70>
 8006608:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800660c:	4630      	mov	r0, r6
 800660e:	f000 f81d 	bl	800664c <_isatty_r>
 8006612:	b128      	cbz	r0, 8006620 <__smakebuf_r+0x70>
 8006614:	89a3      	ldrh	r3, [r4, #12]
 8006616:	f023 0303 	bic.w	r3, r3, #3
 800661a:	f043 0301 	orr.w	r3, r3, #1
 800661e:	81a3      	strh	r3, [r4, #12]
 8006620:	89a3      	ldrh	r3, [r4, #12]
 8006622:	431d      	orrs	r5, r3
 8006624:	81a5      	strh	r5, [r4, #12]
 8006626:	e7cf      	b.n	80065c8 <__smakebuf_r+0x18>

08006628 <_fstat_r>:
 8006628:	b538      	push	{r3, r4, r5, lr}
 800662a:	4d07      	ldr	r5, [pc, #28]	@ (8006648 <_fstat_r+0x20>)
 800662c:	2300      	movs	r3, #0
 800662e:	4604      	mov	r4, r0
 8006630:	4608      	mov	r0, r1
 8006632:	4611      	mov	r1, r2
 8006634:	602b      	str	r3, [r5, #0]
 8006636:	f7fa fbd1 	bl	8000ddc <_fstat>
 800663a:	1c43      	adds	r3, r0, #1
 800663c:	d102      	bne.n	8006644 <_fstat_r+0x1c>
 800663e:	682b      	ldr	r3, [r5, #0]
 8006640:	b103      	cbz	r3, 8006644 <_fstat_r+0x1c>
 8006642:	6023      	str	r3, [r4, #0]
 8006644:	bd38      	pop	{r3, r4, r5, pc}
 8006646:	bf00      	nop
 8006648:	24000260 	.word	0x24000260

0800664c <_isatty_r>:
 800664c:	b538      	push	{r3, r4, r5, lr}
 800664e:	4d06      	ldr	r5, [pc, #24]	@ (8006668 <_isatty_r+0x1c>)
 8006650:	2300      	movs	r3, #0
 8006652:	4604      	mov	r4, r0
 8006654:	4608      	mov	r0, r1
 8006656:	602b      	str	r3, [r5, #0]
 8006658:	f7fa fbd0 	bl	8000dfc <_isatty>
 800665c:	1c43      	adds	r3, r0, #1
 800665e:	d102      	bne.n	8006666 <_isatty_r+0x1a>
 8006660:	682b      	ldr	r3, [r5, #0]
 8006662:	b103      	cbz	r3, 8006666 <_isatty_r+0x1a>
 8006664:	6023      	str	r3, [r4, #0]
 8006666:	bd38      	pop	{r3, r4, r5, pc}
 8006668:	24000260 	.word	0x24000260

0800666c <_init>:
 800666c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666e:	bf00      	nop
 8006670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006672:	bc08      	pop	{r3}
 8006674:	469e      	mov	lr, r3
 8006676:	4770      	bx	lr

08006678 <_fini>:
 8006678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800667a:	bf00      	nop
 800667c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800667e:	bc08      	pop	{r3}
 8006680:	469e      	mov	lr, r3
 8006682:	4770      	bx	lr
